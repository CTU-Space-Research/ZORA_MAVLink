
CTU_SR_Zora_MAVLink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009994  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08009b6c  08009b6c  00019b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d10  08009d10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d10  08009d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d18  08009d18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d18  08009d18  00019d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  2000000c  08009d2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a8  08009d2c  000209a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b572  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e70  00000000  00000000  0003b5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  0003e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a0  00000000  00000000  0003fc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002238d  00000000  00000000  00040ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a21  00000000  00000000  0006325d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecde9  00000000  00000000  0007cc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006900  00000000  00000000  00169a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00170368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b54 	.word	0x08009b54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08009b54 	.word	0x08009b54

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	b2da      	uxtb	r2, r3
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4053      	eors	r3, r2
 800052a:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	011b      	lsls	r3, r3, #4
 8000530:	b25a      	sxtb	r2, r3
 8000532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000536:	4053      	eors	r3, r2
 8000538:	b25b      	sxtb	r3, r3
 800053a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	b29b      	uxth	r3, r3
 8000544:	b21a      	sxth	r2, r3
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	021b      	lsls	r3, r3, #8
 800054a:	b21b      	sxth	r3, r3
 800054c:	4053      	eors	r3, r2
 800054e:	b21a      	sxth	r2, r3
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	b21b      	sxth	r3, r3
 8000556:	4053      	eors	r3, r2
 8000558:	b21a      	sxth	r2, r3
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	b2db      	uxtb	r3, r3
 8000560:	b21b      	sxth	r3, r3
 8000562:	4053      	eors	r3, r2
 8000564:	b21b      	sxth	r3, r3
 8000566:	b29a      	uxth	r2, r3
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	801a      	strh	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000586:	801a      	strh	r2, [r3, #0]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80005a0:	f107 030e 	add.w	r3, r7, #14
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffe7 	bl	8000578 <crc_init>
	while (length--) {
 80005aa:	e009      	b.n	80005c0 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f107 020e 	add.w	r2, r7, #14
 80005b8:	4611      	mov	r1, r2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ffaa 	bl	8000514 <crc_accumulate>
	while (length--) {
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	807a      	strh	r2, [r7, #2]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f0      	bne.n	80005ac <crc_calculate+0x18>
        }
        return crcTmp;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	4613      	mov	r3, r2
 80005e0:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	617b      	str	r3, [r7, #20]
	while (length--) {
 80005e6:	e007      	b.n	80005f8 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	617a      	str	r2, [r7, #20]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	68f9      	ldr	r1, [r7, #12]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff8e 	bl	8000514 <crc_accumulate>
	while (length--) {
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	1e5a      	subs	r2, r3, #1
 80005fc:	80fa      	strh	r2, [r7, #6]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f2      	bne.n	80005e8 <crc_accumulate_buffer+0x14>
        }
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <mavlink_sha256_init+0x50>)
 8000624:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <mavlink_sha256_init+0x54>)
 800062a:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <mavlink_sha256_init+0x58>)
 8000630:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <mavlink_sha256_init+0x5c>)
 8000636:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <mavlink_sha256_init+0x60>)
 800063c:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <mavlink_sha256_init+0x64>)
 8000642:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <mavlink_sha256_init+0x68>)
 8000648:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <mavlink_sha256_init+0x6c>)
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	6a09e667 	.word	0x6a09e667
 8000660:	bb67ae85 	.word	0xbb67ae85
 8000664:	3c6ef372 	.word	0x3c6ef372
 8000668:	a54ff53a 	.word	0xa54ff53a
 800066c:	510e527f 	.word	0x510e527f
 8000670:	9b05688c 	.word	0x9b05688c
 8000674:	1f83d9ab 	.word	0x1f83d9ab
 8000678:	5be0cd19 	.word	0x5be0cd19

0800067c <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 800067c:	b480      	push	{r7}
 800067e:	b0cf      	sub	sp, #316	; 0x13c
 8000680:	af00      	add	r7, sp, #0
 8000682:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000686:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800068a:	6018      	str	r0, [r3, #0]
 800068c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000690:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000694:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8000696:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800069a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 80006a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 80006b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	691b      	ldr	r3, [r3, #16]
 80006c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 80006c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 80006d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 80006e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80006f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8000706:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800070a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000712:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800071c:	e016      	b.n	800074c <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 800071e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000728:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	4413      	add	r3, r2
 8000730:	6819      	ldr	r1, [r3, #0]
 8000732:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800073a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800073e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000746:	3301      	adds	r3, #1
 8000748:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800074c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000750:	2b0f      	cmp	r3, #15
 8000752:	dde4      	ble.n	800071e <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000754:	2310      	movs	r3, #16
 8000756:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800075a:	e069      	b.n	8000830 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800075c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000760:	1e9a      	subs	r2, r3, #2
 8000762:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800076a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800076e:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000776:	1e99      	subs	r1, r3, #2
 8000778:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800077c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000780:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000784:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000788:	405a      	eors	r2, r3
 800078a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800078e:	1e99      	subs	r1, r3, #2
 8000790:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000798:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800079c:	0a9b      	lsrs	r3, r3, #10
 800079e:	405a      	eors	r2, r3
 80007a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007a4:	1fd9      	subs	r1, r3, #7
 80007a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007b2:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80007b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b8:	f1a3 010f 	sub.w	r1, r3, #15
 80007bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007c8:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80007cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007d0:	f1a3 000f 	sub.w	r0, r3, #15
 80007d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80007e0:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80007e4:	4059      	eors	r1, r3
 80007e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007ea:	f1a3 000f 	sub.w	r0, r3, #15
 80007ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80007fa:	08db      	lsrs	r3, r3, #3
 80007fc:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80007fe:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000804:	f1a3 0110 	sub.w	r1, r3, #16
 8000808:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800080c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000810:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000814:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000816:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800081a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800081e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800082a:	3301      	adds	r3, #1
 800082c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000834:	2b3f      	cmp	r3, #63	; 0x3f
 8000836:	dd91      	ble.n	800075c <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800083e:	e078      	b.n	8000932 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000840:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000844:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000848:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800084c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000850:	405a      	eors	r2, r3
 8000852:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000856:	ea4f 6373 	mov.w	r3, r3, ror #25
 800085a:	405a      	eors	r2, r3
 800085c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000860:	441a      	add	r2, r3
 8000862:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000866:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800086a:	4019      	ands	r1, r3
 800086c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000870:	43d8      	mvns	r0, r3
 8000872:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000876:	4003      	ands	r3, r0
 8000878:	404b      	eors	r3, r1
 800087a:	441a      	add	r2, r3
 800087c:	496e      	ldr	r1, [pc, #440]	; (8000a38 <mavlink_sha256_calc+0x3bc>)
 800087e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000882:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000886:	441a      	add	r2, r3
 8000888:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800088c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000890:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000894:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000898:	4413      	add	r3, r2
 800089a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800089e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008a2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80008a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008aa:	ea4f 3373 	mov.w	r3, r3, ror #13
 80008ae:	405a      	eors	r2, r3
 80008b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008b4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80008b8:	405a      	eors	r2, r3
 80008ba:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80008be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008c2:	4059      	eors	r1, r3
 80008c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008c8:	4019      	ands	r1, r3
 80008ca:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80008ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008d2:	4003      	ands	r3, r0
 80008d4:	404b      	eors	r3, r1
 80008d6:	4413      	add	r3, r2
 80008d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 80008dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 80008e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 80008ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 80008f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80008f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008fc:	4413      	add	r3, r2
 80008fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 800090a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800090e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000912:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000916:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 800091a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800091e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000922:	4413      	add	r3, r2
 8000924:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8000928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800092c:	3301      	adds	r3, #1
 800092e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000936:	2b3f      	cmp	r3, #63	; 0x3f
 8000938:	dd82      	ble.n	8000840 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 800093a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800093e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800094a:	441a      	add	r2, r3
 800094c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000950:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000958:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800095c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000968:	441a      	add	r2, r3
 800096a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800096e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8000976:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800097a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	691a      	ldr	r2, [r3, #16]
 8000982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000986:	441a      	add	r2, r3
 8000988:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800098c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8000994:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000998:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	695a      	ldr	r2, [r3, #20]
 80009a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80009a4:	441a      	add	r2, r3
 80009a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 80009b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	699a      	ldr	r2, [r3, #24]
 80009be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009c2:	441a      	add	r2, r3
 80009c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 80009d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	69da      	ldr	r2, [r3, #28]
 80009dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009e0:	441a      	add	r2, r3
 80009e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 80009ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	6a1a      	ldr	r2, [r3, #32]
 80009fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009fe:	441a      	add	r2, r3
 8000a00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8000a0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a1c:	441a      	add	r2, r3
 8000a1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a2a:	bf00      	nop
 8000a2c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	08009b7c 	.word	0x08009b7c

08000a3c <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b09c      	sub	sp, #112	; 0x70
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	441a      	add	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d904      	bls.n	8000a74 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a7c:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000a7e:	e057      	b.n	8000b30 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8000a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a82:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000a86:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d201      	bcs.n	8000a94 <mavlink_sha256_update+0x58>
            l = len;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a9c:	4413      	add	r3, r2
 8000a9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000aa0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f009 f848 	bl	8009b38 <memcpy>
	offset += l;
 8000aa8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aac:	4413      	add	r3, r2
 8000aae:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ab4:	4413      	add	r3, r2
 8000ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ac2:	2b40      	cmp	r3, #64	; 0x40
 8000ac4:	d134      	bne.n	8000b30 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3328      	adds	r3, #40	; 0x28
 8000aca:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8000acc:	2300      	movs	r3, #0
 8000ace:	663b      	str	r3, [r7, #96]	; 0x60
 8000ad0:	e023      	b.n	8000b1a <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ad8:	4413      	add	r3, r2
 8000ada:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000adc:	f107 0210 	add.w	r2, r7, #16
 8000ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aea:	3303      	adds	r3, #3
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000af0:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000af4:	1c9a      	adds	r2, r3, #2
 8000af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000af8:	3301      	adds	r3, #1
 8000afa:	7812      	ldrb	r2, [r2, #0]
 8000afc:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b04:	3302      	adds	r3, #2
 8000b06:	7812      	ldrb	r2, [r2, #0]
 8000b08:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b0c:	3303      	adds	r3, #3
 8000b0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b10:	7812      	ldrb	r2, [r2, #0]
 8000b12:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b16:	3301      	adds	r3, #1
 8000b18:	663b      	str	r3, [r7, #96]	; 0x60
 8000b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	ddd8      	ble.n	8000ad2 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff fda8 	bl	800067c <mavlink_sha256_calc>
	    offset = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1a4      	bne.n	8000a80 <mavlink_sha256_update+0x44>
	}
    }
}
 8000b36:	bf00      	nop
 8000b38:	bf00      	nop
 8000b3a:	3770      	adds	r7, #112	; 0x70
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b098      	sub	sp, #96	; 0x60
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b54:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b58:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b60:	3301      	adds	r3, #1
 8000b62:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3308      	adds	r3, #8
 8000b68:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	3301      	adds	r3, #1
 8000b74:	2247      	movs	r2, #71	; 0x47
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f008 ffb1 	bl	8009ae0 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b84:	3307      	adds	r3, #7
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	3360      	adds	r3, #96	; 0x60
 8000b8a:	443b      	add	r3, r7
 8000b8c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	0a1a      	lsrs	r2, r3, #8
 8000b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b98:	3306      	adds	r3, #6
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	3360      	adds	r3, #96	; 0x60
 8000b9e:	443b      	add	r3, r7
 8000ba0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	0c1a      	lsrs	r2, r3, #16
 8000baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bac:	3305      	adds	r3, #5
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	3360      	adds	r3, #96	; 0x60
 8000bb2:	443b      	add	r3, r7
 8000bb4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	0e1a      	lsrs	r2, r3, #24
 8000bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	3360      	adds	r3, #96	; 0x60
 8000bc6:	443b      	add	r3, r7
 8000bc8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bd2:	3303      	adds	r3, #3
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	3360      	adds	r3, #96	; 0x60
 8000bd8:	443b      	add	r3, r7
 8000bda:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	0a1a      	lsrs	r2, r3, #8
 8000be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000be6:	3302      	adds	r3, #2
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	3360      	adds	r3, #96	; 0x60
 8000bec:	443b      	add	r3, r7
 8000bee:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	0c1a      	lsrs	r2, r3, #16
 8000bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	3360      	adds	r3, #96	; 0x60
 8000c00:	443b      	add	r3, r7
 8000c02:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	b2d9      	uxtb	r1, r3
 8000c0e:	f107 020c 	add.w	r2, r7, #12
 8000c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c14:	4413      	add	r3, r2
 8000c16:	460a      	mov	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c1c:	f103 0208 	add.w	r2, r3, #8
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff08 	bl	8000a3c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c2e:	78da      	ldrb	r2, [r3, #3]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c3a:	7892      	ldrb	r2, [r2, #2]
 8000c3c:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3302      	adds	r3, #2
 8000c42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c44:	7852      	ldrb	r2, [r2, #1]
 8000c46:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	3303      	adds	r3, #3
 8000c4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c4e:	7812      	ldrb	r2, [r2, #0]
 8000c50:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	3304      	adds	r3, #4
 8000c56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c58:	79d2      	ldrb	r2, [r2, #7]
 8000c5a:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	3305      	adds	r3, #5
 8000c60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c62:	7992      	ldrb	r2, [r2, #6]
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	3760      	adds	r7, #96	; 0x60
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000c7a:	79fa      	ldrb	r2, [r7, #7]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <mavlink_get_channel_status+0x24>)
 8000c86:	4413      	add	r3, r2
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	200004b8 	.word	0x200004b8

08000c98 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f240 1223 	movw	r2, #291	; 0x123
 8000ca8:	fb02 f303 	mul.w	r3, r2, r3
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <mavlink_get_channel_buffer+0x24>)
 8000cae:	4413      	add	r3, r2
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	20000518 	.word	0x20000518

08000cc0 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b0a0      	sub	sp, #128	; 0x80
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d005      	beq.n	8000ce0 <mavlink_sign_packet+0x20>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <mavlink_sign_packet+0x24>
	    return 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e04f      	b.n	8000d84 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	785a      	ldrb	r2, [r3, #1]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f107 0110 	add.w	r1, r7, #16
 8000cfe:	2206      	movs	r2, #6
 8000d00:	4618      	mov	r0, r3
 8000d02:	f008 ff19 	bl	8009b38 <memcpy>
	signing->timestamp++;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d0c:	1c54      	adds	r4, r2, #1
 8000d0e:	f143 0500 	adc.w	r5, r3, #0
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fc75 	bl	800060c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f103 0110 	add.w	r1, r3, #16
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fe84 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fe7d 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000d42:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe74 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	2202      	movs	r2, #2
 8000d5a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe6c 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	2207      	movs	r2, #7
 8000d6a:	68b9      	ldr	r1, [r7, #8]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe65 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1dda      	adds	r2, r3, #7
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fedf 	bl	8000b40 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000d82:	230d      	movs	r3, #13
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3780      	adds	r7, #128	; 0x80
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bdb0      	pop	{r4, r5, r7, pc}

08000d8c <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000d98:	e002      	b.n	8000da0 <_mav_trim_payload+0x14>
		length--;
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d906      	bls.n	8000db4 <_mav_trim_payload+0x28>
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f2      	beq.n	8000d9a <_mav_trim_payload+0xe>
	}
	return length;
 8000db4:	78fb      	ldrb	r3, [r7, #3]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b0aa      	sub	sp, #168	; 0xa8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <mavlink_signature_check+0x16>
		return true;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e13e      	b.n	8001058 <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3302      	adds	r3, #2
 8000dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000de8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8000dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000df0:	3307      	adds	r3, #7
 8000df2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8000df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fc06 	bl	800060c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f103 0110 	add.w	r1, r3, #16
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fe15 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8000e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e16:	220a      	movs	r2, #10
 8000e18:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fe0d 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f103 010c 	add.w	r1, r3, #12
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	78db      	ldrb	r3, [r3, #3]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fe02 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8000e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e42:	2202      	movs	r2, #2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fdf9 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4e:	2207      	movs	r2, #7
 8000e50:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fdf1 	bl	8000a3c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8000e5a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe6b 	bl	8000b40 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	2206      	movs	r2, #6
 8000e70:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000e74:	4618      	mov	r0, r3
 8000e76:	f008 fe23 	bl	8009ac0 <memcmp>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2202      	movs	r2, #2
 8000e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return false;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e0e5      	b.n	8001058 <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8000e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8000ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ea6:	1c59      	adds	r1, r3, #1
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	2206      	movs	r2, #6
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f008 fe42 	bl	8009b38 <memcpy>

	if (signing_streams == NULL) {
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d105      	bne.n	8000ec6 <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                return false;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e0c8      	b.n	8001058 <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000ecc:	e02b      	b.n	8000f26 <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	79d9      	ldrb	r1, [r3, #7]
 8000ed2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000ed6:	68b8      	ldr	r0, [r7, #8]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4413      	add	r3, r2
 8000ede:	4403      	add	r3, r0
 8000ee0:	3303      	adds	r3, #3
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	d119      	bne.n	8000f1c <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7a19      	ldrb	r1, [r3, #8]
 8000eec:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000ef0:	68b8      	ldr	r0, [r7, #8]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4403      	add	r3, r0
 8000efa:	3304      	adds	r3, #4
 8000efc:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d10c      	bne.n	8000f1c <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8000f02:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	3302      	adds	r3, #2
 8000f12:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8000f14:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d00b      	beq.n	8000f34 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000f1c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000f20:	3301      	adds	r3, #1
 8000f22:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3cd      	bcc.n	8000ece <mavlink_signature_check+0x10a>
 8000f32:	e000      	b.n	8000f36 <mavlink_signature_check+0x172>
			break;
 8000f34:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d146      	bne.n	8000fd0 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d905      	bls.n	8000f56 <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e080      	b.n	8001058 <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8000f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f5a:	4941      	ldr	r1, [pc, #260]	; (8001060 <mavlink_signature_check+0x29c>)
 8000f5c:	1854      	adds	r4, r2, r1
 8000f5e:	f143 0500 	adc.w	r5, r3, #0
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f68:	4294      	cmp	r4, r2
 8000f6a:	eb75 0303 	sbcs.w	r3, r5, r3
 8000f6e:	d205      	bcs.n	8000f7c <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2205      	movs	r2, #5
 8000f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e06d      	b.n	8001058 <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8000f7c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	79d8      	ldrb	r0, [r3, #7]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	4613      	mov	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3303      	adds	r3, #3
 8000f90:	4602      	mov	r2, r0
 8000f92:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8000f94:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7a18      	ldrb	r0, [r3, #8]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	4602      	mov	r2, r0
 8000faa:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8000fac:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3302      	adds	r3, #2
 8000fbc:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000fc0:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	e021      	b.n	8001014 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8000fdc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	4413      	add	r3, r2
 8000fea:	1d59      	adds	r1, r3, #5
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2206      	movs	r2, #6
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 fda0 	bl	8009b38 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8000ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ffc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001000:	4290      	cmp	r0, r2
 8001002:	eb71 0303 	sbcs.w	r3, r1, r3
 8001006:	d305      	bcc.n	8001014 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2206      	movs	r2, #6
 800100c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8001010:	2300      	movs	r3, #0
 8001012:	e021      	b.n	8001058 <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001014:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	4413      	add	r3, r2
 8001022:	1d58      	adds	r0, r3, #5
 8001024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001028:	3301      	adds	r3, #1
 800102a:	2206      	movs	r2, #6
 800102c:	4619      	mov	r1, r3
 800102e:	f008 fd83 	bl	8009b38 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800103c:	4290      	cmp	r0, r2
 800103e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001042:	d204      	bcs.n	800104e <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8001044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001048:	68f9      	ldr	r1, [r7, #12]
 800104a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return true;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	37a8      	adds	r7, #168	; 0xa8
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	005b8d80 	.word	0x005b8d80

08001064 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	b08f      	sub	sp, #60	; 0x3c
 8001068:	af04      	add	r7, sp, #16
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	72fb      	strb	r3, [r7, #11]
 8001072:	4613      	mov	r3, r2
 8001074:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7b1b      	ldrb	r3, [r3, #12]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800108a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800108e:	f083 0301 	eor.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <mavlink_finalize_message_buffer+0x4e>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <mavlink_finalize_message_buffer+0x4e>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <mavlink_finalize_message_buffer+0x4e>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <mavlink_finalize_message_buffer+0x50>
 80010b2:	2300      	movs	r3, #0
 80010b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80010b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 80010c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <mavlink_finalize_message_buffer+0x6c>
 80010cc:	230d      	movs	r3, #13
 80010ce:	e000      	b.n	80010d2 <mavlink_finalize_message_buffer+0x6e>
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 80010d6:	230a      	movs	r3, #10
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 80010dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	22fe      	movs	r2, #254	; 0xfe
 80010e8:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010f0:	e002      	b.n	80010f8 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	22fd      	movs	r2, #253	; 0xfd
 80010f6:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80010f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10a      	bne.n	8001116 <mavlink_finalize_message_buffer+0xb2>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	330c      	adds	r3, #12
 8001104:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe3e 	bl	8000d8c <_mav_trim_payload>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	e001      	b.n	800111a <mavlink_finalize_message_buffer+0xb6>
 8001116:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	7afa      	ldrb	r2, [r7, #11]
 8001122:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	7aba      	ldrb	r2, [r7, #10]
 8001128:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001130:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	791b      	ldrb	r3, [r3, #4]
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	799a      	ldrb	r2, [r3, #6]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	799b      	ldrb	r3, [r3, #6]
 8001158:	3301      	adds	r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 800116c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	799b      	ldrb	r3, [r3, #6]
 8001178:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	79db      	ldrb	r3, [r3, #7]
 800117e:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	7a1b      	ldrb	r3, [r3, #8]
 8001184:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	7a5a      	ldrb	r2, [r3, #9]
 800118a:	7a99      	ldrb	r1, [r3, #10]
 800118c:	0209      	lsls	r1, r1, #8
 800118e:	430a      	orrs	r2, r1
 8001190:	7adb      	ldrb	r3, [r3, #11]
 8001192:	041b      	lsls	r3, r3, #16
 8001194:	4313      	orrs	r3, r2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	777b      	strb	r3, [r7, #29]
 800119a:	e030      	b.n	80011fe <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	791b      	ldrb	r3, [r3, #4]
 80011a0:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	795b      	ldrb	r3, [r3, #5]
 80011a6:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	799b      	ldrb	r3, [r3, #6]
 80011ac:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	79db      	ldrb	r3, [r3, #7]
 80011b2:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	7a5a      	ldrb	r2, [r3, #9]
 80011be:	7a99      	ldrb	r1, [r3, #10]
 80011c0:	0209      	lsls	r1, r1, #8
 80011c2:	430a      	orrs	r2, r1
 80011c4:	7adb      	ldrb	r3, [r3, #11]
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	7a5a      	ldrb	r2, [r3, #9]
 80011d2:	7a99      	ldrb	r1, [r3, #10]
 80011d4:	0209      	lsls	r1, r1, #8
 80011d6:	430a      	orrs	r2, r1
 80011d8:	7adb      	ldrb	r3, [r3, #11]
 80011da:	041b      	lsls	r3, r3, #16
 80011dc:	4313      	orrs	r3, r2
 80011de:	121b      	asrs	r3, r3, #8
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	7a5a      	ldrb	r2, [r3, #9]
 80011ea:	7a99      	ldrb	r1, [r3, #10]
 80011ec:	0209      	lsls	r1, r1, #8
 80011ee:	430a      	orrs	r2, r1
 80011f0:	7adb      	ldrb	r3, [r3, #11]
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	4313      	orrs	r3, r2
 80011f6:	141b      	asrs	r3, r3, #16
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 80011fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001202:	b29b      	uxth	r3, r3
 8001204:	3b01      	subs	r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	3301      	adds	r3, #1
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f9bf 	bl	8000594 <crc_calculate>
 8001216:	4603      	mov	r3, r0
 8001218:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f103 010c 	add.w	r1, r3, #12
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	78db      	ldrb	r3, [r3, #3]
 8001224:	b29a      	uxth	r2, r3
 8001226:	f107 0316 	add.w	r3, r7, #22
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f9d2 	bl	80005d4 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001230:	f107 0216 	add.w	r2, r7, #22
 8001234:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f96a 	bl	8000514 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001240:	8af9      	ldrh	r1, [r7, #22]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	330c      	adds	r3, #12
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	78d2      	ldrb	r2, [r2, #3]
 800124a:	4413      	add	r3, r2
 800124c:	b2ca      	uxtb	r2, r1
 800124e:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001250:	8afb      	ldrh	r3, [r7, #22]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	b299      	uxth	r1, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f103 020c 	add.w	r2, r3, #12
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	78db      	ldrb	r3, [r3, #3]
 8001260:	3301      	adds	r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8001268:	8afa      	ldrh	r2, [r7, #22]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 800126e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001272:	2b00      	cmp	r3, #0
 8001274:	d01a      	beq.n	80012ac <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	310c      	adds	r1, #12
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8001290:	4401      	add	r1, r0
 8001292:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8001296:	f107 0018 	add.w	r0, r7, #24
 800129a:	9102      	str	r1, [sp, #8]
 800129c:	9201      	str	r2, [sp, #4]
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	4633      	mov	r3, r6
 80012a2:	4602      	mov	r2, r0
 80012a4:	4629      	mov	r1, r5
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff fd0a 	bl	8000cc0 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	78db      	ldrb	r3, [r3, #3]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3302      	adds	r3, #2
 80012c8:	b29b      	uxth	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	372c      	adds	r7, #44	; 0x2c
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012d2 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b088      	sub	sp, #32
 80012d6:	af04      	add	r7, sp, #16
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	4608      	mov	r0, r1
 80012dc:	4611      	mov	r1, r2
 80012de:	461a      	mov	r2, r3
 80012e0:	4603      	mov	r3, r0
 80012e2:	70fb      	strb	r3, [r7, #3]
 80012e4:	460b      	mov	r3, r1
 80012e6:	70bb      	strb	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fcbe 	bl	8000c70 <mavlink_get_channel_status>
 80012f4:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 80012f6:	78ba      	ldrb	r2, [r7, #2]
 80012f8:	78f9      	ldrb	r1, [r7, #3]
 80012fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	7f3b      	ldrb	r3, [r7, #28]
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	7e3b      	ldrb	r3, [r7, #24]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff feaa 	bl	8001064 <mavlink_finalize_message_buffer>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af04      	add	r7, sp, #16
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	4608      	mov	r0, r1
 8001324:	4611      	mov	r1, r2
 8001326:	461a      	mov	r2, r3
 8001328:	4603      	mov	r3, r0
 800132a:	70fb      	strb	r3, [r7, #3]
 800132c:	460b      	mov	r3, r1
 800132e:	70bb      	strb	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001334:	78ba      	ldrb	r2, [r7, #2]
 8001336:	78f9      	ldrb	r1, [r7, #3]
 8001338:	7d3b      	ldrb	r3, [r7, #20]
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	7c3b      	ldrb	r3, [r7, #16]
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2300      	movs	r3, #0
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffc3 	bl	80012d2 <mavlink_finalize_message_chan>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	789b      	ldrb	r3, [r3, #2]
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	709a      	strb	r2, [r3, #2]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	78db      	ldrb	r3, [r3, #3]
 8001384:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	789b      	ldrb	r3, [r3, #2]
 800138a:	2bfe      	cmp	r3, #254	; 0xfe
 800138c:	d13a      	bne.n	8001404 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001392:	2305      	movs	r3, #5
 8001394:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	789a      	ldrb	r2, [r3, #2]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3301      	adds	r3, #1
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3302      	adds	r3, #2
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	7992      	ldrb	r2, [r2, #6]
 80013ae:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3303      	adds	r3, #3
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	79d2      	ldrb	r2, [r2, #7]
 80013b8:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3304      	adds	r3, #4
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	7a12      	ldrb	r2, [r2, #8]
 80013c2:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	7a5a      	ldrb	r2, [r3, #9]
 80013c8:	7a99      	ldrb	r1, [r3, #10]
 80013ca:	0209      	lsls	r1, r1, #8
 80013cc:	430a      	orrs	r2, r1
 80013ce:	7adb      	ldrb	r3, [r3, #11]
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	4313      	orrs	r3, r2
 80013d4:	461a      	mov	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3305      	adds	r3, #5
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	1d98      	adds	r0, r3, #6
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f103 010c 	add.w	r1, r3, #12
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	461a      	mov	r2, r3
 80013ee:	f008 fba3 	bl	8009b38 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80013f2:	7dbb      	ldrb	r3, [r7, #22]
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	78d2      	ldrb	r2, [r2, #3]
 80013f8:	4413      	add	r3, r2
 80013fa:	3301      	adds	r3, #1
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	e06c      	b.n	80014de <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	330c      	adds	r3, #12
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fcbd 	bl	8000d8c <_mav_trim_payload>
 8001412:	4603      	mov	r3, r0
 8001414:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001416:	2309      	movs	r3, #9
 8001418:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	789a      	ldrb	r2, [r3, #2]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3301      	adds	r3, #1
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3302      	adds	r3, #2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	7912      	ldrb	r2, [r2, #4]
 8001432:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3303      	adds	r3, #3
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	7952      	ldrb	r2, [r2, #5]
 800143c:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3304      	adds	r3, #4
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	7992      	ldrb	r2, [r2, #6]
 8001446:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3305      	adds	r3, #5
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	79d2      	ldrb	r2, [r2, #7]
 8001450:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3306      	adds	r3, #6
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	7a12      	ldrb	r2, [r2, #8]
 800145a:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	7a5a      	ldrb	r2, [r3, #9]
 8001460:	7a99      	ldrb	r1, [r3, #10]
 8001462:	0209      	lsls	r1, r1, #8
 8001464:	430a      	orrs	r2, r1
 8001466:	7adb      	ldrb	r3, [r3, #11]
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	4313      	orrs	r3, r2
 800146c:	461a      	mov	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3307      	adds	r3, #7
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	7a5a      	ldrb	r2, [r3, #9]
 800147a:	7a99      	ldrb	r1, [r3, #10]
 800147c:	0209      	lsls	r1, r1, #8
 800147e:	430a      	orrs	r2, r1
 8001480:	7adb      	ldrb	r3, [r3, #11]
 8001482:	041b      	lsls	r3, r3, #16
 8001484:	4313      	orrs	r3, r2
 8001486:	0a1a      	lsrs	r2, r3, #8
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3308      	adds	r3, #8
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	7a5a      	ldrb	r2, [r3, #9]
 8001494:	7a99      	ldrb	r1, [r3, #10]
 8001496:	0209      	lsls	r1, r1, #8
 8001498:	430a      	orrs	r2, r1
 800149a:	7adb      	ldrb	r3, [r3, #11]
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	4313      	orrs	r3, r2
 80014a0:	0c1a      	lsrs	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3309      	adds	r3, #9
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 000a 	add.w	r0, r3, #10
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	330c      	adds	r3, #12
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	4619      	mov	r1, r3
 80014b8:	f008 fb3e 	bl	8009b38 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80014bc:	7dba      	ldrb	r2, [r7, #22]
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	4413      	add	r3, r2
 80014c2:	3301      	adds	r3, #1
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <mavlink_msg_to_send_buffer+0x164>
 80014d6:	230d      	movs	r3, #13
 80014d8:	e000      	b.n	80014dc <mavlink_msg_to_send_buffer+0x166>
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1c98      	adds	r0, r3, #2
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800150c:	7dfa      	ldrb	r2, [r7, #23]
 800150e:	4619      	mov	r1, r3
 8001510:	f008 fb12 	bl	8009b38 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001514:	7dbb      	ldrb	r3, [r7, #22]
 8001516:	b29a      	uxth	r2, r3
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29a      	uxth	r2, r3
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29b      	uxth	r3, r3
 8001528:	3303      	adds	r3, #3
 800152a:	b29b      	uxth	r3, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001540:	f107 030e 	add.w	r3, r7, #14
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f817 	bl	8000578 <crc_init>
	msg->checksum = crcTmp;
 800154a:	89fa      	ldrh	r2, [r7, #14]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	801a      	strh	r2, [r3, #0]
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 800156c:	f107 020e 	add.w	r2, r7, #14
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffcd 	bl	8000514 <crc_accumulate>
	msg->checksum = checksum;
 800157a:	89fa      	ldrh	r2, [r7, #14]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	801a      	strh	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	2306      	movs	r3, #6
 8001596:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001598:	e025      	b.n	80015e6 <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4413      	add	r3, r2
 80015a0:	3301      	adds	r3, #1
 80015a2:	085b      	lsrs	r3, r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80015a6:	491f      	ldr	r1, [pc, #124]	; (8001624 <mavlink_get_msg_entry+0x9c>)
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d203      	bcs.n	80015c4 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3b01      	subs	r3, #1
 80015c0:	613b      	str	r3, [r7, #16]
                continue;
 80015c2:	e010      	b.n	80015e6 <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80015c4:	4917      	ldr	r1, [pc, #92]	; (8001624 <mavlink_get_msg_entry+0x9c>)
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d902      	bls.n	80015e0 <mavlink_get_msg_entry+0x58>
                low = mid;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	617b      	str	r3, [r7, #20]
                continue;
 80015de:	e002      	b.n	80015e6 <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	617b      	str	r3, [r7, #20]
            break;
 80015e4:	e003      	b.n	80015ee <mavlink_get_msg_entry+0x66>
        while (low < high) {
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3d5      	bcc.n	800159a <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <mavlink_get_msg_entry+0x9c>)
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8001604:	2300      	movs	r3, #0
 8001606:	e006      	b.n	8001616 <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <mavlink_get_msg_entry+0x9c>)
 8001614:	4413      	add	r3, r2
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	08009c7c 	.word	0x08009c7c

08001628 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	4613      	mov	r3, r2
 8001636:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	78db      	ldrb	r3, [r3, #3]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	f200 826e 	bhi.w	8001b24 <mavlink_frame_char_buffer+0x4fc>
 8001648:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <mavlink_frame_char_buffer+0x28>)
 800164a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164e:	bf00      	nop
 8001650:	08001691 	.word	0x08001691
 8001654:	08001691 	.word	0x08001691
 8001658:	080016ef 	.word	0x080016ef
 800165c:	08001755 	.word	0x08001755
 8001660:	0800178d 	.word	0x0800178d
 8001664:	080017a5 	.word	0x080017a5
 8001668:	080017bd 	.word	0x080017bd
 800166c:	080017d5 	.word	0x080017d5
 8001670:	080017ed 	.word	0x080017ed
 8001674:	08001847 	.word	0x08001847
 8001678:	08001893 	.word	0x08001893
 800167c:	080018ef 	.word	0x080018ef
 8001680:	08001927 	.word	0x08001927
 8001684:	080019b3 	.word	0x080019b3
 8001688:	080019b3 	.word	0x080019b3
 800168c:	08001a6f 	.word	0x08001a6f
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2bfd      	cmp	r3, #253	; 0xfd
 8001694:	d113      	bne.n	80016be <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2202      	movs	r2, #2
 800169a:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	7b1b      	ldrb	r3, [r3, #12]
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7ff ff3c 	bl	8001534 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 80016bc:	e229      	b.n	8001b12 <mavlink_frame_char_buffer+0x4ea>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2bfe      	cmp	r3, #254	; 0xfe
 80016c2:	f040 8226 	bne.w	8001b12 <mavlink_frame_char_buffer+0x4ea>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2202      	movs	r2, #2
 80016ca:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	7b1b      	ldrb	r3, [r3, #12]
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff ff24 	bl	8001534 <mavlink_start_checksum>
		break;
 80016ec:	e211      	b.n	8001b12 <mavlink_frame_char_buffer+0x4ea>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00f      	beq.n	8001716 <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	785b      	ldrb	r3, [r3, #1]
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001702:	68b8      	ldr	r0, [r7, #8]
 8001704:	f7ff fe27 	bl	8001356 <_mav_parse_error>
			status->msg_received = 0;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2201      	movs	r2, #1
 8001712:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001714:	e206      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
			rxmsg->len = c;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	79fa      	ldrb	r2, [r7, #7]
 800171a:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4619      	mov	r1, r3
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff ff16 	bl	8001558 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	7b1b      	ldrb	r3, [r3, #12]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d009      	beq.n	800174c <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2205      	movs	r2, #5
 8001748:	70da      	strb	r2, [r3, #3]
		break;
 800174a:	e1eb      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2203      	movs	r2, #3
 8001750:	70da      	strb	r2, [r3, #3]
		break;
 8001752:	e1e7      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	79fa      	ldrb	r2, [r7, #7]
 8001758:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <mavlink_frame_char_buffer+0x152>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f7ff fdf5 	bl	8001356 <_mav_parse_error>
			status->msg_received = 0;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2201      	movs	r2, #1
 8001776:	70da      	strb	r2, [r3, #3]
			break;
 8001778:	e1d4      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
		}
		mavlink_update_checksum(rxmsg, c);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4619      	mov	r1, r3
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff feea 	bl	8001558 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2204      	movs	r2, #4
 8001788:	70da      	strb	r2, [r3, #3]
		break;
 800178a:	e1cb      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4619      	mov	r1, r3
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fede 	bl	8001558 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2205      	movs	r2, #5
 80017a0:	70da      	strb	r2, [r3, #3]
		break;
 80017a2:	e1bf      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	79fa      	ldrb	r2, [r7, #7]
 80017a8:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	4619      	mov	r1, r3
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff fed2 	bl	8001558 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2206      	movs	r2, #6
 80017b8:	70da      	strb	r2, [r3, #3]
		break;
 80017ba:	e1b3      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	79fa      	ldrb	r2, [r7, #7]
 80017c0:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4619      	mov	r1, r3
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f7ff fec6 	bl	8001558 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2207      	movs	r2, #7
 80017d0:	70da      	strb	r2, [r3, #3]
		break;
 80017d2:	e1a7      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4619      	mov	r1, r3
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff feba 	bl	8001558 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2208      	movs	r2, #8
 80017e8:	70da      	strb	r2, [r3, #3]
		break;
 80017ea:	e19b      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	b2d9      	uxtb	r1, r3
 80017f6:	2000      	movs	r0, #0
 80017f8:	4301      	orrs	r1, r0
 80017fa:	7251      	strb	r1, [r2, #9]
 80017fc:	0a19      	lsrs	r1, r3, #8
 80017fe:	b2c9      	uxtb	r1, r1
 8001800:	2000      	movs	r0, #0
 8001802:	4301      	orrs	r1, r0
 8001804:	7291      	strb	r1, [r2, #10]
 8001806:	0c1b      	lsrs	r3, r3, #16
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2100      	movs	r1, #0
 800180c:	430b      	orrs	r3, r1
 800180e:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4619      	mov	r1, r3
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fe9f 	bl	8001558 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	7b1b      	ldrb	r3, [r3, #12]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <mavlink_frame_char_buffer+0x216>
			if(rxmsg->len > 0) {
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	78db      	ldrb	r3, [r3, #3]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <mavlink_frame_char_buffer+0x20e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	220b      	movs	r2, #11
 8001832:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001834:	e176      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	220c      	movs	r2, #12
 800183a:	70da      	strb	r2, [r3, #3]
		break;
 800183c:	e172      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2209      	movs	r2, #9
 8001842:	70da      	strb	r2, [r3, #3]
		break;
 8001844:	e16e      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	7a5a      	ldrb	r2, [r3, #9]
 800184a:	7a99      	ldrb	r1, [r3, #10]
 800184c:	0209      	lsls	r1, r1, #8
 800184e:	430a      	orrs	r2, r1
 8001850:	7adb      	ldrb	r3, [r3, #11]
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	4313      	orrs	r3, r2
 8001856:	461a      	mov	r2, r3
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	4313      	orrs	r3, r2
 800185e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	b2d1      	uxtb	r1, r2
 8001866:	2000      	movs	r0, #0
 8001868:	4301      	orrs	r1, r0
 800186a:	7259      	strb	r1, [r3, #9]
 800186c:	0a11      	lsrs	r1, r2, #8
 800186e:	b2c9      	uxtb	r1, r1
 8001870:	2000      	movs	r0, #0
 8001872:	4301      	orrs	r1, r0
 8001874:	7299      	strb	r1, [r3, #10]
 8001876:	0c12      	lsrs	r2, r2, #16
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	2100      	movs	r1, #0
 800187c:	430a      	orrs	r2, r1
 800187e:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4619      	mov	r1, r3
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff fe67 	bl	8001558 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	220a      	movs	r2, #10
 800188e:	70da      	strb	r2, [r3, #3]
		break;
 8001890:	e148      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	7a5a      	ldrb	r2, [r3, #9]
 8001896:	7a99      	ldrb	r1, [r3, #10]
 8001898:	0209      	lsls	r1, r1, #8
 800189a:	430a      	orrs	r2, r1
 800189c:	7adb      	ldrb	r3, [r3, #11]
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	4313      	orrs	r3, r2
 80018a2:	461a      	mov	r2, r3
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	4313      	orrs	r3, r2
 80018aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	2000      	movs	r0, #0
 80018b4:	4301      	orrs	r1, r0
 80018b6:	7259      	strb	r1, [r3, #9]
 80018b8:	0a11      	lsrs	r1, r2, #8
 80018ba:	b2c9      	uxtb	r1, r1
 80018bc:	2000      	movs	r0, #0
 80018be:	4301      	orrs	r1, r0
 80018c0:	7299      	strb	r1, [r3, #10]
 80018c2:	0c12      	lsrs	r2, r2, #16
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	2100      	movs	r1, #0
 80018c8:	430a      	orrs	r2, r1
 80018ca:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4619      	mov	r1, r3
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fe41 	bl	8001558 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	78db      	ldrb	r3, [r3, #3]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <mavlink_frame_char_buffer+0x2be>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	220b      	movs	r2, #11
 80018e2:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 80018e4:	e11e      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	220c      	movs	r2, #12
 80018ea:	70da      	strb	r2, [r3, #3]
		break;
 80018ec:	e11a      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f103 020c 	add.w	r2, r3, #12
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	791b      	ldrb	r3, [r3, #4]
 80018f8:	1c59      	adds	r1, r3, #1
 80018fa:	b2c8      	uxtb	r0, r1
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	7108      	strb	r0, [r1, #4]
 8001900:	4413      	add	r3, r2
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	4619      	mov	r1, r3
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff fe24 	bl	8001558 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	791a      	ldrb	r2, [r3, #4]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	78db      	ldrb	r3, [r3, #3]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 80fc 	bne.w	8001b16 <mavlink_frame_char_buffer+0x4ee>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	220c      	movs	r2, #12
 8001922:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001924:	e0f7      	b.n	8001b16 <mavlink_frame_char_buffer+0x4ee>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	7a5a      	ldrb	r2, [r3, #9]
 800192a:	7a99      	ldrb	r1, [r3, #10]
 800192c:	0209      	lsls	r1, r1, #8
 800192e:	430a      	orrs	r2, r1
 8001930:	7adb      	ldrb	r3, [r3, #11]
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	4313      	orrs	r3, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fe26 	bl	8001588 <mavlink_get_msg_entry>
 800193c:	61b8      	str	r0, [r7, #24]
		uint8_t crc_extra = e?e->crc_extra:0;
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <mavlink_frame_char_buffer+0x322>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	791b      	ldrb	r3, [r3, #4]
 8001948:	e000      	b.n	800194c <mavlink_frame_char_buffer+0x324>
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]
		mavlink_update_checksum(rxmsg, crc_extra);
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	4619      	mov	r1, r3
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff fe00 	bl	8001558 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8001958:	79fa      	ldrb	r2, [r7, #7]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	429a      	cmp	r2, r3
 8001964:	d003      	beq.n	800196e <mavlink_frame_char_buffer+0x346>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	220e      	movs	r2, #14
 800196a:	70da      	strb	r2, [r3, #3]
 800196c:	e002      	b.n	8001974 <mavlink_frame_char_buffer+0x34c>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	220d      	movs	r2, #13
 8001972:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80cb 	beq.w	8001b1a <mavlink_frame_char_buffer+0x4f2>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	791a      	ldrb	r2, [r3, #4]
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	799b      	ldrb	r3, [r3, #6]
 800198c:	429a      	cmp	r2, r3
 800198e:	f080 80c4 	bcs.w	8001b1a <mavlink_frame_char_buffer+0x4f2>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	330c      	adds	r3, #12
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	7912      	ldrb	r2, [r2, #4]
 800199a:	1898      	adds	r0, r3, r2
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	799b      	ldrb	r3, [r3, #6]
 80019a0:	461a      	mov	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	791b      	ldrb	r3, [r3, #4]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	f008 f898 	bl	8009ae0 <memset>
		}
		break;
 80019b0:	e0b3      	b.n	8001b1a <mavlink_frame_char_buffer+0x4f2>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	78db      	ldrb	r3, [r3, #3]
 80019b6:	2b0e      	cmp	r3, #14
 80019b8:	d008      	beq.n	80019cc <mavlink_frame_char_buffer+0x3a4>
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d003      	beq.n	80019d4 <mavlink_frame_char_buffer+0x3ac>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2202      	movs	r2, #2
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e002      	b.n	80019da <mavlink_frame_char_buffer+0x3b2>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	79fa      	ldrb	r2, [r7, #7]
 80019de:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	791b      	ldrb	r3, [r3, #4]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00e      	beq.n	8001a0c <mavlink_frame_char_buffer+0x3e4>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	220f      	movs	r2, #15
 80019f2:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	220d      	movs	r2, #13
 80019f8:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	f000 808d 	beq.w	8001b1e <mavlink_frame_char_buffer+0x4f6>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8001a0a:	e088      	b.n	8001b1e <mavlink_frame_char_buffer+0x4f6>
			if (status->signing &&
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01f      	beq.n	8001a54 <mavlink_frame_char_buffer+0x42c>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d013      	beq.n	8001a46 <mavlink_frame_char_buffer+0x41e>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	7a59      	ldrb	r1, [r3, #9]
 8001a28:	7a98      	ldrb	r0, [r3, #10]
 8001a2a:	0200      	lsls	r0, r0, #8
 8001a2c:	4301      	orrs	r1, r0
 8001a2e:	7adb      	ldrb	r3, [r3, #11]
 8001a30:	041b      	lsls	r3, r3, #16
 8001a32:	430b      	orrs	r3, r1
 8001a34:	4619      	mov	r1, r3
 8001a36:	68b8      	ldr	r0, [r7, #8]
 8001a38:	4790      	blx	r2
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f083 0301 	eor.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <mavlink_frame_char_buffer+0x42c>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d002      	beq.n	8001a54 <mavlink_frame_char_buffer+0x42c>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2203      	movs	r2, #3
 8001a52:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2201      	movs	r2, #1
 8001a58:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d05e      	beq.n	8001b1e <mavlink_frame_char_buffer+0x4f6>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001a60:	f240 1223 	movw	r2, #291	; 0x123
 8001a64:	68f9      	ldr	r1, [r7, #12]
 8001a66:	6838      	ldr	r0, [r7, #0]
 8001a68:	f008 f866 	bl	8009b38 <memcpy>
		break;
 8001a6c:	e057      	b.n	8001b1e <mavlink_frame_char_buffer+0x4f6>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	7b5b      	ldrb	r3, [r3, #13]
 8001a72:	f1c3 030d 	rsb	r3, r3, #13
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	7b5b      	ldrb	r3, [r3, #13]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	7b5b      	ldrb	r3, [r3, #13]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d146      	bne.n	8001b22 <mavlink_frame_char_buffer+0x4fa>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	6918      	ldr	r0, [r3, #16]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f990 	bl	8000dc4 <mavlink_signature_check>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8001aa8:	7ffb      	ldrb	r3, [r7, #31]
 8001aaa:	f083 0301 	eor.w	r3, r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d017      	beq.n	8001ae4 <mavlink_frame_char_buffer+0x4bc>
			   	(status->signing->accept_unsigned_callback &&
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d012      	beq.n	8001ae4 <mavlink_frame_char_buffer+0x4bc>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	7a59      	ldrb	r1, [r3, #9]
 8001ac8:	7a98      	ldrb	r0, [r3, #10]
 8001aca:	0200      	lsls	r0, r0, #8
 8001acc:	4301      	orrs	r1, r0
 8001ace:	7adb      	ldrb	r3, [r3, #11]
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	68b8      	ldr	r0, [r7, #8]
 8001ad8:	4790      	blx	r2
 8001ada:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <mavlink_frame_char_buffer+0x4bc>
				// accepted via application level override
				sig_ok = true;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <mavlink_frame_char_buffer+0x4ca>
				status->msg_received = MAVLINK_FRAMING_OK;
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	e002      	b.n	8001af8 <mavlink_frame_char_buffer+0x4d0>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2203      	movs	r2, #3
 8001af6:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2201      	movs	r2, #1
 8001afc:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00e      	beq.n	8001b22 <mavlink_frame_char_buffer+0x4fa>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001b04:	f240 1223 	movw	r2, #291	; 0x123
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	6838      	ldr	r0, [r7, #0]
 8001b0c:	f008 f814 	bl	8009b38 <memcpy>
			}
		}
		break;
 8001b10:	e007      	b.n	8001b22 <mavlink_frame_char_buffer+0x4fa>
		break;
 8001b12:	bf00      	nop
 8001b14:	e006      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
		break;
 8001b16:	bf00      	nop
 8001b18:	e004      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
		break;
 8001b1a:	bf00      	nop
 8001b1c:	e002      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
		break;
 8001b1e:	bf00      	nop
 8001b20:	e000      	b.n	8001b24 <mavlink_frame_char_buffer+0x4fc>
		break;
 8001b22:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d110      	bne.n	8001b4e <mavlink_frame_char_buffer+0x526>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	799a      	ldrb	r2, [r3, #6]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	891b      	ldrh	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <mavlink_frame_char_buffer+0x51a>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	891b      	ldrh	r3, [r3, #8]
 8001b46:	3301      	adds	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <mavlink_frame_char_buffer+0x534>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	78da      	ldrb	r2, [r3, #3]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8001b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01a      	beq.n	8001b98 <mavlink_frame_char_buffer+0x570>
           r_mavlink_status->parse_state = status->parse_state;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	78da      	ldrb	r2, [r3, #3]
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	791a      	ldrb	r2, [r3, #4]
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	795b      	ldrb	r3, [r3, #5]
 8001b76:	3301      	adds	r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	891a      	ldrh	r2, [r3, #8]
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	789b      	ldrb	r3, [r3, #2]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8e:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	7b1a      	ldrb	r2, [r3, #12]
 8001b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b96:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d110      	bne.n	8001bc8 <mavlink_frame_char_buffer+0x5a0>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00d      	beq.n	8001bc8 <mavlink_frame_char_buffer+0x5a0>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4603      	mov	r3, r0
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	460b      	mov	r3, r1
 8001be4:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f855 	bl	8000c98 <mavlink_get_channel_buffer>
 8001bee:	4604      	mov	r4, r0
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f83c 	bl	8000c70 <mavlink_get_channel_status>
 8001bf8:	4601      	mov	r1, r0
 8001bfa:	7bba      	ldrb	r2, [r7, #14]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7ff fd10 	bl	8001628 <mavlink_frame_char_buffer>
 8001c08:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}

08001c12 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b088      	sub	sp, #32
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60ba      	str	r2, [r7, #8]
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	460b      	mov	r3, r1
 8001c22:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8001c24:	7bb9      	ldrb	r1, [r7, #14]
 8001c26:	7bf8      	ldrb	r0, [r7, #15]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f7ff ffd2 	bl	8001bd4 <mavlink_frame_char>
 8001c30:	4603      	mov	r3, r0
 8001c32:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001c34:	7ffb      	ldrb	r3, [r7, #31]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d002      	beq.n	8001c40 <mavlink_parse_char+0x2e>
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d120      	bne.n	8001c82 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f828 	bl	8000c98 <mavlink_get_channel_buffer>
 8001c48:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f80f 	bl	8000c70 <mavlink_get_channel_status>
 8001c52:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8001c54:	6978      	ldr	r0, [r7, #20]
 8001c56:	f7ff fb7e 	bl	8001356 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2201      	movs	r2, #1
 8001c64:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	2bfd      	cmp	r3, #253	; 0xfd
 8001c6a:	d108      	bne.n	8001c7e <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2200      	movs	r2, #0
 8001c76:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8001c78:	69b8      	ldr	r0, [r7, #24]
 8001c7a:	f7ff fc5b 	bl	8001534 <mavlink_start_checksum>
	    }
	    return 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	if (src == NULL) {
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d105      	bne.n	8001caa <mav_array_memcpy+0x1e>
		memset(dest, 0, n);
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f007 ff1c 	bl	8009ae0 <memset>
	} else {
		memcpy(dest, src, n);
	}
}
 8001ca8:	e004      	b.n	8001cb4 <mav_array_memcpy+0x28>
		memcpy(dest, src, n);
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f007 ff42 	bl	8009b38 <memcpy>
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	603a      	str	r2, [r7, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	71bb      	strb	r3, [r7, #6]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 8001cd6:	797b      	ldrb	r3, [r7, #5]
 8001cd8:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8001cda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cde:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8001ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ce4:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 8001ce6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cea:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8001cec:	2303      	movs	r3, #3
 8001cee:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	330c      	adds	r3, #12
 8001cf4:	f107 010c 	add.w	r1, r7, #12
 8001cf8:	2209      	movs	r2, #9
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f007 ff1c 	bl	8009b38 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	725a      	strb	r2, [r3, #9]
 8001d06:	2200      	movs	r2, #0
 8001d08:	729a      	strb	r2, [r3, #10]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8001d0e:	79ba      	ldrb	r2, [r7, #6]
 8001d10:	79f9      	ldrb	r1, [r7, #7]
 8001d12:	2332      	movs	r3, #50	; 0x32
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	2309      	movs	r3, #9
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2309      	movs	r3, #9
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f7ff fafc 	bl	800131a <mavlink_finalize_message>
 8001d22:	4603      	mov	r3, r0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	78db      	ldrb	r3, [r3, #3]
 8001d3a:	2b09      	cmp	r3, #9
 8001d3c:	bf28      	it	cs
 8001d3e:	2309      	movcs	r3, #9
 8001d40:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001d42:	2209      	movs	r2, #9
 8001d44:	2100      	movs	r1, #0
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f007 feca 	bl	8009ae0 <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	330c      	adds	r3, #12
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f007 feef 	bl	8009b38 <memcpy>
#endif
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <mavlink_msg_zora_led_status_pack>:
 * @param LED_RED_STATUS  LED Green status
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_zora_led_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t LED_GREEN_STATUS, uint8_t LED_ORANGE_STATUS, uint8_t LED_RED_STATUS)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af02      	add	r7, sp, #8
 8001d68:	603a      	str	r2, [r7, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	460b      	mov	r3, r1
 8001d72:	71bb      	strb	r3, [r7, #6]
 8001d74:	4613      	mov	r3, r2
 8001d76:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 2, LED_RED_STATUS);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ZORA_LED_STATUS_LEN);
#else
    mavlink_zora_led_status_t packet;
    packet.LED_GREEN_STATUS = LED_GREEN_STATUS;
 8001d78:	797b      	ldrb	r3, [r7, #5]
 8001d7a:	733b      	strb	r3, [r7, #12]
    packet.LED_ORANGE_STATUS = LED_ORANGE_STATUS;
 8001d7c:	7e3b      	ldrb	r3, [r7, #24]
 8001d7e:	737b      	strb	r3, [r7, #13]
    packet.LED_RED_STATUS = LED_RED_STATUS;
 8001d80:	7f3b      	ldrb	r3, [r7, #28]
 8001d82:	73bb      	strb	r3, [r7, #14]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ZORA_LED_STATUS_LEN);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	330c      	adds	r3, #12
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	8819      	ldrh	r1, [r3, #0]
 8001d90:	789b      	ldrb	r3, [r3, #2]
 8001d92:	8011      	strh	r1, [r2, #0]
 8001d94:	7093      	strb	r3, [r2, #2]
#endif

    msg->msgid = MAVLINK_MSG_ID_ZORA_LED_STATUS;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f042 020a 	orr.w	r2, r2, #10
 8001d9e:	725a      	strb	r2, [r3, #9]
 8001da0:	2200      	movs	r2, #0
 8001da2:	729a      	strb	r2, [r3, #10]
 8001da4:	2200      	movs	r2, #0
 8001da6:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ZORA_LED_STATUS_MIN_LEN, MAVLINK_MSG_ID_ZORA_LED_STATUS_LEN, MAVLINK_MSG_ID_ZORA_LED_STATUS_CRC);
 8001da8:	79ba      	ldrb	r2, [r7, #6]
 8001daa:	79f9      	ldrb	r1, [r7, #7]
 8001dac:	2335      	movs	r3, #53	; 0x35
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2303      	movs	r3, #3
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2303      	movs	r3, #3
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	f7ff faaf 	bl	800131a <mavlink_finalize_message>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
    command_long->command = mavlink_msg_command_long_get_command(msg);
    command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
    command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
    command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_LONG_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_LONG_LEN;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	78db      	ldrb	r3, [r3, #3]
 8001dd4:	2b21      	cmp	r3, #33	; 0x21
 8001dd6:	bf28      	it	cs
 8001dd8:	2321      	movcs	r3, #33	; 0x21
 8001dda:	73fb      	strb	r3, [r7, #15]
        memset(command_long, 0, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 8001ddc:	2221      	movs	r2, #33	; 0x21
 8001dde:	2100      	movs	r1, #0
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f007 fe7d 	bl	8009ae0 <memset>
    memcpy(command_long, _MAV_PAYLOAD(msg), len);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	330c      	adds	r3, #12
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	4619      	mov	r1, r3
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f007 fea2 	bl	8009b38 <memcpy>
#endif
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <mavlink_msg_protocol_version_pack_chan>:
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_protocol_version_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t version,uint16_t min_version,uint16_t max_version,const uint8_t *spec_version_hash,const uint8_t *library_version_hash)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	71bb      	strb	r3, [r7, #6]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t_array(buf, 6, spec_version_hash, 8);
    _mav_put_uint8_t_array(buf, 14, library_version_hash, 8);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN);
#else
    mavlink_protocol_version_t packet;
    packet.version = version;
 8001e10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e12:	813b      	strh	r3, [r7, #8]
    packet.min_version = min_version;
 8001e14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e16:	817b      	strh	r3, [r7, #10]
    packet.max_version = max_version;
 8001e18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e1a:	81bb      	strh	r3, [r7, #12]
    mav_array_memcpy(packet.spec_version_hash, spec_version_hash, sizeof(uint8_t)*8);
 8001e1c:	f107 0308 	add.w	r3, r7, #8
 8001e20:	3306      	adds	r3, #6
 8001e22:	2208      	movs	r2, #8
 8001e24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff30 	bl	8001c8c <mav_array_memcpy>
    mav_array_memcpy(packet.library_version_hash, library_version_hash, sizeof(uint8_t)*8);
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	330e      	adds	r3, #14
 8001e32:	2208      	movs	r2, #8
 8001e34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff28 	bl	8001c8c <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	330c      	adds	r3, #12
 8001e40:	f107 0108 	add.w	r1, r7, #8
 8001e44:	2216      	movs	r2, #22
 8001e46:	4618      	mov	r0, r3
 8001e48:	f007 fe76 	bl	8009b38 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_PROTOCOL_VERSION;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
 8001e54:	725a      	strb	r2, [r3, #9]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	729a      	strb	r2, [r3, #10]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_PROTOCOL_VERSION_MIN_LEN, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN, MAVLINK_MSG_ID_PROTOCOL_VERSION_CRC);
 8001e62:	797b      	ldrb	r3, [r7, #5]
 8001e64:	79ba      	ldrb	r2, [r7, #6]
 8001e66:	79f9      	ldrb	r1, [r7, #7]
 8001e68:	20d9      	movs	r0, #217	; 0xd9
 8001e6a:	9002      	str	r0, [sp, #8]
 8001e6c:	2016      	movs	r0, #22
 8001e6e:	9001      	str	r0, [sp, #4]
 8001e70:	2016      	movs	r0, #22
 8001e72:	9000      	str	r0, [sp, #0]
 8001e74:	6838      	ldr	r0, [r7, #0]
 8001e76:	f7ff fa2c 	bl	80012d2 <mavlink_finalize_message_chan>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <mavlink_msg_protocol_version_decode>:
 *
 * @param msg The message to decode
 * @param protocol_version C-struct to decode the message contents into
 */
static inline void mavlink_msg_protocol_version_decode(const mavlink_message_t* msg, mavlink_protocol_version_t* protocol_version)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
    protocol_version->min_version = mavlink_msg_protocol_version_get_min_version(msg);
    protocol_version->max_version = mavlink_msg_protocol_version_get_max_version(msg);
    mavlink_msg_protocol_version_get_spec_version_hash(msg, protocol_version->spec_version_hash);
    mavlink_msg_protocol_version_get_library_version_hash(msg, protocol_version->library_version_hash);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN? msg->len : MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	78db      	ldrb	r3, [r3, #3]
 8001e92:	2b16      	cmp	r3, #22
 8001e94:	bf28      	it	cs
 8001e96:	2316      	movcs	r3, #22
 8001e98:	73fb      	strb	r3, [r7, #15]
        memset(protocol_version, 0, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN);
 8001e9a:	2216      	movs	r2, #22
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	6838      	ldr	r0, [r7, #0]
 8001ea0:	f007 fe1e 	bl	8009ae0 <memset>
    memcpy(protocol_version, _MAV_PAYLOAD(msg), len);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6838      	ldr	r0, [r7, #0]
 8001eae:	f007 fe43 	bl	8009b38 <memcpy>
#endif
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <MAVlinkWriteHearbeat>:

//-------------
// END - Mavlink helper function necessary workarounds and methods. ORDER MATTERS
//-------------

int MAVlinkWriteHearbeat(){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001ec2:	af04      	add	r7, sp, #16

    mavlink_message_t message;

    char buf[300];

    unsigned len = mavlink_msg_heartbeat_pack( MAVlinkSystemID,MAVlinkComponentID, &message,MAV_TYPE_ROCKET,MAV_AUTOPILOT_INVALID,MAV_MODE_FLAG_DECODE_POSITION_SAFETY, 0,MAV_STATE_STANDBY);
 8001ec4:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8001ec8:	2303      	movs	r3, #3
 8001eca:	9303      	str	r3, [sp, #12]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2309      	movs	r3, #9
 8001eda:	210c      	movs	r1, #12
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff feed 	bl	8001cbc <mavlink_msg_heartbeat_pack>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

    // Translate message to buffer
    len = mavlink_msg_to_send_buffer((uint8_t*)buf, &message);
 8001ee8:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8001eec:	463b      	mov	r3, r7
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fa40 	bl	8001376 <mavlink_msg_to_send_buffer>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

    // Write buffer to serial port, locks port while writing
    int bytesWritten = HAL_UART_Transmit_IT(&huart1,(uint8_t *)&buf,len);
 8001efc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	463b      	mov	r3, r7
 8001f04:	4619      	mov	r1, r3
 8001f06:	4806      	ldr	r0, [pc, #24]	; (8001f20 <MAVlinkWriteHearbeat+0x64>)
 8001f08:	f005 fc00 	bl	800770c <HAL_UART_Transmit_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

    return bytesWritten;
 8001f12:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200001f0 	.word	0x200001f0

08001f24 <MAVlinkWriteProtocolVersion>:

int MAVlinkWriteProtocolVersion(){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8001f2a:	af06      	add	r7, sp, #24

    mavlink_message_t message;

    char buf[300];
    const uint8_t testLibHash[8] = "ABCDASDF";
 8001f2c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001f30:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <MAVlinkWriteProtocolVersion+0x9c>)
 8001f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f3a:	e883 0003 	stmia.w	r3, {r0, r1}
    const uint8_t tesProstHash[8] = "PROTPROT";
 8001f3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001f42:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001f46:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <MAVlinkWriteProtocolVersion+0xa0>)
 8001f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f4c:	e883 0003 	stmia.w	r3, {r0, r1}

    unsigned len = mavlink_msg_protocol_version_pack_chan( MAVlinkSystemID,
 8001f50:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001f54:	f107 0308 	add.w	r3, r7, #8
 8001f58:	9304      	str	r3, [sp, #16]
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	9303      	str	r3, [sp, #12]
 8001f5e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001f62:	9302      	str	r3, [sp, #8]
 8001f64:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	2200      	movs	r2, #0
 8001f74:	210c      	movs	r1, #12
 8001f76:	2001      	movs	r0, #1
 8001f78:	f7ff ff40 	bl	8001dfc <mavlink_msg_protocol_version_pack_chan>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                                                           MAVLINK_MSG_ID_PROTOCOL_VERSION,
                                                           (uint8_t *)&tesProstHash,
                                                           (uint8_t *)&testLibHash);

    // Translate message to buffer
    len = mavlink_msg_to_send_buffer((uint8_t*)buf, &message);
 8001f82:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f9f2 	bl	8001376 <mavlink_msg_to_send_buffer>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264

    // Write buffer to serial port, locks port while writing
    int bytesWritten = HAL_UART_Transmit_IT(&huart1,(uint8_t *)&buf,len);
 8001f98:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4808      	ldr	r0, [pc, #32]	; (8001fc8 <MAVlinkWriteProtocolVersion+0xa4>)
 8001fa6:	f005 fbb1 	bl	800770c <HAL_UART_Transmit_IT>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    return bytesWritten;
 8001fb0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	08009b6c 	.word	0x08009b6c
 8001fc4:	08009b74 	.word	0x08009b74
 8001fc8:	200001f0 	.word	0x200001f0

08001fcc <MAVlinkWriteLEDstatus>:

bool MAVlinkWriteLEDstatus(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8001fd2:	af02      	add	r7, sp, #8

    GPIO_PinState G = HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001fd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd8:	4822      	ldr	r0, [pc, #136]	; (8002064 <MAVlinkWriteLEDstatus+0x98>)
 8001fda:	f003 f91f 	bl	800521c <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
    GPIO_PinState O = HAL_GPIO_ReadPin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8001fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe8:	481e      	ldr	r0, [pc, #120]	; (8002064 <MAVlinkWriteLEDstatus+0x98>)
 8001fea:	f003 f917 	bl	800521c <HAL_GPIO_ReadPin>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
    GPIO_PinState R = HAL_GPIO_ReadPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001ff4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff8:	481a      	ldr	r0, [pc, #104]	; (8002064 <MAVlinkWriteLEDstatus+0x98>)
 8001ffa:	f003 f90f 	bl	800521c <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
    mavlink_message_t message;

    char buf[300];

    // REMOVE THE TARGET SYSTEM!! THIS IS NOT A COMMAND
    mavlink_msg_zora_led_status_pack(MAVlinkSystemID,MAVlinkComponentID,&message, G,O,R);
 8002004:	f897 1257 	ldrb.w	r1, [r7, #599]	; 0x257
 8002008:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800200c:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	460b      	mov	r3, r1
 800201a:	210c      	movs	r1, #12
 800201c:	2001      	movs	r0, #1
 800201e:	f7ff fea0 	bl	8001d62 <mavlink_msg_zora_led_status_pack>

    // Translate message to buffer
    uint16_t len = mavlink_msg_to_send_buffer((uint8_t*)buf, &message);
 8002022:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8002026:	463b      	mov	r3, r7
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f9a3 	bl	8001376 <mavlink_msg_to_send_buffer>
 8002030:	4603      	mov	r3, r0
 8002032:	f8a7 3252 	strh.w	r3, [r7, #594]	; 0x252

    // Write buffer to serial port, locks port while writing
    uint16_t bytesWritten = HAL_UART_Transmit_IT(&huart1,(uint8_t *)&buf,len);
 8002036:	f8b7 2252 	ldrh.w	r2, [r7, #594]	; 0x252
 800203a:	463b      	mov	r3, r7
 800203c:	4619      	mov	r1, r3
 800203e:	480a      	ldr	r0, [pc, #40]	; (8002068 <MAVlinkWriteLEDstatus+0x9c>)
 8002040:	f005 fb64 	bl	800770c <HAL_UART_Transmit_IT>
 8002044:	4603      	mov	r3, r0
 8002046:	f8a7 3250 	strh.w	r3, [r7, #592]	; 0x250

    return (bool)bytesWritten;
 800204a:	f8b7 3250 	ldrh.w	r3, [r7, #592]	; 0x250
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3


}
 8002058:	4618      	mov	r0, r3
 800205a:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	48000800 	.word	0x48000800
 8002068:	200001f0 	.word	0x200001f0

0800206c <setLEDs>:

void setLEDs(bool green, bool orange, bool red){
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
 8002076:	460b      	mov	r3, r1
 8002078:	71bb      	strb	r3, [r7, #6]
 800207a:	4613      	mov	r3, r2
 800207c:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, green);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	461a      	mov	r2, r3
 8002082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002086:	480a      	ldr	r0, [pc, #40]	; (80020b0 <setLEDs+0x44>)
 8002088:	f003 f8e0 	bl	800524c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, orange);
 800208c:	79bb      	ldrb	r3, [r7, #6]
 800208e:	461a      	mov	r2, r3
 8002090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002094:	4806      	ldr	r0, [pc, #24]	; (80020b0 <setLEDs+0x44>)
 8002096:	f003 f8d9 	bl	800524c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, red);
 800209a:	797b      	ldrb	r3, [r7, #5]
 800209c:	461a      	mov	r2, r3
 800209e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a2:	4803      	ldr	r0, [pc, #12]	; (80020b0 <setLEDs+0x44>)
 80020a4:	f003 f8d2 	bl	800524c <HAL_GPIO_WritePin>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	48000800 	.word	0x48000800

080020b4 <MAVlinkSetLEDs>:

void MAVlinkSetLEDs(const mavlink_command_long_t * const command){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

    setLEDs((bool)command->param1, (bool)command->param2, (bool)command->param3);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2d8      	uxtb	r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80020d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2d9      	uxtb	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80020ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	f7ff ffb4 	bl	800206c <setLEDs>

}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <MAVLinkHandleLongCommands>:

bool MAVLinkHandleLongCommands(const mavlink_command_long_t * const command){
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    switch (command->command){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8b9b      	ldrh	r3, [r3, #28]
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	d01a      	beq.n	8002152 <MAVLinkHandleLongCommands+0x46>
 800211c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002120:	d11c      	bne.n	800215c <MAVLinkHandleLongCommands+0x50>

        //if the command request the system to send a message:
        case MAV_CMD_REQUEST_MESSAGE:
            uint16_t requestedMessageID = (uint16_t)command->param1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800212c:	ee17 3a90 	vmov	r3, s15
 8002130:	81fb      	strh	r3, [r7, #14]

            switch (requestedMessageID) {
 8002132:	89fb      	ldrh	r3, [r7, #14]
 8002134:	2b0a      	cmp	r3, #10
 8002136:	d006      	beq.n	8002146 <MAVLinkHandleLongCommands+0x3a>
 8002138:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800213c:	d107      	bne.n	800214e <MAVLinkHandleLongCommands+0x42>
                case MAVLINK_MSG_ID_PROTOCOL_VERSION:
                    MAVlinkWriteProtocolVersion();
 800213e:	f7ff fef1 	bl	8001f24 <MAVlinkWriteProtocolVersion>
                    return true;
 8002142:	2301      	movs	r3, #1
 8002144:	e00b      	b.n	800215e <MAVLinkHandleLongCommands+0x52>

                case MAVLINK_MSG_ID_ZORA_LED_STATUS:
                    MAVlinkWriteLEDstatus();
 8002146:	f7ff ff41 	bl	8001fcc <MAVlinkWriteLEDstatus>
                    return true;
 800214a:	2301      	movs	r3, #1
 800214c:	e007      	b.n	800215e <MAVLinkHandleLongCommands+0x52>

                default:
                    return false;
 800214e:	2300      	movs	r3, #0
 8002150:	e005      	b.n	800215e <MAVLinkHandleLongCommands+0x52>

            }
            break;

        case MAV_CMD_SET_LEDS:
            MAVlinkSetLEDs(command); return true;
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffae 	bl	80020b4 <MAVlinkSetLEDs>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <MAVLinkHandleLongCommands+0x52>

        default:
            return false;
 800215c:	2300      	movs	r3, #0
            break;
    }
    return false;
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <MAVLinkHandleReceivedMessage>:

bool MAVLinkHandleReceivedMessage(mavlink_message_t * message, mavlink_status_t * messageStatus){
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b09e      	sub	sp, #120	; 0x78
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
    switch (message->msgid) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7a5a      	ldrb	r2, [r3, #9]
 8002176:	7a99      	ldrb	r1, [r3, #10]
 8002178:	0209      	lsls	r1, r1, #8
 800217a:	430a      	orrs	r2, r1
 800217c:	7adb      	ldrb	r3, [r3, #11]
 800217e:	041b      	lsls	r3, r3, #16
 8002180:	4313      	orrs	r3, r2
 8002182:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002186:	d014      	beq.n	80021b2 <MAVLinkHandleReceivedMessage+0x4a>
 8002188:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800218c:	dc3a      	bgt.n	8002204 <MAVLinkHandleReceivedMessage+0x9c>
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <MAVLinkHandleReceivedMessage+0x30>
 8002192:	2b4c      	cmp	r3, #76	; 0x4c
 8002194:	d01a      	beq.n	80021cc <MAVLinkHandleReceivedMessage+0x64>
 8002196:	e035      	b.n	8002204 <MAVLinkHandleReceivedMessage+0x9c>
        case MAVLINK_MSG_ID_HEARTBEAT:
            HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002198:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800219c:	481c      	ldr	r0, [pc, #112]	; (8002210 <MAVLinkHandleReceivedMessage+0xa8>)
 800219e:	f003 f86d 	bl	800527c <HAL_GPIO_TogglePin>
            mavlink_heartbeat_t hb;
            mavlink_msg_heartbeat_decode(message,&hb);
 80021a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fdbf 	bl	8001d2c <mavlink_msg_heartbeat_decode>
            return true;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e029      	b.n	8002206 <MAVLinkHandleReceivedMessage+0x9e>

        case MAVLINK_MSG_ID_PROTOCOL_VERSION:
            HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80021b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021b6:	4816      	ldr	r0, [pc, #88]	; (8002210 <MAVLinkHandleReceivedMessage+0xa8>)
 80021b8:	f003 f860 	bl	800527c <HAL_GPIO_TogglePin>
            mavlink_protocol_version_t protocol;
            mavlink_msg_protocol_version_decode(message, &protocol);
 80021bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fe5e 	bl	8001e84 <mavlink_msg_protocol_version_decode>
            return true;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e01c      	b.n	8002206 <MAVLinkHandleReceivedMessage+0x9e>

            //receive message of type Command
        case MAVLINK_MSG_ID_COMMAND_LONG:
            HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80021cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d0:	480f      	ldr	r0, [pc, #60]	; (8002210 <MAVLinkHandleReceivedMessage+0xa8>)
 80021d2:	f003 f853 	bl	800527c <HAL_GPIO_TogglePin>
            mavlink_command_long_t _command;
            mavlink_msg_command_long_decode(message, &_command);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fdf2 	bl	8001dc6 <mavlink_msg_command_long_decode>
            const mavlink_command_long_t command = _command; //convert it to a const data variable to prevent change later
 80021e2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80021e6:	f107 050c 	add.w	r5, r7, #12
 80021ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f2:	682b      	ldr	r3, [r5, #0]
 80021f4:	6023      	str	r3, [r4, #0]


            //parse the command
            return MAVLinkHandleLongCommands(&command);
 80021f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff86 	bl	800210c <MAVLinkHandleLongCommands>
 8002200:	4603      	mov	r3, r0
 8002202:	e000      	b.n	8002206 <MAVLinkHandleReceivedMessage+0x9e>
            break;

        default:
            return false;
 8002204:	2300      	movs	r3, #0
    }

    return false;
}
 8002206:	4618      	mov	r0, r3
 8002208:	3778      	adds	r7, #120	; 0x78
 800220a:	46bd      	mov	sp, r7
 800220c:	bdb0      	pop	{r4, r5, r7, pc}
 800220e:	bf00      	nop
 8002210:	48000800 	.word	0x48000800

08002214 <MAVLinkParseBuffer>:

void MAVLinkParseBuffer(const uint8_t * receivedBuffer){
 8002214:	b580      	push	{r7, lr}
 8002216:	b0d2      	sub	sp, #328	; 0x148
 8002218:	af00      	add	r7, sp, #0
 800221a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800221e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002222:	6018      	str	r0, [r3, #0]
    mavlink_message_t message;
    mavlink_status_t messageStatus;

    //figure out what to do when the mavlink parses the buffer before it should end??
    for(uint16_t i = 0; i < UART_RX_Received_NextFreeByteIndex;i++){
 8002224:	2300      	movs	r3, #0
 8002226:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800222a:	e026      	b.n	800227a <MAVLinkParseBuffer+0x66>
        const uint8_t byte = receivedBuffer[i];
 800222c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8002230:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002234:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	4413      	add	r3, r2
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

        //parse the data until its the message is decoded/refused
        if(mavlink_parse_char(MAVLINK_USART1_CHANNEL_NUM,byte,&message,&messageStatus)){
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	f107 0220 	add.w	r2, r7, #32
 800224a:	f897 1145 	ldrb.w	r1, [r7, #325]	; 0x145
 800224e:	2000      	movs	r0, #0
 8002250:	f7ff fcdf 	bl	8001c12 <mavlink_parse_char>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <MAVLinkParseBuffer+0x5c>
            const bool parse = MAVLinkHandleReceivedMessage(&message,&messageStatus);
 800225a:	f107 0208 	add.w	r2, r7, #8
 800225e:	f107 0320 	add.w	r3, r7, #32
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff7f 	bl	8002168 <MAVLinkHandleReceivedMessage>
 800226a:	4603      	mov	r3, r0
 800226c:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
    for(uint16_t i = 0; i < UART_RX_Received_NextFreeByteIndex;i++){
 8002270:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8002274:	3301      	adds	r3, #1
 8002276:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MAVLinkParseBuffer+0x80>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8002284:	429a      	cmp	r2, r3
 8002286:	d3d1      	bcc.n	800222c <MAVLinkParseBuffer+0x18>
        }
    }

}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200004b4 	.word	0x200004b4

08002298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800229e:	f000 fe0e 	bl	8002ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a2:	f000 f84f 	bl	8002344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022a6:	f000 facb 	bl	8002840 <MX_GPIO_Init>
  MX_DMA_Init();
 80022aa:	f000 fa9f 	bl	80027ec <MX_DMA_Init>
  MX_ADC1_Init();
 80022ae:	f000 f893 	bl	80023d8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80022b2:	f000 f97f 	bl	80025b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80022b6:	f000 f9ff 	bl	80026b8 <MX_TIM4_Init>
  MX_FDCAN2_Init();
 80022ba:	f000 f935 	bl	8002528 <MX_FDCAN2_Init>
  MX_USART1_UART_Init();
 80022be:	f000 fa49 	bl	8002754 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//SysTick->LOAD = (SystemCoreClock / 1000) - 1; //value which will be reloaded after countdown
	//SysTick->VAL = 0x0;
	//SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; //enable clock source to systick, enable systick interrupt, enable systick

  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0U);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022ca:	f002 f80c 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
 80022ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d2:	f002 f822 	bl	800431a <HAL_NVIC_EnableIRQ>

  HAL_UART_Receive_IT(&huart1,(uint8_t *)&UART_RX_Byte,1);
 80022d6:	2201      	movs	r2, #1
 80022d8:	4915      	ldr	r1, [pc, #84]	; (8002330 <main+0x98>)
 80022da:	4816      	ldr	r0, [pc, #88]	; (8002334 <main+0x9c>)
 80022dc:	f005 fabe 	bl	800785c <HAL_UART_Receive_IT>
  // __HAL_UART_ENABLE_IT(&huart1,UART_FLAG_IDLE); //enable IDLE line interrupt for the logic to work
  USART1->CR1 |= USART_CR1_IDLEIE; // //enable IDLE line interrupt for the logic to work
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <main+0xa0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <main+0xa0>)
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	6013      	str	r3, [r2, #0]

  //does not owrk??
  //USART1->ICR |= USART_ICR_IDLECF; //clear the interrupt flag (so that we wont get interrupt instantly. next interrupt will occur only after RX buffer is not empty, eg on received data
  //RESET LEDS
  setLEDs(1, 1, 1);
 80022ec:	2201      	movs	r2, #1
 80022ee:	2101      	movs	r1, #1
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7ff febb 	bl	800206c <setLEDs>

  uint32_t lastTick = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      uint32_t tick = HAL_GetTick();
 80022fa:	f000 fe45 	bl	8002f88 <HAL_GetTick>
 80022fe:	6038      	str	r0, [r7, #0]

      //send Heartbeat every second
      if(tick > (lastTick + 1000)){
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d905      	bls.n	8002318 <main+0x80>
          MAVlinkWriteHearbeat();
 800230c:	f7ff fdd6 	bl	8001ebc <MAVlinkWriteHearbeat>
    	  MAVlinkWriteLEDstatus();
 8002310:	f7ff fe5c 	bl	8001fcc <MAVlinkWriteLEDstatus>
          lastTick = tick;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	607b      	str	r3, [r7, #4]
      }

      //wait for incoming data
      if(FLAG_UART_line_IDLE){
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <main+0xa4>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0eb      	beq.n	80022fa <main+0x62>
          MAVLinkParseBuffer((uint8_t *)UART_RX_Received_Message);
 8002322:	4807      	ldr	r0, [pc, #28]	; (8002340 <main+0xa8>)
 8002324:	f7ff ff76 	bl	8002214 <MAVLinkParseBuffer>
          FLAG_UART_line_IDLE = false;
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <main+0xa4>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
  {
 800232e:	e7e4      	b.n	80022fa <main+0x62>
 8002330:	200004b7 	.word	0x200004b7
 8002334:	200001f0 	.word	0x200001f0
 8002338:	40013800 	.word	0x40013800
 800233c:	200004b6 	.word	0x200004b6
 8002340:	2000039c 	.word	0x2000039c

08002344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b094      	sub	sp, #80	; 0x50
 8002348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234a:	f107 0318 	add.w	r3, r7, #24
 800234e:	2238      	movs	r2, #56	; 0x38
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f007 fbc4 	bl	8009ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002366:	2000      	movs	r0, #0
 8002368:	f002 ffa2 	bl	80052b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800236c:	2301      	movs	r3, #1
 800236e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002374:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002376:	2302      	movs	r3, #2
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800237a:	2303      	movs	r3, #3
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800237e:	2301      	movs	r3, #1
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002382:	2328      	movs	r3, #40	; 0x28
 8002384:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002386:	2302      	movs	r3, #2
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800238a:	2302      	movs	r3, #2
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800238e:	2302      	movs	r3, #2
 8002390:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002392:	f107 0318 	add.w	r3, r7, #24
 8002396:	4618      	mov	r0, r3
 8002398:	f003 f83e 	bl	8005418 <HAL_RCC_OscConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80023a2:	f000 fad9 	bl	8002958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a6:	230f      	movs	r3, #15
 80023a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023aa:	2303      	movs	r3, #3
 80023ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2104      	movs	r1, #4
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fb42 	bl	8005a48 <HAL_RCC_ClockConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80023ca:	f000 fac5 	bl	8002958 <Error_Handler>
  }
}
 80023ce:	bf00      	nop
 80023d0:	3750      	adds	r7, #80	; 0x50
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2220      	movs	r2, #32
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f007 fb75 	bl	8009ae0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <MX_ADC1_Init+0x13c>)
 80023f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023fe:	4b45      	ldr	r3, [pc, #276]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002400:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002404:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002406:	4b43      	ldr	r3, [pc, #268]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800240c:	4b41      	ldr	r3, [pc, #260]	; (8002514 <MX_ADC1_Init+0x13c>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002412:	4b40      	ldr	r3, [pc, #256]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002418:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <MX_ADC1_Init+0x13c>)
 800241a:	2201      	movs	r2, #1
 800241c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002420:	2204      	movs	r2, #4
 8002422:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002424:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002426:	2200      	movs	r2, #0
 8002428:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800242a:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <MX_ADC1_Init+0x13c>)
 800242c:	2200      	movs	r2, #0
 800242e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8002430:	4b38      	ldr	r3, [pc, #224]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002432:	2204      	movs	r2, #4
 8002434:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002436:	4b37      	ldr	r3, [pc, #220]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800243e:	4b35      	ldr	r3, [pc, #212]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002440:	2200      	movs	r2, #0
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002446:	2200      	movs	r2, #0
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800244a:	4b32      	ldr	r3, [pc, #200]	; (8002514 <MX_ADC1_Init+0x13c>)
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002454:	2200      	movs	r2, #0
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <MX_ADC1_Init+0x13c>)
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002460:	482c      	ldr	r0, [pc, #176]	; (8002514 <MX_ADC1_Init+0x13c>)
 8002462:	f000 ff77 	bl	8003354 <HAL_ADC_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800246c:	f000 fa74 	bl	8002958 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	4826      	ldr	r0, [pc, #152]	; (8002514 <MX_ADC1_Init+0x13c>)
 800247c:	f001 fd70 	bl	8003f60 <HAL_ADCEx_MultiModeConfigChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002486:	f000 fa67 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <MX_ADC1_Init+0x140>)
 800248c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800248e:	2306      	movs	r3, #6
 8002490:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002496:	237f      	movs	r3, #127	; 0x7f
 8002498:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800249a:	2304      	movs	r3, #4
 800249c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	4619      	mov	r1, r3
 80024a6:	481b      	ldr	r0, [pc, #108]	; (8002514 <MX_ADC1_Init+0x13c>)
 80024a8:	f001 f908 	bl	80036bc <HAL_ADC_ConfigChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80024b2:	f000 fa51 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <MX_ADC1_Init+0x144>)
 80024b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024ba:	230c      	movs	r3, #12
 80024bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4814      	ldr	r0, [pc, #80]	; (8002514 <MX_ADC1_Init+0x13c>)
 80024c4:	f001 f8fa 	bl	80036bc <HAL_ADC_ConfigChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80024ce:	f000 fa43 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <MX_ADC1_Init+0x148>)
 80024d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80024d6:	2312      	movs	r3, #18
 80024d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	480d      	ldr	r0, [pc, #52]	; (8002514 <MX_ADC1_Init+0x13c>)
 80024e0:	f001 f8ec 	bl	80036bc <HAL_ADC_ConfigChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80024ea:	f000 fa35 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <MX_ADC1_Init+0x14c>)
 80024f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80024f2:	2318      	movs	r3, #24
 80024f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	4619      	mov	r1, r3
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <MX_ADC1_Init+0x13c>)
 80024fc:	f001 f8de 	bl	80036bc <HAL_ADC_ConfigChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8002506:	f000 fa27 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800250a:	bf00      	nop
 800250c:	3730      	adds	r7, #48	; 0x30
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000028 	.word	0x20000028
 8002518:	32601000 	.word	0x32601000
 800251c:	2e300800 	.word	0x2e300800
 8002520:	3ac04000 	.word	0x3ac04000
 8002524:	3ef08000 	.word	0x3ef08000

08002528 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <MX_FDCAN2_Init+0x84>)
 800252e:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <MX_FDCAN2_Init+0x88>)
 8002530:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002534:	2200      	movs	r2, #0
 8002536:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <MX_FDCAN2_Init+0x84>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002540:	2200      	movs	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002546:	2200      	movs	r2, #0
 8002548:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <MX_FDCAN2_Init+0x84>)
 800254c:	2200      	movs	r2, #0
 800254e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002552:	2200      	movs	r2, #0
 8002554:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 160;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002558:	22a0      	movs	r2, #160	; 0xa0
 800255a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <MX_FDCAN2_Init+0x84>)
 800255e:	2201      	movs	r2, #1
 8002560:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 5;
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002564:	2205      	movs	r2, #5
 8002566:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <MX_FDCAN2_Init+0x84>)
 800256a:	2202      	movs	r2, #2
 800256c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002570:	2201      	movs	r2, #1
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002576:	2201      	movs	r2, #1
 8002578:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <MX_FDCAN2_Init+0x84>)
 800257c:	2201      	movs	r2, #1
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002582:	2201      	movs	r2, #1
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 3;
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002588:	2203      	movs	r2, #3
 800258a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <MX_FDCAN2_Init+0x84>)
 800258e:	2200      	movs	r2, #0
 8002590:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_FDCAN2_Init+0x84>)
 8002594:	2200      	movs	r2, #0
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <MX_FDCAN2_Init+0x84>)
 800259a:	f002 f953 	bl	8004844 <HAL_FDCAN_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80025a4:	f000 f9d8 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200000f4 	.word	0x200000f4
 80025b0:	40006800 	.word	0x40006800

080025b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08e      	sub	sp, #56	; 0x38
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]
 80025e2:	615a      	str	r2, [r3, #20]
 80025e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025e6:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <MX_TIM3_Init+0xfc>)
 80025e8:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <MX_TIM3_Init+0x100>)
 80025ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <MX_TIM3_Init+0xfc>)
 80025ee:	2207      	movs	r2, #7
 80025f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <MX_TIM3_Init+0xfc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80025f8:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <MX_TIM3_Init+0xfc>)
 80025fa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80025fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <MX_TIM3_Init+0xfc>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <MX_TIM3_Init+0xfc>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800260c:	4828      	ldr	r0, [pc, #160]	; (80026b0 <MX_TIM3_Init+0xfc>)
 800260e:	f003 fe73 	bl	80062f8 <HAL_TIM_Base_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002618:	f000 f99e 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002626:	4619      	mov	r1, r3
 8002628:	4821      	ldr	r0, [pc, #132]	; (80026b0 <MX_TIM3_Init+0xfc>)
 800262a:	f004 f9b1 	bl	8006990 <HAL_TIM_ConfigClockSource>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002634:	f000 f990 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002638:	481d      	ldr	r0, [pc, #116]	; (80026b0 <MX_TIM3_Init+0xfc>)
 800263a:	f003 feb4 	bl	80063a6 <HAL_TIM_PWM_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002644:	f000 f988 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	4619      	mov	r1, r3
 8002656:	4816      	ldr	r0, [pc, #88]	; (80026b0 <MX_TIM3_Init+0xfc>)
 8002658:	f004 ff34 	bl	80074c4 <HAL_TIMEx_MasterConfigSynchronization>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002662:	f000 f979 	bl	8002958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002666:	2360      	movs	r3, #96	; 0x60
 8002668:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002676:	463b      	mov	r3, r7
 8002678:	2200      	movs	r2, #0
 800267a:	4619      	mov	r1, r3
 800267c:	480c      	ldr	r0, [pc, #48]	; (80026b0 <MX_TIM3_Init+0xfc>)
 800267e:	f004 f873 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002688:	f000 f966 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800268c:	463b      	mov	r3, r7
 800268e:	2204      	movs	r2, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4807      	ldr	r0, [pc, #28]	; (80026b0 <MX_TIM3_Init+0xfc>)
 8002694:	f004 f868 	bl	8006768 <HAL_TIM_PWM_ConfigChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800269e:	f000 f95b 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026a2:	4803      	ldr	r0, [pc, #12]	; (80026b0 <MX_TIM3_Init+0xfc>)
 80026a4:	f000 faaa 	bl	8002bfc <HAL_TIM_MspPostInit>

}
 80026a8:	bf00      	nop
 80026aa:	3738      	adds	r7, #56	; 0x38
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000158 	.word	0x20000158
 80026b4:	40000400 	.word	0x40000400

080026b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <MX_TIM4_Init+0x94>)
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <MX_TIM4_Init+0x98>)
 80026da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <MX_TIM4_Init+0x94>)
 80026de:	229f      	movs	r2, #159	; 0x9f
 80026e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MX_TIM4_Init+0x94>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <MX_TIM4_Init+0x94>)
 80026ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <MX_TIM4_Init+0x94>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <MX_TIM4_Init+0x94>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026fc:	4813      	ldr	r0, [pc, #76]	; (800274c <MX_TIM4_Init+0x94>)
 80026fe:	f003 fdfb 	bl	80062f8 <HAL_TIM_Base_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002708:	f000 f926 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800270c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002710:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	4619      	mov	r1, r3
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <MX_TIM4_Init+0x94>)
 800271a:	f004 f939 	bl	8006990 <HAL_TIM_ConfigClockSource>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002724:	f000 f918 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	4619      	mov	r1, r3
 8002734:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_TIM4_Init+0x94>)
 8002736:	f004 fec5 	bl	80074c4 <HAL_TIMEx_MasterConfigSynchronization>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002740:	f000 f90a 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200001a4 	.word	0x200001a4
 8002750:	40000800 	.word	0x40000800

08002754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 800275a:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <MX_USART1_UART_Init+0x94>)
 800275c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 8002760:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002766:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002778:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 800277a:	220c      	movs	r2, #12
 800277c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800278a:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 8002792:	2200      	movs	r2, #0
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 8002798:	2200      	movs	r2, #0
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800279c:	4811      	ldr	r0, [pc, #68]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 800279e:	f004 ff65 	bl	800766c <HAL_UART_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027a8:	f000 f8d6 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ac:	2100      	movs	r1, #0
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 80027b0:	f007 f8bb 	bl	800992a <HAL_UARTEx_SetTxFifoThreshold>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027ba:	f000 f8cd 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027be:	2100      	movs	r1, #0
 80027c0:	4808      	ldr	r0, [pc, #32]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 80027c2:	f007 f8f0 	bl	80099a6 <HAL_UARTEx_SetRxFifoThreshold>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027cc:	f000 f8c4 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027d0:	4804      	ldr	r0, [pc, #16]	; (80027e4 <MX_USART1_UART_Init+0x90>)
 80027d2:	f007 f871 	bl	80098b8 <HAL_UARTEx_DisableFifoMode>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027dc:	f000 f8bc 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200001f0 	.word	0x200001f0
 80027e8:	40013800 	.word	0x40013800

080027ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <MX_DMA_Init+0x50>)
 80027f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <MX_DMA_Init+0x50>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6493      	str	r3, [r2, #72]	; 0x48
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <MX_DMA_Init+0x50>)
 8002800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MX_DMA_Init+0x50>)
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <MX_DMA_Init+0x50>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6493      	str	r3, [r2, #72]	; 0x48
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <MX_DMA_Init+0x50>)
 8002818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	200b      	movs	r0, #11
 8002828:	f001 fd5d 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800282c:	200b      	movs	r0, #11
 800282e:	f001 fd74 	bl	800431a <HAL_NVIC_EnableIRQ>

}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002856:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <MX_GPIO_Init+0xc4>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <MX_GPIO_Init+0xc4>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <MX_GPIO_Init+0xc4>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <MX_GPIO_Init+0xc4>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	4a24      	ldr	r2, [pc, #144]	; (8002904 <MX_GPIO_Init+0xc4>)
 8002874:	f043 0320 	orr.w	r3, r3, #32
 8002878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <MX_GPIO_Init+0xc4>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <MX_GPIO_Init+0xc4>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a1e      	ldr	r2, [pc, #120]	; (8002904 <MX_GPIO_Init+0xc4>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <MX_GPIO_Init+0xc4>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <MX_GPIO_Init+0xc4>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	4a18      	ldr	r2, [pc, #96]	; (8002904 <MX_GPIO_Init+0xc4>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_GPIO_Init+0xc4>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ORANGE_Pin|LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80028b6:	2200      	movs	r2, #0
 80028b8:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80028bc:	4812      	ldr	r0, [pc, #72]	; (8002908 <MX_GPIO_Init+0xc8>)
 80028be:	f002 fcc5 	bl	800524c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_ORANGE_Pin LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_ORANGE_Pin|LED_RED_Pin|LED_GREEN_Pin;
 80028c2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80028c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c8:	2301      	movs	r3, #1
 80028ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	480b      	ldr	r0, [pc, #44]	; (8002908 <MX_GPIO_Init+0xc8>)
 80028dc:	f002 fb1c 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	4619      	mov	r1, r3
 80028f4:	4804      	ldr	r0, [pc, #16]	; (8002908 <MX_GPIO_Init+0xc8>)
 80028f6:	f002 fb0f 	bl	8004f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028fa:	bf00      	nop
 80028fc:	3728      	adds	r7, #40	; 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	48000800 	.word	0x48000800

0800290c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


//when the uart finishes recieving all data = one byte
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

    //set the recived byte to the buffer and increase the index
    UART_RX_Buffer[UART_RX_Buffer_NextFreeByteIndex] = UART_RX_Byte;
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_UART_RxCpltCallback+0x3c>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_UART_RxCpltCallback+0x40>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b2d9      	uxtb	r1, r3
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_UART_RxCpltCallback+0x44>)
 8002924:	5499      	strb	r1, [r3, r2]
    UART_RX_Buffer_NextFreeByteIndex++;
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_UART_RxCpltCallback+0x3c>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_UART_RxCpltCallback+0x3c>)
 8002932:	801a      	strh	r2, [r3, #0]

    //restart interrupt
    HAL_UART_Receive_IT(&huart1,(uint8_t *)&UART_RX_Byte,1);
 8002934:	2201      	movs	r2, #1
 8002936:	4905      	ldr	r1, [pc, #20]	; (800294c <HAL_UART_RxCpltCallback+0x40>)
 8002938:	4806      	ldr	r0, [pc, #24]	; (8002954 <HAL_UART_RxCpltCallback+0x48>)
 800293a:	f004 ff8f 	bl	800785c <HAL_UART_Receive_IT>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000398 	.word	0x20000398
 800294c:	200004b7 	.word	0x200004b7
 8002950:	20000280 	.word	0x20000280
 8002954:	200001f0 	.word	0x200001f0

08002958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002960:	e7fe      	b.n	8002960 <Error_Handler+0x8>
	...

08002964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_MspInit+0x44>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_MspInit+0x44>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6613      	str	r3, [r2, #96]	; 0x60
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_MspInit+0x44>)
 8002978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_MspInit+0x44>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <HAL_MspInit+0x44>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	6593      	str	r3, [r2, #88]	; 0x58
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_MspInit+0x44>)
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800299a:	f002 fd2d 	bl	80053f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b09e      	sub	sp, #120	; 0x78
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2250      	movs	r2, #80	; 0x50
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f007 f887 	bl	8009ae0 <memset>
  if(hadc->Instance==ADC1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029da:	d15f      	bne.n	8002a9c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80029dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80029e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80029e6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fa47 	bl	8005e80 <HAL_RCCEx_PeriphCLKConfig>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80029f8:	f7ff ffae 	bl	8002958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_ADC_MspInit+0xf8>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a00:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <HAL_ADC_MspInit+0xf8>)
 8002a02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a08:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_ADC_MspInit+0xf8>)
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a14:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_ADC_MspInit+0xf8>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <HAL_ADC_MspInit+0xf8>)
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a20:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_ADC_MspInit+0xf8>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002a2c:	f641 0303 	movw	r3, #6147	; 0x1803
 8002a30:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a32:	2303      	movs	r3, #3
 8002a34:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4819      	ldr	r0, [pc, #100]	; (8002aa8 <HAL_ADC_MspInit+0xfc>)
 8002a42:	f002 fa69 	bl	8004f18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_ADC_MspInit+0x104>)
 8002a4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a4e:	2205      	movs	r2, #5
 8002a50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a72:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a76:	2220      	movs	r2, #32
 8002a78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a80:	480a      	ldr	r0, [pc, #40]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a82:	f001 fc65 	bl	8004350 <HAL_DMA_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002a8c:	f7ff ff64 	bl	8002958 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a06      	ldr	r2, [pc, #24]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <HAL_ADC_MspInit+0x100>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3778      	adds	r7, #120	; 0x78
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	48000400 	.word	0x48000400
 8002aac:	20000094 	.word	0x20000094
 8002ab0:	40020008 	.word	0x40020008

08002ab4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b09e      	sub	sp, #120	; 0x78
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2250      	movs	r2, #80	; 0x50
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f007 f803 	bl	8009ae0 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a23      	ldr	r2, [pc, #140]	; (8002b6c <HAL_FDCAN_MspInit+0xb8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d13f      	bne.n	8002b64 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 f9c3 	bl	8005e80 <HAL_RCCEx_PeriphCLKConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002b00:	f7ff ff2a 	bl	8002958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_FDCAN_MspInit+0xbc>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_FDCAN_MspInit+0xbc>)
 8002b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <HAL_FDCAN_MspInit+0xbc>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_FDCAN_MspInit+0xbc>)
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <HAL_FDCAN_MspInit+0xbc>)
 8002b22:	f043 0302 	orr.w	r3, r3, #2
 8002b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_FDCAN_MspInit+0xbc>)
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b34:	2360      	movs	r3, #96	; 0x60
 8002b36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b40:	2300      	movs	r3, #0
 8002b42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002b44:	2309      	movs	r3, #9
 8002b46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4809      	ldr	r0, [pc, #36]	; (8002b74 <HAL_FDCAN_MspInit+0xc0>)
 8002b50:	f002 f9e2 	bl	8004f18 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2100      	movs	r1, #0
 8002b58:	2056      	movs	r0, #86	; 0x56
 8002b5a:	f001 fbc4 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002b5e:	2056      	movs	r0, #86	; 0x56
 8002b60:	f001 fbdb 	bl	800431a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002b64:	bf00      	nop
 8002b66:	3778      	adds	r7, #120	; 0x78
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40006800 	.word	0x40006800
 8002b70:	40021000 	.word	0x40021000
 8002b74:	48000400 	.word	0x48000400

08002b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <HAL_TIM_Base_MspInit+0x78>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d114      	bne.n	8002bb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6593      	str	r3, [r2, #88]	; 0x58
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	201d      	movs	r0, #29
 8002ba8:	f001 fb9d 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bac:	201d      	movs	r0, #29
 8002bae:	f001 fbb4 	bl	800431a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bb2:	e018      	b.n	8002be6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <HAL_TIM_Base_MspInit+0x80>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d113      	bne.n	8002be6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_TIM_Base_MspInit+0x7c>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	201e      	movs	r0, #30
 8002bdc:	f001 fb83 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002be0:	201e      	movs	r0, #30
 8002be2:	f001 fb9a 	bl	800431a <HAL_NVIC_EnableIRQ>
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40000800 	.word	0x40000800

08002bfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 030c 	add.w	r3, r7, #12
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <HAL_TIM_MspPostInit+0x64>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d11b      	bne.n	8002c56 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_TIM_MspPostInit+0x68>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HAL_TIM_MspPostInit+0x68>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_TIM_MspPostInit+0x68>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c36:	23c0      	movs	r3, #192	; 0xc0
 8002c38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c46:	2302      	movs	r3, #2
 8002c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4a:	f107 030c 	add.w	r3, r7, #12
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4805      	ldr	r0, [pc, #20]	; (8002c68 <HAL_TIM_MspPostInit+0x6c>)
 8002c52:	f002 f961 	bl	8004f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c56:	bf00      	nop
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40021000 	.word	0x40021000
 8002c68:	48000800 	.word	0x48000800

08002c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b09e      	sub	sp, #120	; 0x78
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	2250      	movs	r2, #80	; 0x50
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f006 ff27 	bl	8009ae0 <memset>
  if(huart->Instance==USART1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <HAL_UART_MspInit+0xb4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d13d      	bne.n	8002d18 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 f8e9 	bl	8005e80 <HAL_RCCEx_PeriphCLKConfig>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002cb4:	f7ff fe50 	bl	8002958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <HAL_UART_MspInit+0xb8>)
 8002cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_UART_MspInit+0xb8>)
 8002cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc2:	6613      	str	r3, [r2, #96]	; 0x60
 8002cc4:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_UART_MspInit+0xb8>)
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_UART_MspInit+0xb8>)
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <HAL_UART_MspInit+0xb8>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_UART_MspInit+0xb8>)
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ce8:	2330      	movs	r3, #48	; 0x30
 8002cea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d00:	4619      	mov	r1, r3
 8002d02:	4809      	ldr	r0, [pc, #36]	; (8002d28 <HAL_UART_MspInit+0xbc>)
 8002d04:	f002 f908 	bl	8004f18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	2025      	movs	r0, #37	; 0x25
 8002d0e:	f001 faea 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d12:	2025      	movs	r0, #37	; 0x25
 8002d14:	f001 fb01 	bl	800431a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3778      	adds	r7, #120	; 0x78
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40021000 	.word	0x40021000
 8002d28:	48000800 	.word	0x48000800

08002d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d30:	e7fe      	b.n	8002d30 <NMI_Handler+0x4>

08002d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d36:	e7fe      	b.n	8002d36 <HardFault_Handler+0x4>

08002d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <MemManage_Handler+0x4>

08002d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <BusFault_Handler+0x4>

08002d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <UsageFault_Handler+0x4>

08002d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d78:	f000 f8f4 	bl	8002f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <DMA1_Channel1_IRQHandler+0x10>)
 8002d86:	f001 fc4b 	bl	8004620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000094 	.word	0x20000094

08002d94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <TIM3_IRQHandler+0x10>)
 8002d9a:	f003 fb65 	bl	8006468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000158 	.word	0x20000158

08002da8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <TIM4_IRQHandler+0x10>)
 8002dae:	f003 fb5b 	bl	8006468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200001a4 	.word	0x200001a4

08002dbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

    //wait fro the line to go idle
    if(USART1->ISR & UART_FLAG_IDLE){
 8002dc0:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <USART1_IRQHandler+0x5c>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <USART1_IRQHandler+0x52>
        USART1->ICR |= USART_ICR_IDLECF; //clear the interrupt flag
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <USART1_IRQHandler+0x5c>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a11      	ldr	r2, [pc, #68]	; (8002e18 <USART1_IRQHandler+0x5c>)
 8002dd2:	f043 0310 	orr.w	r3, r3, #16
 8002dd6:	6213      	str	r3, [r2, #32]

        //signalize that the received data can be processed
        FLAG_UART_line_IDLE = 1;
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <USART1_IRQHandler+0x60>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]

        //copy the data from the buffer to the parsing buffer
        memcpy((uint8_t *)&UART_RX_Received_Message,(uint8_t *)&UART_RX_Buffer,UART_RX_Buffer_NextFreeByteIndex);
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <USART1_IRQHandler+0x64>)
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	490f      	ldr	r1, [pc, #60]	; (8002e24 <USART1_IRQHandler+0x68>)
 8002de8:	480f      	ldr	r0, [pc, #60]	; (8002e28 <USART1_IRQHandler+0x6c>)
 8002dea:	f006 fea5 	bl	8009b38 <memcpy>

        UART_RX_Received_NextFreeByteIndex = UART_RX_Buffer_NextFreeByteIndex;
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <USART1_IRQHandler+0x64>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <USART1_IRQHandler+0x70>)
 8002df6:	801a      	strh	r2, [r3, #0]


        // set the RX buffer data to 0 and reset the position
        memset((uint8_t *)&UART_RX_Buffer,(uint8_t)0,UART_RX_Buffer_NextFreeByteIndex);
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <USART1_IRQHandler+0x64>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2100      	movs	r1, #0
 8002e02:	4808      	ldr	r0, [pc, #32]	; (8002e24 <USART1_IRQHandler+0x68>)
 8002e04:	f006 fe6c 	bl	8009ae0 <memset>
        UART_RX_Buffer_NextFreeByteIndex = 0;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <USART1_IRQHandler+0x64>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	801a      	strh	r2, [r3, #0]
    }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e0e:	4808      	ldr	r0, [pc, #32]	; (8002e30 <USART1_IRQHandler+0x74>)
 8002e10:	f004 fd7a 	bl	8007908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40013800 	.word	0x40013800
 8002e1c:	200004b6 	.word	0x200004b6
 8002e20:	20000398 	.word	0x20000398
 8002e24:	20000280 	.word	0x20000280
 8002e28:	2000039c 	.word	0x2000039c
 8002e2c:	200004b4 	.word	0x200004b4
 8002e30:	200001f0 	.word	0x200001f0

08002e34 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <FDCAN2_IT0_IRQHandler+0x10>)
 8002e3a:	f001 fe5d 	bl	8004af8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200000f4 	.word	0x200000f4

08002e48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <SystemInit+0x20>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <SystemInit+0x20>)
 8002e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e6c:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e72:	490e      	ldr	r1, [pc, #56]	; (8002eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e74:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <LoopForever+0xe>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e78:	e002      	b.n	8002e80 <LoopCopyDataInit>

08002e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7e:	3304      	adds	r3, #4

08002e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e84:	d3f9      	bcc.n	8002e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e86:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e88:	4c0b      	ldr	r4, [pc, #44]	; (8002eb8 <LoopForever+0x16>)
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e8c:	e001      	b.n	8002e92 <LoopFillZerobss>

08002e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e90:	3204      	adds	r2, #4

08002e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e94:	d3fb      	bcc.n	8002e8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e96:	f7ff ffd7 	bl	8002e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f006 fe29 	bl	8009af0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e9e:	f7ff f9fb 	bl	8002298 <main>

08002ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ea2:	e7fe      	b.n	8002ea2 <LoopForever>
  ldr   r0, =_estack
 8002ea4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002eb0:	08009d20 	.word	0x08009d20
  ldr r2, =_sbss
 8002eb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002eb8:	200009a8 	.word	0x200009a8

08002ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ebc:	e7fe      	b.n	8002ebc <ADC1_2_IRQHandler>

08002ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f001 fa01 	bl	80042d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f000 f80e 	bl	8002ef0 <HAL_InitTick>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	71fb      	strb	r3, [r7, #7]
 8002ede:	e001      	b.n	8002ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ee0:	f7ff fd40 	bl	8002964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ee4:	79fb      	ldrb	r3, [r7, #7]

}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_InitTick+0x68>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d022      	beq.n	8002f4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_InitTick+0x6c>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_InitTick+0x68>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f001 fa0c 	bl	8004336 <HAL_SYSTICK_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10f      	bne.n	8002f44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	d809      	bhi.n	8002f3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f32:	f001 f9d8 	bl	80042e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_InitTick+0x70>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e007      	b.n	8002f4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e004      	b.n	8002f4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e001      	b.n	8002f4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000008 	.word	0x20000008
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000004 	.word	0x20000004

08002f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_IncTick+0x1c>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_IncTick+0x20>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4413      	add	r3, r2
 8002f72:	4a03      	ldr	r2, [pc, #12]	; (8002f80 <HAL_IncTick+0x1c>)
 8002f74:	6013      	str	r3, [r2, #0]
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	200009a4 	.word	0x200009a4
 8002f84:	20000008 	.word	0x20000008

08002f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_GetTick+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	200009a4 	.word	0x200009a4

08002fa0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3360      	adds	r3, #96	; 0x60
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <LL_ADC_SetOffset+0x44>)
 800302a:	4013      	ands	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	4313      	orrs	r3, r2
 8003038:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	03fff000 	.word	0x03fff000

08003050 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3360      	adds	r3, #96	; 0x60
 800305e:	461a      	mov	r2, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3360      	adds	r3, #96	; 0x60
 800308c:	461a      	mov	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b087      	sub	sp, #28
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3360      	adds	r3, #96	; 0x60
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3360      	adds	r3, #96	; 0x60
 80030f8:	461a      	mov	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	431a      	orrs	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	615a      	str	r2, [r3, #20]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3330      	adds	r3, #48	; 0x30
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	4413      	add	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	211f      	movs	r1, #31
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	0e9b      	lsrs	r3, r3, #26
 800317c:	f003 011f 	and.w	r1, r3, #31
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	431a      	orrs	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3314      	adds	r3, #20
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	0e5b      	lsrs	r3, r3, #25
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	4413      	add	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	0d1b      	lsrs	r3, r3, #20
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2107      	movs	r1, #7
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	401a      	ands	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	0d1b      	lsrs	r3, r3, #20
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	431a      	orrs	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031e6:	bf00      	nop
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a0f      	ldr	r2, [pc, #60]	; (8003240 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10a      	bne.n	800321e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800321c:	e00a      	b.n	8003234 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322a:	43db      	mvns	r3, r3
 800322c:	401a      	ands	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	407f0000 	.word	0x407f0000

08003244 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6093      	str	r3, [r2, #8]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327c:	d101      	bne.n	8003282 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80032a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032cc:	d101      	bne.n	80032d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <LL_ADC_IsEnabled+0x18>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <LL_ADC_IsEnabled+0x1a>
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b04      	cmp	r3, #4
 8003318:	d101      	bne.n	800331e <LL_ADC_REG_IsConversionOngoing+0x18>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d101      	bne.n	8003344 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e1a1      	b.n	80036b2 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fb15 	bl	80029ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff67 	bl	8003268 <LL_ADC_IsDeepPowerDownEnabled>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d004      	beq.n	80033aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff4d 	bl	8003244 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff ff82 	bl	80032b8 <LL_ADC_IsInternalRegulatorEnabled>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d115      	bne.n	80033e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff66 	bl	8003290 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c4:	4b9a      	ldr	r3, [pc, #616]	; (8003630 <HAL_ADC_Init+0x2dc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	4a9a      	ldr	r2, [pc, #616]	; (8003634 <HAL_ADC_Init+0x2e0>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	3301      	adds	r3, #1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033d8:	e002      	b.n	80033e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3b01      	subs	r3, #1
 80033de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f9      	bne.n	80033da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ff64 	bl	80032b8 <LL_ADC_IsInternalRegulatorEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	f043 0210 	orr.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff ff75 	bl	8003306 <LL_ADC_REG_IsConversionOngoing>
 800341c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 813a 	bne.w	80036a0 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 8136 	bne.w	80036a0 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800343c:	f043 0202 	orr.w	r2, r3, #2
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff49 	bl	80032e0 <LL_ADC_IsEnabled>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d137      	bne.n	80034c4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800345c:	d004      	beq.n	8003468 <HAL_ADC_Init+0x114>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a75      	ldr	r2, [pc, #468]	; (8003638 <HAL_ADC_Init+0x2e4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d10f      	bne.n	8003488 <HAL_ADC_Init+0x134>
 8003468:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800346c:	f7ff ff38 	bl	80032e0 <LL_ADC_IsEnabled>
 8003470:	4604      	mov	r4, r0
 8003472:	4871      	ldr	r0, [pc, #452]	; (8003638 <HAL_ADC_Init+0x2e4>)
 8003474:	f7ff ff34 	bl	80032e0 <LL_ADC_IsEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	4323      	orrs	r3, r4
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e008      	b.n	800349a <HAL_ADC_Init+0x146>
 8003488:	486c      	ldr	r0, [pc, #432]	; (800363c <HAL_ADC_Init+0x2e8>)
 800348a:	f7ff ff29 	bl	80032e0 <LL_ADC_IsEnabled>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d012      	beq.n	80034c4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a6:	d004      	beq.n	80034b2 <HAL_ADC_Init+0x15e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a62      	ldr	r2, [pc, #392]	; (8003638 <HAL_ADC_Init+0x2e4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_ADC_Init+0x162>
 80034b2:	4a63      	ldr	r2, [pc, #396]	; (8003640 <HAL_ADC_Init+0x2ec>)
 80034b4:	e000      	b.n	80034b8 <HAL_ADC_Init+0x164>
 80034b6:	4a63      	ldr	r2, [pc, #396]	; (8003644 <HAL_ADC_Init+0x2f0>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f7ff fd6e 	bl	8002fa0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7f5b      	ldrb	r3, [r3, #29]
 80034c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80034d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80034da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	045b      	lsls	r3, r3, #17
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	4b49      	ldr	r3, [pc, #292]	; (8003648 <HAL_ADC_Init+0x2f4>)
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	430b      	orrs	r3, r1
 800352e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fedb 	bl	8003306 <LL_ADC_REG_IsConversionOngoing>
 8003550:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fee8 	bl	800332c <LL_ADC_INJ_IsConversionOngoing>
 800355c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d17b      	bne.n	800365c <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d178      	bne.n	800365c <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800356e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003576:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003586:	f023 0302 	bic.w	r3, r3, #2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	69b9      	ldr	r1, [r7, #24]
 8003590:	430b      	orrs	r3, r1
 8003592:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d017      	beq.n	80035cc <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6911      	ldr	r1, [r2, #16]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80035ca:	e013      	b.n	80035f4 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d126      	bne.n	800364c <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003614:	4311      	orrs	r1, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800361a:	4311      	orrs	r1, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003620:	430a      	orrs	r2, r1
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	611a      	str	r2, [r3, #16]
 800362e:	e015      	b.n	800365c <HAL_ADC_Init+0x308>
 8003630:	20000000 	.word	0x20000000
 8003634:	053e2d63 	.word	0x053e2d63
 8003638:	50000100 	.word	0x50000100
 800363c:	50000400 	.word	0x50000400
 8003640:	50000300 	.word	0x50000300
 8003644:	50000700 	.word	0x50000700
 8003648:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10c      	bne.n	800367e <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f023 010f 	bic.w	r1, r3, #15
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	1e5a      	subs	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
 800367c:	e007      	b.n	800368e <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 020f 	bic.w	r2, r2, #15
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	f043 0201 	orr.w	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	65da      	str	r2, [r3, #92]	; 0x5c
 800369e:	e007      	b.n	80036b0 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	f043 0210 	orr.w	r2, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd90      	pop	{r4, r7, pc}
 80036ba:	bf00      	nop

080036bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b0b6      	sub	sp, #216	; 0xd8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d102      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x24>
 80036da:	2302      	movs	r3, #2
 80036dc:	f000 bc04 	b.w	8003ee8 <HAL_ADC_ConfigChannel+0x82c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fe0a 	bl	8003306 <LL_ADC_REG_IsConversionOngoing>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f040 83e8 	bne.w	8003eca <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	f7ff fd1c 	bl	8003144 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fdf8 	bl	8003306 <LL_ADC_REG_IsConversionOngoing>
 8003716:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fe04 	bl	800332c <LL_ADC_INJ_IsConversionOngoing>
 8003724:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003728:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800372c:	2b00      	cmp	r3, #0
 800372e:	f040 81d9 	bne.w	8003ae4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003736:	2b00      	cmp	r3, #0
 8003738:	f040 81d4 	bne.w	8003ae4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003744:	d10f      	bne.n	8003766 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	4619      	mov	r1, r3
 8003752:	f7ff fd23 	bl	800319c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fcdd 	bl	800311e <LL_ADC_SetSamplingTimeCommonConfig>
 8003764:	e00e      	b.n	8003784 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	461a      	mov	r2, r3
 8003774:	f7ff fd12 	bl	800319c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fccd 	bl	800311e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	08db      	lsrs	r3, r3, #3
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d022      	beq.n	80037ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6919      	ldr	r1, [r3, #16]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037b6:	f7ff fc27 	bl	8003008 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6919      	ldr	r1, [r3, #16]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7ff fc73 	bl	80030b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	6919      	ldr	r1, [r3, #16]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	7f1b      	ldrb	r3, [r3, #28]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d102      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x126>
 80037dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e0:	e000      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x128>
 80037e2:	2300      	movs	r3, #0
 80037e4:	461a      	mov	r2, r3
 80037e6:	f7ff fc7f 	bl	80030e8 <LL_ADC_SetOffsetSaturation>
 80037ea:	e17b      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fc2c 	bl	8003050 <LL_ADC_GetOffsetChannel>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x15c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fc21 	bl	8003050 <LL_ADC_GetOffsetChannel>
 800380e:	4603      	mov	r3, r0
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	f003 021f 	and.w	r2, r3, #31
 8003816:	e01e      	b.n	8003856 <HAL_ADC_ConfigChannel+0x19a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fc16 	bl	8003050 <LL_ADC_GetOffsetChannel>
 8003824:	4603      	mov	r3, r0
 8003826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800383a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800383e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003846:	2320      	movs	r3, #32
 8003848:	e004      	b.n	8003854 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800384a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <HAL_ADC_ConfigChannel+0x1b2>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0e9b      	lsrs	r3, r3, #26
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	e018      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x1e4>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800388a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003892:	2320      	movs	r3, #32
 8003894:	e004      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d106      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2200      	movs	r2, #0
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fbe5 	bl	800307c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2101      	movs	r1, #1
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fbc9 	bl	8003050 <LL_ADC_GetOffsetChannel>
 80038be:	4603      	mov	r3, r0
 80038c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_ADC_ConfigChannel+0x222>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fbbe 	bl	8003050 <LL_ADC_GetOffsetChannel>
 80038d4:	4603      	mov	r3, r0
 80038d6:	0e9b      	lsrs	r3, r3, #26
 80038d8:	f003 021f 	and.w	r2, r3, #31
 80038dc:	e01e      	b.n	800391c <HAL_ADC_ConfigChannel+0x260>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2101      	movs	r1, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fbb3 	bl	8003050 <LL_ADC_GetOffsetChannel>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80038fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800390c:	2320      	movs	r3, #32
 800390e:	e004      	b.n	800391a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x278>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0e9b      	lsrs	r3, r3, #26
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	e018      	b.n	8003966 <HAL_ADC_ConfigChannel+0x2aa>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003940:	fa93 f3a3 	rbit	r3, r3
 8003944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800394c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003958:	2320      	movs	r3, #32
 800395a:	e004      	b.n	8003966 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800395c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003966:	429a      	cmp	r2, r3
 8003968:	d106      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fb82 	bl	800307c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2102      	movs	r1, #2
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fb66 	bl	8003050 <LL_ADC_GetOffsetChannel>
 8003984:	4603      	mov	r3, r0
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x2e8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fb5b 	bl	8003050 <LL_ADC_GetOffsetChannel>
 800399a:	4603      	mov	r3, r0
 800399c:	0e9b      	lsrs	r3, r3, #26
 800399e:	f003 021f 	and.w	r2, r3, #31
 80039a2:	e01e      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x326>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2102      	movs	r1, #2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fb50 	bl	8003050 <LL_ADC_GetOffsetChannel>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80039c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80039ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e004      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80039d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x33e>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	0e9b      	lsrs	r3, r3, #26
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	e016      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x36c>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	e004      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d106      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2102      	movs	r1, #2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fb21 	bl	800307c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2103      	movs	r1, #3
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fb05 	bl	8003050 <LL_ADC_GetOffsetChannel>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x3aa>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2103      	movs	r1, #3
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fafa 	bl	8003050 <LL_ADC_GetOffsetChannel>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	0e9b      	lsrs	r3, r3, #26
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	e017      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x3da>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2103      	movs	r1, #3
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff faef 	bl	8003050 <LL_ADC_GetOffsetChannel>
 8003a72:	4603      	mov	r3, r0
 8003a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a88:	2320      	movs	r3, #32
 8003a8a:	e003      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d105      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x3f2>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	0e9b      	lsrs	r3, r3, #26
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	e011      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x416>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003abe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	e003      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d106      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	2103      	movs	r1, #3
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff facc 	bl	800307c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fbf9 	bl	80032e0 <LL_ADC_IsEnabled>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f040 813d 	bne.w	8003d70 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6819      	ldr	r1, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f7ff fb76 	bl	80031f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4aa2      	ldr	r2, [pc, #648]	; (8003d98 <HAL_ADC_ConfigChannel+0x6dc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	f040 812e 	bne.w	8003d70 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x480>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	bf94      	ite	ls
 8003b34:	2301      	movls	r3, #1
 8003b36:	2300      	movhi	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e019      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x4b4>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b54:	2320      	movs	r3, #32
 8003b56:	e003      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b5a:	fab3 f383 	clz	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2b09      	cmp	r3, #9
 8003b68:	bf94      	ite	ls
 8003b6a:	2301      	movls	r3, #1
 8003b6c:	2300      	movhi	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d079      	beq.n	8003c68 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x4d4>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	0e9b      	lsrs	r3, r3, #26
 8003b86:	3301      	adds	r3, #1
 8003b88:	069b      	lsls	r3, r3, #26
 8003b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b8e:	e015      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x500>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ba8:	2320      	movs	r3, #32
 8003baa:	e003      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	069b      	lsls	r3, r3, #26
 8003bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x520>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0e9b      	lsrs	r3, r3, #26
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	e017      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x550>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	e003      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2101      	movs	r1, #1
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	ea42 0103 	orr.w	r1, r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x576>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0e9b      	lsrs	r3, r3, #26
 8003c22:	3301      	adds	r3, #1
 8003c24:	f003 021f 	and.w	r2, r3, #31
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	051b      	lsls	r3, r3, #20
 8003c30:	e018      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x5a8>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	e003      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c64:	430b      	orrs	r3, r1
 8003c66:	e07e      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d107      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x5c8>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0e9b      	lsrs	r3, r3, #26
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	069b      	lsls	r3, r3, #26
 8003c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c82:	e015      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x5f4>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c9c:	2320      	movs	r3, #32
 8003c9e:	e003      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	fab3 f383 	clz	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	069b      	lsls	r3, r3, #26
 8003cac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x614>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	0e9b      	lsrs	r3, r3, #26
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	e017      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x644>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	61fb      	str	r3, [r7, #28]
  return result;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ce8:	2320      	movs	r3, #32
 8003cea:	e003      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	ea42 0103 	orr.w	r1, r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10d      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x670>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0e9b      	lsrs	r3, r3, #26
 8003d16:	3301      	adds	r3, #1
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	4413      	add	r3, r2
 8003d22:	3b1e      	subs	r3, #30
 8003d24:	051b      	lsls	r3, r3, #20
 8003d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	e01b      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x6a8>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	fa93 f3a3 	rbit	r3, r3
 8003d38:	613b      	str	r3, [r7, #16]
  return result;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d44:	2320      	movs	r3, #32
 8003d46:	e003      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fab3 f383 	clz	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	f003 021f 	and.w	r2, r3, #31
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3b1e      	subs	r3, #30
 8003d5e:	051b      	lsls	r3, r3, #20
 8003d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d64:	430b      	orrs	r3, r1
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	6892      	ldr	r2, [r2, #8]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7ff fa16 	bl	800319c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_ADC_ConfigChannel+0x6e0>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80af 	beq.w	8003edc <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d86:	d004      	beq.n	8003d92 <HAL_ADC_ConfigChannel+0x6d6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_ADC_ConfigChannel+0x6e4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10a      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x6ec>
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <HAL_ADC_ConfigChannel+0x6e8>)
 8003d94:	e009      	b.n	8003daa <HAL_ADC_ConfigChannel+0x6ee>
 8003d96:	bf00      	nop
 8003d98:	407f0000 	.word	0x407f0000
 8003d9c:	80080000 	.word	0x80080000
 8003da0:	50000100 	.word	0x50000100
 8003da4:	50000300 	.word	0x50000300
 8003da8:	4b51      	ldr	r3, [pc, #324]	; (8003ef0 <HAL_ADC_ConfigChannel+0x834>)
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff f91e 	bl	8002fec <LL_ADC_GetCommonPathInternalCh>
 8003db0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a4e      	ldr	r2, [pc, #312]	; (8003ef4 <HAL_ADC_ConfigChannel+0x838>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_ADC_ConfigChannel+0x70c>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a4d      	ldr	r2, [pc, #308]	; (8003ef8 <HAL_ADC_ConfigChannel+0x83c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d134      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d12e      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ddc:	d17e      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de6:	d004      	beq.n	8003df2 <HAL_ADC_ConfigChannel+0x736>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a43      	ldr	r2, [pc, #268]	; (8003efc <HAL_ADC_ConfigChannel+0x840>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x73a>
 8003df2:	4a43      	ldr	r2, [pc, #268]	; (8003f00 <HAL_ADC_ConfigChannel+0x844>)
 8003df4:	e000      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x73c>
 8003df6:	4a3e      	ldr	r2, [pc, #248]	; (8003ef0 <HAL_ADC_ConfigChannel+0x834>)
 8003df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f7ff f8df 	bl	8002fc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e08:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <HAL_ADC_ConfigChannel+0x848>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	4a3e      	ldr	r2, [pc, #248]	; (8003f08 <HAL_ADC_ConfigChannel+0x84c>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e22:	e002      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f9      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e30:	e054      	b.n	8003edc <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a35      	ldr	r2, [pc, #212]	; (8003f0c <HAL_ADC_ConfigChannel+0x850>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d120      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x7c2>
 8003e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11a      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e50:	d144      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5a:	d004      	beq.n	8003e66 <HAL_ADC_ConfigChannel+0x7aa>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <HAL_ADC_ConfigChannel+0x840>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d101      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x7ae>
 8003e66:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <HAL_ADC_ConfigChannel+0x844>)
 8003e68:	e000      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x7b0>
 8003e6a:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <HAL_ADC_ConfigChannel+0x834>)
 8003e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7ff f8a5 	bl	8002fc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e7c:	e02e      	b.n	8003edc <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a23      	ldr	r2, [pc, #140]	; (8003f10 <HAL_ADC_ConfigChannel+0x854>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d129      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d123      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_ADC_ConfigChannel+0x840>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01e      	beq.n	8003edc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_ConfigChannel+0x7f6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <HAL_ADC_ConfigChannel+0x840>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x7fa>
 8003eb2:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <HAL_ADC_ConfigChannel+0x844>)
 8003eb4:	e000      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x7fc>
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ef0 <HAL_ADC_ConfigChannel+0x834>)
 8003eb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ebc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f7ff f87f 	bl	8002fc6 <LL_ADC_SetCommonPathInternalCh>
 8003ec8:	e008      	b.n	8003edc <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	f043 0220 	orr.w	r2, r3, #32
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ee4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	37d8      	adds	r7, #216	; 0xd8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	50000700 	.word	0x50000700
 8003ef4:	c3210000 	.word	0xc3210000
 8003ef8:	90c00010 	.word	0x90c00010
 8003efc:	50000100 	.word	0x50000100
 8003f00:	50000300 	.word	0x50000300
 8003f04:	20000000 	.word	0x20000000
 8003f08:	053e2d63 	.word	0x053e2d63
 8003f0c:	c7520000 	.word	0xc7520000
 8003f10:	cb840000 	.word	0xcb840000

08003f14 <LL_ADC_IsEnabled>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <LL_ADC_IsEnabled+0x18>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <LL_ADC_IsEnabled+0x1a>
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_ADC_REG_IsConversionOngoing>:
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d101      	bne.n	8003f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b0a1      	sub	sp, #132	; 0x84
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0cb      	b.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003f86:	2300      	movs	r3, #0
 8003f88:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f96:	d102      	bne.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f98:	4b61      	ldr	r3, [pc, #388]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	e001      	b.n	8003fa2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0aa      	b.n	8004116 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ffb9 	bl	8003f3a <LL_ADC_REG_IsConversionOngoing>
 8003fc8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ffb3 	bl	8003f3a <LL_ADC_REG_IsConversionOngoing>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 808c 	bne.w	80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 8088 	bne.w	80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fec:	d004      	beq.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a4b      	ldr	r2, [pc, #300]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003ff8:	4b4a      	ldr	r3, [pc, #296]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003ffa:	e000      	b.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003ffc:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003ffe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d041      	beq.n	800408c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800401a:	035b      	lsls	r3, r3, #13
 800401c:	430b      	orrs	r3, r1
 800401e:	431a      	orrs	r2, r3
 8004020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004022:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800402c:	d004      	beq.n	8004038 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a3b      	ldr	r2, [pc, #236]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10f      	bne.n	8004058 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8004038:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800403c:	f7ff ff6a 	bl	8003f14 <LL_ADC_IsEnabled>
 8004040:	4604      	mov	r4, r0
 8004042:	4837      	ldr	r0, [pc, #220]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004044:	f7ff ff66 	bl	8003f14 <LL_ADC_IsEnabled>
 8004048:	4603      	mov	r3, r0
 800404a:	4323      	orrs	r3, r4
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e008      	b.n	800406a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8004058:	4834      	ldr	r0, [pc, #208]	; (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800405a:	f7ff ff5b 	bl	8003f14 <LL_ADC_IsEnabled>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d04c      	beq.n	8004108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800406e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004076:	f023 030f 	bic.w	r3, r3, #15
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	6811      	ldr	r1, [r2, #0]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	6892      	ldr	r2, [r2, #8]
 8004082:	430a      	orrs	r2, r1
 8004084:	431a      	orrs	r2, r3
 8004086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004088:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800408a:	e03d      	b.n	8004108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800408c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004096:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a0:	d004      	beq.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10f      	bne.n	80040cc <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80040ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040b0:	f7ff ff30 	bl	8003f14 <LL_ADC_IsEnabled>
 80040b4:	4604      	mov	r4, r0
 80040b6:	481a      	ldr	r0, [pc, #104]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80040b8:	f7ff ff2c 	bl	8003f14 <LL_ADC_IsEnabled>
 80040bc:	4603      	mov	r3, r0
 80040be:	4323      	orrs	r3, r4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e008      	b.n	80040de <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80040cc:	4817      	ldr	r0, [pc, #92]	; (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80040ce:	f7ff ff21 	bl	8003f14 <LL_ADC_IsEnabled>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d012      	beq.n	8004108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040ea:	f023 030f 	bic.w	r3, r3, #15
 80040ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040f2:	e009      	b.n	8004108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004106:	e000      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004108:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004112:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004116:	4618      	mov	r0, r3
 8004118:	3784      	adds	r7, #132	; 0x84
 800411a:	46bd      	mov	sp, r7
 800411c:	bd90      	pop	{r4, r7, pc}
 800411e:	bf00      	nop
 8004120:	50000100 	.word	0x50000100
 8004124:	50000300 	.word	0x50000300
 8004128:	50000700 	.word	0x50000700
 800412c:	50000400 	.word	0x50000400

08004130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004162:	4a04      	ldr	r2, [pc, #16]	; (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	60d3      	str	r3, [r2, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <__NVIC_GetPriorityGrouping+0x18>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 0307 	and.w	r3, r3, #7
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db0b      	blt.n	80041be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4907      	ldr	r1, [pc, #28]	; (80041cc <__NVIC_EnableIRQ+0x38>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2001      	movs	r0, #1
 80041b6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000e100 	.word	0xe000e100

080041d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db0a      	blt.n	80041fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	490c      	ldr	r1, [pc, #48]	; (800421c <__NVIC_SetPriority+0x4c>)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	440b      	add	r3, r1
 80041f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f8:	e00a      	b.n	8004210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4908      	ldr	r1, [pc, #32]	; (8004220 <__NVIC_SetPriority+0x50>)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	3b04      	subs	r3, #4
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	440b      	add	r3, r1
 800420e:	761a      	strb	r2, [r3, #24]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000e100 	.word	0xe000e100
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf28      	it	cs
 8004242:	2304      	movcs	r3, #4
 8004244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3304      	adds	r3, #4
 800424a:	2b06      	cmp	r3, #6
 800424c:	d902      	bls.n	8004254 <NVIC_EncodePriority+0x30>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3b03      	subs	r3, #3
 8004252:	e000      	b.n	8004256 <NVIC_EncodePriority+0x32>
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	401a      	ands	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800426c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43d9      	mvns	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	4313      	orrs	r3, r2
         );
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429c:	d301      	bcc.n	80042a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800429e:	2301      	movs	r3, #1
 80042a0:	e00f      	b.n	80042c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <SysTick_Config+0x40>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042aa:	210f      	movs	r1, #15
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042b0:	f7ff ff8e 	bl	80041d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <SysTick_Config+0x40>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <SysTick_Config+0x40>)
 80042bc:	2207      	movs	r2, #7
 80042be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	e000e010 	.word	0xe000e010

080042d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff29 	bl	8004130 <__NVIC_SetPriorityGrouping>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f4:	f7ff ff40 	bl	8004178 <__NVIC_GetPriorityGrouping>
 80042f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	6978      	ldr	r0, [r7, #20]
 8004300:	f7ff ff90 	bl	8004224 <NVIC_EncodePriority>
 8004304:	4602      	mov	r2, r0
 8004306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff5f 	bl	80041d0 <__NVIC_SetPriority>
}
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	4603      	mov	r3, r0
 8004322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff33 	bl	8004194 <__NVIC_EnableIRQ>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ffa4 	bl	800428c <SysTick_Config>
 8004344:	4603      	mov	r3, r0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e08d      	b.n	800447e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	4b47      	ldr	r3, [pc, #284]	; (8004488 <HAL_DMA_Init+0x138>)
 800436a:	429a      	cmp	r2, r3
 800436c:	d80f      	bhi.n	800438e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4b45      	ldr	r3, [pc, #276]	; (800448c <HAL_DMA_Init+0x13c>)
 8004376:	4413      	add	r3, r2
 8004378:	4a45      	ldr	r2, [pc, #276]	; (8004490 <HAL_DMA_Init+0x140>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	009a      	lsls	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a42      	ldr	r2, [pc, #264]	; (8004494 <HAL_DMA_Init+0x144>)
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
 800438c:	e00e      	b.n	80043ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	4b40      	ldr	r3, [pc, #256]	; (8004498 <HAL_DMA_Init+0x148>)
 8004396:	4413      	add	r3, r2
 8004398:	4a3d      	ldr	r2, [pc, #244]	; (8004490 <HAL_DMA_Init+0x140>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	009a      	lsls	r2, r3, #2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a3c      	ldr	r2, [pc, #240]	; (800449c <HAL_DMA_Init+0x14c>)
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9be 	bl	8004780 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800440c:	d102      	bne.n	8004414 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004428:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d010      	beq.n	8004454 <HAL_DMA_Init+0x104>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b04      	cmp	r3, #4
 8004438:	d80c      	bhi.n	8004454 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9de 	bl	80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	e008      	b.n	8004466 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40020407 	.word	0x40020407
 800448c:	bffdfff8 	.word	0xbffdfff8
 8004490:	cccccccd 	.word	0xcccccccd
 8004494:	40020000 	.word	0x40020000
 8004498:	bffdfbf8 	.word	0xbffdfbf8
 800449c:	40020400 	.word	0x40020400

080044a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d005      	beq.n	80044c4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2204      	movs	r2, #4
 80044bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	e037      	b.n	8004534 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 020e 	bic.w	r2, r2, #14
 80044d2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f202 	lsl.w	r2, r1, r2
 8004506:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004510:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00c      	beq.n	8004534 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004528:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004532:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d00d      	beq.n	8004586 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	e047      	b.n	8004616 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 020e 	bic.w	r2, r2, #14
 8004594:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	f003 021f 	and.w	r2, r3, #31
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2101      	movs	r1, #1
 80045c4:	fa01 f202 	lsl.w	r2, r1, r2
 80045c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	4798      	blx	r3
    }
  }
  return status;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2204      	movs	r2, #4
 8004642:	409a      	lsls	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d026      	beq.n	800469a <HAL_DMA_IRQHandler+0x7a>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d021      	beq.n	800469a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0204 	bic.w	r2, r2, #4
 8004672:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	2104      	movs	r1, #4
 8004682:	fa01 f202 	lsl.w	r2, r1, r2
 8004686:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	2b00      	cmp	r3, #0
 800468e:	d071      	beq.n	8004774 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004698:	e06c      	b.n	8004774 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2202      	movs	r2, #2
 80046a4:	409a      	lsls	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d02e      	beq.n	800470c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d029      	beq.n	800470c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 020a 	bic.w	r2, r2, #10
 80046d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f003 021f 	and.w	r2, r3, #31
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2102      	movs	r1, #2
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d038      	beq.n	8004774 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800470a:	e033      	b.n	8004774 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2208      	movs	r2, #8
 8004716:	409a      	lsls	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02a      	beq.n	8004776 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d025      	beq.n	8004776 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 020e 	bic.w	r2, r2, #14
 8004738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f003 021f 	and.w	r2, r3, #31
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	2101      	movs	r1, #1
 8004748:	fa01 f202 	lsl.w	r2, r1, r2
 800474c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004774:	bf00      	nop
 8004776:	bf00      	nop
}
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004790:	429a      	cmp	r2, r3
 8004792:	d802      	bhi.n	800479a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004794:	4b15      	ldr	r3, [pc, #84]	; (80047ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e001      	b.n	800479e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800479c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	3b08      	subs	r3, #8
 80047aa:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	091b      	lsrs	r3, r3, #4
 80047b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	009a      	lsls	r2, r3, #2
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4413      	add	r3, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a0b      	ldr	r2, [pc, #44]	; (80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80047ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2201      	movs	r2, #1
 80047d4:	409a      	lsls	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40020407 	.word	0x40020407
 80047ec:	40020800 	.word	0x40020800
 80047f0:	40020820 	.word	0x40020820
 80047f4:	cccccccd 	.word	0xcccccccd
 80047f8:	40020880 	.word	0x40020880

080047fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	461a      	mov	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a08      	ldr	r2, [pc, #32]	; (8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800481e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3b01      	subs	r3, #1
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2201      	movs	r2, #1
 800482a:	409a      	lsls	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	1000823f 	.word	0x1000823f
 8004840:	40020940 	.word	0x40020940

08004844 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e147      	b.n	8004ae6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fe f922 	bl	8002ab4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0210 	bic.w	r2, r2, #16
 800487e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004880:	f7fe fb82 	bl	8002f88 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004886:	e012      	b.n	80048ae <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004888:	f7fe fb7e 	bl	8002f88 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b0a      	cmp	r3, #10
 8004894:	d90b      	bls.n	80048ae <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	f043 0201 	orr.w	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2203      	movs	r2, #3
 80048a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e11b      	b.n	8004ae6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d0e5      	beq.n	8004888 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048cc:	f7fe fb5c 	bl	8002f88 <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80048d2:	e012      	b.n	80048fa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80048d4:	f7fe fb58 	bl	8002f88 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b0a      	cmp	r3, #10
 80048e0:	d90b      	bls.n	80048fa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	f043 0201 	orr.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0f5      	b.n	8004ae6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0e5      	beq.n	80048d4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0202 	orr.w	r2, r2, #2
 8004916:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a74      	ldr	r2, [pc, #464]	; (8004af0 <HAL_FDCAN_Init+0x2ac>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d103      	bne.n	800492a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004922:	4a74      	ldr	r2, [pc, #464]	; (8004af4 <HAL_FDCAN_Init+0x2b0>)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	7c1b      	ldrb	r3, [r3, #16]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d108      	bne.n	8004944 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004940:	619a      	str	r2, [r3, #24]
 8004942:	e007      	b.n	8004954 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004952:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	7c5b      	ldrb	r3, [r3, #17]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d108      	bne.n	800496e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800496a:	619a      	str	r2, [r3, #24]
 800496c:	e007      	b.n	800497e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800497c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7c9b      	ldrb	r3, [r3, #18]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d108      	bne.n	8004998 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004994:	619a      	str	r2, [r3, #24]
 8004996:	e007      	b.n	80049a8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049a6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80049cc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0210 	bic.w	r2, r2, #16
 80049dc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d108      	bne.n	80049f8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699a      	ldr	r2, [r3, #24]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0204 	orr.w	r2, r2, #4
 80049f4:	619a      	str	r2, [r3, #24]
 80049f6:	e02c      	b.n	8004a52 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d028      	beq.n	8004a52 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d01c      	beq.n	8004a42 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a16:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0210 	orr.w	r2, r2, #16
 8004a26:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d110      	bne.n	8004a52 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0220 	orr.w	r2, r2, #32
 8004a3e:	619a      	str	r2, [r3, #24]
 8004a40:	e007      	b.n	8004a52 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0220 	orr.w	r2, r2, #32
 8004a50:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a62:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a6a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a7a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a7c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a86:	d115      	bne.n	8004ab4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	3b01      	subs	r3, #1
 8004a94:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a96:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004aa0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ab0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ab2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f9c2 	bl	8004e54 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40006400 	.word	0x40006400
 8004af4:	40006500 	.word	0x40006500

08004af8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b06:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b14:	4013      	ands	r3, r2
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b3a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	4013      	ands	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8004b52:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004b6a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4013      	ands	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00d      	beq.n	8004ba2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d006      	beq.n	8004ba2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2240      	movs	r2, #64	; 0x40
 8004b9a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f939 	bl	8004e14 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d014      	beq.n	8004be8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004bc6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bde:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004be0:	6939      	ldr	r1, [r7, #16]
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8f7 	bl	8004dd6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004bf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f8b6 	bl	8004d6a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6a3a      	ldr	r2, [r7, #32]
 8004c0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004c0c:	6a39      	ldr	r1, [r7, #32]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f8b6 	bl	8004d80 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004c22:	69f9      	ldr	r1, [r7, #28]
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8b6 	bl	8004d96 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00e      	beq.n	8004c56 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8ab 	bl	8004dac <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01a      	beq.n	8004c9a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d013      	beq.n	8004c9a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004c7a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4013      	ands	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2280      	movs	r2, #128	; 0x80
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f893 	bl	8004dc0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f893 	bl	8004dec <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f887 	bl	8004e00 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d011      	beq.n	8004d24 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004d32:	6979      	ldr	r1, [r7, #20]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f881 	bl	8004e3c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f863 	bl	8004e28 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004d62:	bf00      	nop
 8004d64:	3728      	adds	r7, #40	; 0x28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004e5c:	4b2c      	ldr	r3, [pc, #176]	; (8004f10 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004e5e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a2b      	ldr	r2, [pc, #172]	; (8004f14 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d103      	bne.n	8004e72 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004e70:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e80:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	041a      	lsls	r2, r3, #16
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea6:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	061a      	lsls	r2, r3, #24
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	e005      	b.n	8004ef4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d3f3      	bcc.n	8004ee8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	4000a400 	.word	0x4000a400
 8004f14:	40006800 	.word	0x40006800

08004f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f26:	e15a      	b.n	80051de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	fa01 f303 	lsl.w	r3, r1, r3
 8004f34:	4013      	ands	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 814c 	beq.w	80051d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d005      	beq.n	8004f58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d130      	bne.n	8004fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	2203      	movs	r2, #3
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f8e:	2201      	movs	r2, #1
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f003 0201 	and.w	r2, r3, #1
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d017      	beq.n	8004ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d123      	bne.n	800504a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	08da      	lsrs	r2, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3208      	adds	r2, #8
 800500a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800500e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	220f      	movs	r2, #15
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	08da      	lsrs	r2, r3, #3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3208      	adds	r2, #8
 8005044:	6939      	ldr	r1, [r7, #16]
 8005046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	2203      	movs	r2, #3
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 0203 	and.w	r2, r3, #3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 80a6 	beq.w	80051d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508c:	4b5b      	ldr	r3, [pc, #364]	; (80051fc <HAL_GPIO_Init+0x2e4>)
 800508e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005090:	4a5a      	ldr	r2, [pc, #360]	; (80051fc <HAL_GPIO_Init+0x2e4>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6613      	str	r3, [r2, #96]	; 0x60
 8005098:	4b58      	ldr	r3, [pc, #352]	; (80051fc <HAL_GPIO_Init+0x2e4>)
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050a4:	4a56      	ldr	r2, [pc, #344]	; (8005200 <HAL_GPIO_Init+0x2e8>)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	089b      	lsrs	r3, r3, #2
 80050aa:	3302      	adds	r3, #2
 80050ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	220f      	movs	r2, #15
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050ce:	d01f      	beq.n	8005110 <HAL_GPIO_Init+0x1f8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a4c      	ldr	r2, [pc, #304]	; (8005204 <HAL_GPIO_Init+0x2ec>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d019      	beq.n	800510c <HAL_GPIO_Init+0x1f4>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a4b      	ldr	r2, [pc, #300]	; (8005208 <HAL_GPIO_Init+0x2f0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <HAL_GPIO_Init+0x1f0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a4a      	ldr	r2, [pc, #296]	; (800520c <HAL_GPIO_Init+0x2f4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00d      	beq.n	8005104 <HAL_GPIO_Init+0x1ec>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a49      	ldr	r2, [pc, #292]	; (8005210 <HAL_GPIO_Init+0x2f8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <HAL_GPIO_Init+0x1e8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a48      	ldr	r2, [pc, #288]	; (8005214 <HAL_GPIO_Init+0x2fc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d101      	bne.n	80050fc <HAL_GPIO_Init+0x1e4>
 80050f8:	2305      	movs	r3, #5
 80050fa:	e00a      	b.n	8005112 <HAL_GPIO_Init+0x1fa>
 80050fc:	2306      	movs	r3, #6
 80050fe:	e008      	b.n	8005112 <HAL_GPIO_Init+0x1fa>
 8005100:	2304      	movs	r3, #4
 8005102:	e006      	b.n	8005112 <HAL_GPIO_Init+0x1fa>
 8005104:	2303      	movs	r3, #3
 8005106:	e004      	b.n	8005112 <HAL_GPIO_Init+0x1fa>
 8005108:	2302      	movs	r3, #2
 800510a:	e002      	b.n	8005112 <HAL_GPIO_Init+0x1fa>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_GPIO_Init+0x1fa>
 8005110:	2300      	movs	r3, #0
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	f002 0203 	and.w	r2, r2, #3
 8005118:	0092      	lsls	r2, r2, #2
 800511a:	4093      	lsls	r3, r2
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005122:	4937      	ldr	r1, [pc, #220]	; (8005200 <HAL_GPIO_Init+0x2e8>)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	3302      	adds	r3, #2
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005130:	4b39      	ldr	r3, [pc, #228]	; (8005218 <HAL_GPIO_Init+0x300>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	43db      	mvns	r3, r3
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4013      	ands	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005154:	4a30      	ldr	r2, [pc, #192]	; (8005218 <HAL_GPIO_Init+0x300>)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800515a:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <HAL_GPIO_Init+0x300>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	43db      	mvns	r3, r3
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4013      	ands	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800517e:	4a26      	ldr	r2, [pc, #152]	; (8005218 <HAL_GPIO_Init+0x300>)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005184:	4b24      	ldr	r3, [pc, #144]	; (8005218 <HAL_GPIO_Init+0x300>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	43db      	mvns	r3, r3
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4013      	ands	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80051a8:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <HAL_GPIO_Init+0x300>)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80051ae:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <HAL_GPIO_Init+0x300>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051d2:	4a11      	ldr	r2, [pc, #68]	; (8005218 <HAL_GPIO_Init+0x300>)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3301      	adds	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f47f ae9d 	bne.w	8004f28 <HAL_GPIO_Init+0x10>
  }
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40021000 	.word	0x40021000
 8005200:	40010000 	.word	0x40010000
 8005204:	48000400 	.word	0x48000400
 8005208:	48000800 	.word	0x48000800
 800520c:	48000c00 	.word	0x48000c00
 8005210:	48001000 	.word	0x48001000
 8005214:	48001400 	.word	0x48001400
 8005218:	40010400 	.word	0x40010400

0800521c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	887b      	ldrh	r3, [r7, #2]
 800522e:	4013      	ands	r3, r2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	e001      	b.n	800523e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	807b      	strh	r3, [r7, #2]
 8005258:	4613      	mov	r3, r2
 800525a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800525c:	787b      	ldrb	r3, [r7, #1]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005262:	887a      	ldrh	r2, [r7, #2]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005268:	e002      	b.n	8005270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800526a:	887a      	ldrh	r2, [r7, #2]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4013      	ands	r3, r2
 8005294:	041a      	lsls	r2, r3, #16
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	43d9      	mvns	r1, r3
 800529a:	887b      	ldrh	r3, [r7, #2]
 800529c:	400b      	ands	r3, r1
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	619a      	str	r2, [r3, #24]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d141      	bne.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052be:	4b4b      	ldr	r3, [pc, #300]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ca:	d131      	bne.n	8005330 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052cc:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d2:	4a46      	ldr	r2, [pc, #280]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052dc:	4b43      	ldr	r3, [pc, #268]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052e4:	4a41      	ldr	r2, [pc, #260]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052ec:	4b40      	ldr	r3, [pc, #256]	; (80053f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2232      	movs	r2, #50	; 0x32
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	4a3f      	ldr	r2, [pc, #252]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	0c9b      	lsrs	r3, r3, #18
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005302:	e002      	b.n	800530a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3b01      	subs	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800530a:	4b38      	ldr	r3, [pc, #224]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005316:	d102      	bne.n	800531e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f2      	bne.n	8005304 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800531e:	4b33      	ldr	r3, [pc, #204]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532a:	d158      	bne.n	80053de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e057      	b.n	80053e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005330:	4b2e      	ldr	r3, [pc, #184]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005336:	4a2d      	ldr	r2, [pc, #180]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800533c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005340:	e04d      	b.n	80053de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005348:	d141      	bne.n	80053ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800534a:	4b28      	ldr	r3, [pc, #160]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005356:	d131      	bne.n	80053bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005358:	4b24      	ldr	r3, [pc, #144]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800535a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535e:	4a23      	ldr	r2, [pc, #140]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005368:	4b20      	ldr	r3, [pc, #128]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005370:	4a1e      	ldr	r2, [pc, #120]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2232      	movs	r2, #50	; 0x32
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	0c9b      	lsrs	r3, r3, #18
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800538e:	e002      	b.n	8005396 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d102      	bne.n	80053aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f2      	bne.n	8005390 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b6:	d112      	bne.n	80053de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e011      	b.n	80053e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80053cc:	e007      	b.n	80053de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053ce:	4b07      	ldr	r3, [pc, #28]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053d6:	4a05      	ldr	r2, [pc, #20]	; (80053ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40007000 	.word	0x40007000
 80053f0:	20000000 	.word	0x20000000
 80053f4:	431bde83 	.word	0x431bde83

080053f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4a04      	ldr	r2, [pc, #16]	; (8005414 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005406:	6093      	str	r3, [r2, #8]
}
 8005408:	bf00      	nop
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40007000 	.word	0x40007000

08005418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e306      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d075      	beq.n	8005522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005436:	4b97      	ldr	r3, [pc, #604]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005440:	4b94      	ldr	r3, [pc, #592]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b0c      	cmp	r3, #12
 800544e:	d102      	bne.n	8005456 <HAL_RCC_OscConfig+0x3e>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b03      	cmp	r3, #3
 8005454:	d002      	beq.n	800545c <HAL_RCC_OscConfig+0x44>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d10b      	bne.n	8005474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	4b8d      	ldr	r3, [pc, #564]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d05b      	beq.n	8005520 <HAL_RCC_OscConfig+0x108>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d157      	bne.n	8005520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e2e1      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547c:	d106      	bne.n	800548c <HAL_RCC_OscConfig+0x74>
 800547e:	4b85      	ldr	r3, [pc, #532]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a84      	ldr	r2, [pc, #528]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e01d      	b.n	80054c8 <HAL_RCC_OscConfig+0xb0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005494:	d10c      	bne.n	80054b0 <HAL_RCC_OscConfig+0x98>
 8005496:	4b7f      	ldr	r3, [pc, #508]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a7e      	ldr	r2, [pc, #504]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800549c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4b7c      	ldr	r3, [pc, #496]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a7b      	ldr	r2, [pc, #492]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e00b      	b.n	80054c8 <HAL_RCC_OscConfig+0xb0>
 80054b0:	4b78      	ldr	r3, [pc, #480]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a77      	ldr	r2, [pc, #476]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80054b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4b75      	ldr	r3, [pc, #468]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a74      	ldr	r2, [pc, #464]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80054c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fd fd5a 	bl	8002f88 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fd fd56 	bl	8002f88 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e2a6      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ea:	4b6a      	ldr	r3, [pc, #424]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc0>
 80054f6:	e014      	b.n	8005522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fd fd46 	bl	8002f88 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005500:	f7fd fd42 	bl	8002f88 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b64      	cmp	r3, #100	; 0x64
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e292      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005512:	4b60      	ldr	r3, [pc, #384]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0xe8>
 800551e:	e000      	b.n	8005522 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d075      	beq.n	800561a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800552e:	4b59      	ldr	r3, [pc, #356]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005538:	4b56      	ldr	r3, [pc, #344]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b0c      	cmp	r3, #12
 8005546:	d102      	bne.n	800554e <HAL_RCC_OscConfig+0x136>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d002      	beq.n	8005554 <HAL_RCC_OscConfig+0x13c>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b04      	cmp	r3, #4
 8005552:	d11f      	bne.n	8005594 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005554:	4b4f      	ldr	r3, [pc, #316]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_OscConfig+0x154>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e265      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556c:	4b49      	ldr	r3, [pc, #292]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	061b      	lsls	r3, r3, #24
 800557a:	4946      	ldr	r1, [pc, #280]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800557c:	4313      	orrs	r3, r2
 800557e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005580:	4b45      	ldr	r3, [pc, #276]	; (8005698 <HAL_RCC_OscConfig+0x280>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f7fd fcb3 	bl	8002ef0 <HAL_InitTick>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d043      	beq.n	8005618 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e251      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d023      	beq.n	80055e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800559c:	4b3d      	ldr	r3, [pc, #244]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a3c      	ldr	r2, [pc, #240]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80055a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fd fcee 	bl	8002f88 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b0:	f7fd fcea 	bl	8002f88 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e23a      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055c2:	4b34      	ldr	r3, [pc, #208]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b31      	ldr	r3, [pc, #196]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	061b      	lsls	r3, r3, #24
 80055dc:	492d      	ldr	r1, [pc, #180]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	604b      	str	r3, [r1, #4]
 80055e2:	e01a      	b.n	800561a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e4:	4b2b      	ldr	r3, [pc, #172]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 80055ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f0:	f7fd fcca 	bl	8002f88 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f8:	f7fd fcc6 	bl	8002f88 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e216      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800560a:	4b22      	ldr	r3, [pc, #136]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x1e0>
 8005616:	e000      	b.n	800561a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d041      	beq.n	80056aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01c      	beq.n	8005668 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562e:	4b19      	ldr	r3, [pc, #100]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005634:	4a17      	ldr	r2, [pc, #92]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563e:	f7fd fca3 	bl	8002f88 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005646:	f7fd fc9f 	bl	8002f88 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e1ef      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005658:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800565a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0ef      	beq.n	8005646 <HAL_RCC_OscConfig+0x22e>
 8005666:	e020      	b.n	80056aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 800566a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566e:	4a09      	ldr	r2, [pc, #36]	; (8005694 <HAL_RCC_OscConfig+0x27c>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fd fc86 	bl	8002f88 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800567e:	e00d      	b.n	800569c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005680:	f7fd fc82 	bl	8002f88 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d906      	bls.n	800569c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e1d2      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
 8005692:	bf00      	nop
 8005694:	40021000 	.word	0x40021000
 8005698:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800569c:	4b8c      	ldr	r3, [pc, #560]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 800569e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1ea      	bne.n	8005680 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80a6 	beq.w	8005804 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b8:	2300      	movs	r3, #0
 80056ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056bc:	4b84      	ldr	r3, [pc, #528]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_RCC_OscConfig+0x2b4>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_RCC_OscConfig+0x2b6>
 80056cc:	2300      	movs	r3, #0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	4b7f      	ldr	r3, [pc, #508]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	4a7e      	ldr	r2, [pc, #504]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056dc:	6593      	str	r3, [r2, #88]	; 0x58
 80056de:	4b7c      	ldr	r3, [pc, #496]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80056e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056ea:	2301      	movs	r3, #1
 80056ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ee:	4b79      	ldr	r3, [pc, #484]	; (80058d4 <HAL_RCC_OscConfig+0x4bc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d118      	bne.n	800572c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056fa:	4b76      	ldr	r3, [pc, #472]	; (80058d4 <HAL_RCC_OscConfig+0x4bc>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a75      	ldr	r2, [pc, #468]	; (80058d4 <HAL_RCC_OscConfig+0x4bc>)
 8005700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005706:	f7fd fc3f 	bl	8002f88 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800570e:	f7fd fc3b 	bl	8002f88 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e18b      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005720:	4b6c      	ldr	r3, [pc, #432]	; (80058d4 <HAL_RCC_OscConfig+0x4bc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d108      	bne.n	8005746 <HAL_RCC_OscConfig+0x32e>
 8005734:	4b66      	ldr	r3, [pc, #408]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573a:	4a65      	ldr	r2, [pc, #404]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005744:	e024      	b.n	8005790 <HAL_RCC_OscConfig+0x378>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b05      	cmp	r3, #5
 800574c:	d110      	bne.n	8005770 <HAL_RCC_OscConfig+0x358>
 800574e:	4b60      	ldr	r3, [pc, #384]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005754:	4a5e      	ldr	r2, [pc, #376]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005756:	f043 0304 	orr.w	r3, r3, #4
 800575a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800575e:	4b5c      	ldr	r3, [pc, #368]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005764:	4a5a      	ldr	r2, [pc, #360]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800576e:	e00f      	b.n	8005790 <HAL_RCC_OscConfig+0x378>
 8005770:	4b57      	ldr	r3, [pc, #348]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005776:	4a56      	ldr	r2, [pc, #344]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005780:	4b53      	ldr	r3, [pc, #332]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	4a52      	ldr	r2, [pc, #328]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005788:	f023 0304 	bic.w	r3, r3, #4
 800578c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d016      	beq.n	80057c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005798:	f7fd fbf6 	bl	8002f88 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800579e:	e00a      	b.n	80057b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a0:	f7fd fbf2 	bl	8002f88 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e140      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b6:	4b46      	ldr	r3, [pc, #280]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0ed      	beq.n	80057a0 <HAL_RCC_OscConfig+0x388>
 80057c4:	e015      	b.n	80057f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c6:	f7fd fbdf 	bl	8002f88 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057cc:	e00a      	b.n	80057e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ce:	f7fd fbdb 	bl	8002f88 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057dc:	4293      	cmp	r3, r2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e129      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057e4:	4b3a      	ldr	r3, [pc, #232]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1ed      	bne.n	80057ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d105      	bne.n	8005804 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f8:	4b35      	ldr	r3, [pc, #212]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fc:	4a34      	ldr	r2, [pc, #208]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80057fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d03c      	beq.n	800588a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01c      	beq.n	8005852 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005818:	4b2d      	ldr	r3, [pc, #180]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 800581a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800581e:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fd fbae 	bl	8002f88 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005830:	f7fd fbaa 	bl	8002f88 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e0fa      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005842:	4b23      	ldr	r3, [pc, #140]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0ef      	beq.n	8005830 <HAL_RCC_OscConfig+0x418>
 8005850:	e01b      	b.n	800588a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005852:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005858:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7fd fb91 	bl	8002f88 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800586a:	f7fd fb8d 	bl	8002f88 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e0dd      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800587c:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 800587e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1ef      	bne.n	800586a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80d1 	beq.w	8005a36 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005894:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 030c 	and.w	r3, r3, #12
 800589c:	2b0c      	cmp	r3, #12
 800589e:	f000 808b 	beq.w	80059b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d15e      	bne.n	8005968 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a08      	ldr	r2, [pc, #32]	; (80058d0 <HAL_RCC_OscConfig+0x4b8>)
 80058b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fd fb67 	bl	8002f88 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058bc:	e00c      	b.n	80058d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058be:	f7fd fb63 	bl	8002f88 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d905      	bls.n	80058d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0b3      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
 80058d0:	40021000 	.word	0x40021000
 80058d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d8:	4b59      	ldr	r3, [pc, #356]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ec      	bne.n	80058be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058e4:	4b56      	ldr	r3, [pc, #344]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	4b56      	ldr	r3, [pc, #344]	; (8005a44 <HAL_RCC_OscConfig+0x62c>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6a11      	ldr	r1, [r2, #32]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058f4:	3a01      	subs	r2, #1
 80058f6:	0112      	lsls	r2, r2, #4
 80058f8:	4311      	orrs	r1, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80058fe:	0212      	lsls	r2, r2, #8
 8005900:	4311      	orrs	r1, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005906:	0852      	lsrs	r2, r2, #1
 8005908:	3a01      	subs	r2, #1
 800590a:	0552      	lsls	r2, r2, #21
 800590c:	4311      	orrs	r1, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005912:	0852      	lsrs	r2, r2, #1
 8005914:	3a01      	subs	r2, #1
 8005916:	0652      	lsls	r2, r2, #25
 8005918:	4311      	orrs	r1, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800591e:	06d2      	lsls	r2, r2, #27
 8005920:	430a      	orrs	r2, r1
 8005922:	4947      	ldr	r1, [pc, #284]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 8005924:	4313      	orrs	r3, r2
 8005926:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005928:	4b45      	ldr	r3, [pc, #276]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a44      	ldr	r2, [pc, #272]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 800592e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005932:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005934:	4b42      	ldr	r3, [pc, #264]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4a41      	ldr	r2, [pc, #260]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 800593a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800593e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fd fb22 	bl	8002f88 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005948:	f7fd fb1e 	bl	8002f88 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e06e      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800595a:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x530>
 8005966:	e066      	b.n	8005a36 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005968:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a34      	ldr	r2, [pc, #208]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 800596e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005972:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005974:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4a31      	ldr	r2, [pc, #196]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 800597a:	f023 0303 	bic.w	r3, r3, #3
 800597e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005980:	4b2f      	ldr	r3, [pc, #188]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a2e      	ldr	r2, [pc, #184]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 8005986:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800598a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd fafa 	bl	8002f88 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005998:	f7fd faf6 	bl	8002f88 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e046      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059aa:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x580>
 80059b6:	e03e      	b.n	8005a36 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e039      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80059c4:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f003 0203 	and.w	r2, r3, #3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d12c      	bne.n	8005a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	3b01      	subs	r3, #1
 80059e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d123      	bne.n	8005a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d11b      	bne.n	8005a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d113      	bne.n	8005a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	3b01      	subs	r3, #1
 8005a18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d109      	bne.n	8005a32 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3720      	adds	r7, #32
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40021000 	.word	0x40021000
 8005a44:	019f800c 	.word	0x019f800c

08005a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e11e      	b.n	8005c9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a60:	4b91      	ldr	r3, [pc, #580]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d910      	bls.n	8005a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6e:	4b8e      	ldr	r3, [pc, #568]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f023 020f 	bic.w	r2, r3, #15
 8005a76:	498c      	ldr	r1, [pc, #560]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7e:	4b8a      	ldr	r3, [pc, #552]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e106      	b.n	8005c9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d073      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d129      	bne.n	8005af8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa4:	4b81      	ldr	r3, [pc, #516]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0f4      	b.n	8005c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005ab4:	f000 f99e 	bl	8005df4 <RCC_GetSysClockFreqFromPLLSource>
 8005ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4a7c      	ldr	r2, [pc, #496]	; (8005cb0 <HAL_RCC_ClockConfig+0x268>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d93f      	bls.n	8005b42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ac2:	4b7a      	ldr	r3, [pc, #488]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d033      	beq.n	8005b42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d12f      	bne.n	8005b42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ae2:	4b72      	ldr	r3, [pc, #456]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aea:	4a70      	ldr	r2, [pc, #448]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e024      	b.n	8005b42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d107      	bne.n	8005b10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b00:	4b6a      	ldr	r3, [pc, #424]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0c6      	b.n	8005c9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b10:	4b66      	ldr	r3, [pc, #408]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0be      	b.n	8005c9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005b20:	f000 f8ce 	bl	8005cc0 <HAL_RCC_GetSysClockFreq>
 8005b24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4a61      	ldr	r2, [pc, #388]	; (8005cb0 <HAL_RCC_ClockConfig+0x268>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d909      	bls.n	8005b42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b2e:	4b5f      	ldr	r3, [pc, #380]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b36:	4a5d      	ldr	r2, [pc, #372]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b42:	4b5a      	ldr	r3, [pc, #360]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f023 0203 	bic.w	r2, r3, #3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	4957      	ldr	r1, [pc, #348]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b54:	f7fd fa18 	bl	8002f88 <HAL_GetTick>
 8005b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5a:	e00a      	b.n	8005b72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b5c:	f7fd fa14 	bl	8002f88 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e095      	b.n	8005c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b72:	4b4e      	ldr	r3, [pc, #312]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 020c 	and.w	r2, r3, #12
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d1eb      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d023      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b9c:	4b43      	ldr	r3, [pc, #268]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a42      	ldr	r2, [pc, #264]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ba6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005bb4:	4b3d      	ldr	r3, [pc, #244]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005bbc:	4a3b      	ldr	r2, [pc, #236]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc4:	4b39      	ldr	r3, [pc, #228]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4936      	ldr	r1, [pc, #216]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d105      	bne.n	8005bea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bde:	4b33      	ldr	r3, [pc, #204]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4a32      	ldr	r2, [pc, #200]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bea:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d21d      	bcs.n	8005c34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf8:	4b2b      	ldr	r3, [pc, #172]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f023 020f 	bic.w	r2, r3, #15
 8005c00:	4929      	ldr	r1, [pc, #164]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c08:	f7fd f9be 	bl	8002f88 <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c10:	f7fd f9ba 	bl	8002f88 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e03b      	b.n	8005c9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_RCC_ClockConfig+0x260>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d1ed      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c40:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	4917      	ldr	r1, [pc, #92]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	490f      	ldr	r1, [pc, #60]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c72:	f000 f825 	bl	8005cc0 <HAL_RCC_GetSysClockFreq>
 8005c76:	4602      	mov	r2, r0
 8005c78:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <HAL_RCC_ClockConfig+0x264>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	490c      	ldr	r1, [pc, #48]	; (8005cb4 <HAL_RCC_ClockConfig+0x26c>)
 8005c84:	5ccb      	ldrb	r3, [r1, r3]
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8e:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <HAL_RCC_ClockConfig+0x270>)
 8005c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c92:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <HAL_RCC_ClockConfig+0x274>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fd f92a 	bl	8002ef0 <HAL_InitTick>
 8005c9c:	4603      	mov	r3, r0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40022000 	.word	0x40022000
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	04c4b400 	.word	0x04c4b400
 8005cb4:	08009cd0 	.word	0x08009cd0
 8005cb8:	20000000 	.word	0x20000000
 8005cbc:	20000004 	.word	0x20000004

08005cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005cc6:	4b2c      	ldr	r3, [pc, #176]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d102      	bne.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cd2:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	e047      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 030c 	and.w	r3, r3, #12
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d102      	bne.n	8005cea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ce4:	4b26      	ldr	r3, [pc, #152]	; (8005d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e03e      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005cea:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
 8005cf2:	2b0c      	cmp	r3, #12
 8005cf4:	d136      	bne.n	8005d64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cf6:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d00:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	091b      	lsrs	r3, r3, #4
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d10c      	bne.n	8005d2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d14:	4a1a      	ldr	r2, [pc, #104]	; (8005d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1c:	4a16      	ldr	r2, [pc, #88]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d1e:	68d2      	ldr	r2, [r2, #12]
 8005d20:	0a12      	lsrs	r2, r2, #8
 8005d22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	617b      	str	r3, [r7, #20]
      break;
 8005d2c:	e00c      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d2e:	4a13      	ldr	r2, [pc, #76]	; (8005d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d36:	4a10      	ldr	r2, [pc, #64]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d38:	68d2      	ldr	r2, [r2, #12]
 8005d3a:	0a12      	lsrs	r2, r2, #8
 8005d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
      break;
 8005d46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d48:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	0e5b      	lsrs	r3, r3, #25
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	3301      	adds	r3, #1
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	e001      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d68:	693b      	ldr	r3, [r7, #16]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	00f42400 	.word	0x00f42400
 8005d80:	007a1200 	.word	0x007a1200

08005d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000000 	.word	0x20000000

08005d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005da0:	f7ff fff0 	bl	8005d84 <HAL_RCC_GetHCLKFreq>
 8005da4:	4602      	mov	r2, r0
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	4904      	ldr	r1, [pc, #16]	; (8005dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005db2:	5ccb      	ldrb	r3, [r1, r3]
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	08009ce0 	.word	0x08009ce0

08005dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dcc:	f7ff ffda 	bl	8005d84 <HAL_RCC_GetHCLKFreq>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4b06      	ldr	r3, [pc, #24]	; (8005dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	0adb      	lsrs	r3, r3, #11
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	4904      	ldr	r1, [pc, #16]	; (8005df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dde:	5ccb      	ldrb	r3, [r1, r3]
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40021000 	.word	0x40021000
 8005df0:	08009ce0 	.word	0x08009ce0

08005df4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dfa:	4b1e      	ldr	r3, [pc, #120]	; (8005e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e04:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d10c      	bne.n	8005e32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e18:	4a17      	ldr	r2, [pc, #92]	; (8005e78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e22:	68d2      	ldr	r2, [r2, #12]
 8005e24:	0a12      	lsrs	r2, r2, #8
 8005e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	617b      	str	r3, [r7, #20]
    break;
 8005e30:	e00c      	b.n	8005e4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e32:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3a:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e3c:	68d2      	ldr	r2, [r2, #12]
 8005e3e:	0a12      	lsrs	r2, r2, #8
 8005e40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]
    break;
 8005e4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	0e5b      	lsrs	r3, r3, #25
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	3301      	adds	r3, #1
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e66:	687b      	ldr	r3, [r7, #4]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40021000 	.word	0x40021000
 8005e78:	007a1200 	.word	0x007a1200
 8005e7c:	00f42400 	.word	0x00f42400

08005e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e88:	2300      	movs	r3, #0
 8005e8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8098 	beq.w	8005fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ea2:	4b43      	ldr	r3, [pc, #268]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eae:	4b40      	ldr	r3, [pc, #256]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb2:	4a3f      	ldr	r2, [pc, #252]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8005eba:	4b3d      	ldr	r3, [pc, #244]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eca:	4b3a      	ldr	r3, [pc, #232]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a39      	ldr	r2, [pc, #228]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ed6:	f7fd f857 	bl	8002f88 <HAL_GetTick>
 8005eda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005edc:	e009      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ede:	f7fd f853 	bl	8002f88 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d902      	bls.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	74fb      	strb	r3, [r7, #19]
        break;
 8005ef0:	e005      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef2:	4b30      	ldr	r3, [pc, #192]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0ef      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005efe:	7cfb      	ldrb	r3, [r7, #19]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d159      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f04:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01e      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d019      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f20:	4b23      	ldr	r3, [pc, #140]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f2c:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f32:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f3c:	4b1c      	ldr	r3, [pc, #112]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f42:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f4c:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fd f813 	bl	8002f88 <HAL_GetTick>
 8005f62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f64:	e00b      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f66:	f7fd f80f 	bl	8002f88 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d902      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	74fb      	strb	r3, [r7, #19]
            break;
 8005f7c:	e006      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0ec      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f92:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa0:	4903      	ldr	r1, [pc, #12]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fa8:	e008      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	74bb      	strb	r3, [r7, #18]
 8005fae:	e005      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb8:	7cfb      	ldrb	r3, [r7, #19]
 8005fba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fbc:	7c7b      	ldrb	r3, [r7, #17]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d105      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc2:	4ba7      	ldr	r3, [pc, #668]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc6:	4aa6      	ldr	r2, [pc, #664]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fda:	4ba1      	ldr	r3, [pc, #644]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe0:	f023 0203 	bic.w	r2, r3, #3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	499d      	ldr	r1, [pc, #628]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ffc:	4b98      	ldr	r3, [pc, #608]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	f023 020c 	bic.w	r2, r3, #12
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	4995      	ldr	r1, [pc, #596]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800601e:	4b90      	ldr	r3, [pc, #576]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006024:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	498c      	ldr	r1, [pc, #560]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006040:	4b87      	ldr	r3, [pc, #540]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	4984      	ldr	r1, [pc, #528]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006062:	4b7f      	ldr	r3, [pc, #508]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	497b      	ldr	r1, [pc, #492]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006084:	4b76      	ldr	r3, [pc, #472]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	4973      	ldr	r1, [pc, #460]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060a6:	4b6e      	ldr	r3, [pc, #440]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	496a      	ldr	r1, [pc, #424]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060c8:	4b65      	ldr	r3, [pc, #404]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	4962      	ldr	r1, [pc, #392]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060ea:	4b5d      	ldr	r3, [pc, #372]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	4959      	ldr	r1, [pc, #356]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800610c:	4b54      	ldr	r3, [pc, #336]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	4951      	ldr	r1, [pc, #324]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612a:	2b00      	cmp	r3, #0
 800612c:	d015      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800612e:	4b4c      	ldr	r3, [pc, #304]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006134:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4948      	ldr	r1, [pc, #288]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614c:	d105      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800614e:	4b44      	ldr	r3, [pc, #272]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	4a43      	ldr	r2, [pc, #268]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006158:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006162:	2b00      	cmp	r3, #0
 8006164:	d015      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006166:	4b3e      	ldr	r3, [pc, #248]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	493a      	ldr	r1, [pc, #232]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006184:	d105      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006186:	4b36      	ldr	r3, [pc, #216]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	4a35      	ldr	r2, [pc, #212]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006190:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d015      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800619e:	4b30      	ldr	r3, [pc, #192]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ac:	492c      	ldr	r1, [pc, #176]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061bc:	d105      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061be:	4b28      	ldr	r3, [pc, #160]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	4a27      	ldr	r2, [pc, #156]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d015      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061d6:	4b22      	ldr	r3, [pc, #136]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	491e      	ldr	r1, [pc, #120]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f4:	d105      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	4a19      	ldr	r2, [pc, #100]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006200:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d015      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800620e:	4b14      	ldr	r3, [pc, #80]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621c:	4910      	ldr	r1, [pc, #64]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800622c:	d105      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800622e:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	4a0b      	ldr	r2, [pc, #44]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006238:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d018      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006246:	4b06      	ldr	r3, [pc, #24]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	4902      	ldr	r1, [pc, #8]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	e001      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006260:	40021000 	.word	0x40021000
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800626a:	d105      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800626c:	4b21      	ldr	r3, [pc, #132]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4a20      	ldr	r2, [pc, #128]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006276:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d015      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006284:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	4918      	ldr	r1, [pc, #96]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a2:	d105      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062a4:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80062aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d015      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80062be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ca:	490a      	ldr	r1, [pc, #40]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062da:	d105      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	4a04      	ldr	r2, [pc, #16]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80062e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80062e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40021000 	.word	0x40021000

080062f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e049      	b.n	800639e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fc fc2a 	bl	8002b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3304      	adds	r3, #4
 8006334:	4619      	mov	r1, r3
 8006336:	4610      	mov	r0, r2
 8006338:	f000 fc60 	bl	8006bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e049      	b.n	800644c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d106      	bne.n	80063d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f841 	bl	8006454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f000 fc09 	bl	8006bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b02      	cmp	r3, #2
 800647c:	d122      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b02      	cmp	r3, #2
 800648a:	d11b      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0202 	mvn.w	r2, #2
 8006494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fb88 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 80064b0:	e005      	b.n	80064be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fb7a 	bl	8006bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fb8b 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d122      	bne.n	8006518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d11b      	bne.n	8006518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0204 	mvn.w	r2, #4
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fb5e 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fb50 	bl	8006bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fb61 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b08      	cmp	r3, #8
 8006524:	d122      	bne.n	800656c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d11b      	bne.n	800656c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0208 	mvn.w	r2, #8
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2204      	movs	r2, #4
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fb34 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fb26 	bl	8006bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fb37 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0310 	and.w	r3, r3, #16
 8006576:	2b10      	cmp	r3, #16
 8006578:	d122      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b10      	cmp	r3, #16
 8006586:	d11b      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0210 	mvn.w	r2, #16
 8006590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2208      	movs	r2, #8
 8006596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fb0a 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fafc 	bl	8006bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fb0d 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d10e      	bne.n	80065ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d107      	bne.n	80065ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0201 	mvn.w	r2, #1
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fad6 	bl	8006b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	d10e      	bne.n	8006618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d107      	bne.n	8006618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 ffee 	bl	80075f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006626:	d10e      	bne.n	8006646 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006632:	2b80      	cmp	r3, #128	; 0x80
 8006634:	d107      	bne.n	8006646 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800663e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 ffe1 	bl	8007608 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b40      	cmp	r3, #64	; 0x40
 8006652:	d10e      	bne.n	8006672 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d107      	bne.n	8006672 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800666a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fabb 	bl	8006be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b20      	cmp	r3, #32
 800667e:	d10e      	bne.n	800669e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b20      	cmp	r3, #32
 800668c:	d107      	bne.n	800669e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f06f 0220 	mvn.w	r2, #32
 8006696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 ffa1 	bl	80075e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ac:	d10f      	bne.n	80066ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066bc:	d107      	bne.n	80066ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80066c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 ffa7 	bl	800761c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066dc:	d10f      	bne.n	80066fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ec:	d107      	bne.n	80066fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 ff99 	bl	8007630 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800670c:	d10f      	bne.n	800672e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800671c:	d107      	bne.n	800672e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 ff8b 	bl	8007644 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800673c:	d10f      	bne.n	800675e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800674c:	d107      	bne.n	800675e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 ff7d 	bl	8007658 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006782:	2302      	movs	r3, #2
 8006784:	e0ff      	b.n	8006986 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b14      	cmp	r3, #20
 8006792:	f200 80f0 	bhi.w	8006976 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006796:	a201      	add	r2, pc, #4	; (adr r2, 800679c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067f1 	.word	0x080067f1
 80067a0:	08006977 	.word	0x08006977
 80067a4:	08006977 	.word	0x08006977
 80067a8:	08006977 	.word	0x08006977
 80067ac:	08006831 	.word	0x08006831
 80067b0:	08006977 	.word	0x08006977
 80067b4:	08006977 	.word	0x08006977
 80067b8:	08006977 	.word	0x08006977
 80067bc:	08006873 	.word	0x08006873
 80067c0:	08006977 	.word	0x08006977
 80067c4:	08006977 	.word	0x08006977
 80067c8:	08006977 	.word	0x08006977
 80067cc:	080068b3 	.word	0x080068b3
 80067d0:	08006977 	.word	0x08006977
 80067d4:	08006977 	.word	0x08006977
 80067d8:	08006977 	.word	0x08006977
 80067dc:	080068f5 	.word	0x080068f5
 80067e0:	08006977 	.word	0x08006977
 80067e4:	08006977 	.word	0x08006977
 80067e8:	08006977 	.word	0x08006977
 80067ec:	08006935 	.word	0x08006935
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fa9e 	bl	8006d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0208 	orr.w	r2, r2, #8
 800680a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0204 	bic.w	r2, r2, #4
 800681a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6999      	ldr	r1, [r3, #24]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	619a      	str	r2, [r3, #24]
      break;
 800682e:	e0a5      	b.n	800697c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fb18 	bl	8006e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699a      	ldr	r2, [r3, #24]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800684a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6999      	ldr	r1, [r3, #24]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	021a      	lsls	r2, r3, #8
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	619a      	str	r2, [r3, #24]
      break;
 8006870:	e084      	b.n	800697c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fb8b 	bl	8006f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0208 	orr.w	r2, r2, #8
 800688c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69da      	ldr	r2, [r3, #28]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0204 	bic.w	r2, r2, #4
 800689c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69d9      	ldr	r1, [r3, #28]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	61da      	str	r2, [r3, #28]
      break;
 80068b0:	e064      	b.n	800697c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fbfd 	bl	80070b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69d9      	ldr	r1, [r3, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	021a      	lsls	r2, r3, #8
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	61da      	str	r2, [r3, #28]
      break;
 80068f2:	e043      	b.n	800697c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fc70 	bl	80071e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0208 	orr.w	r2, r2, #8
 800690e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0204 	bic.w	r2, r2, #4
 800691e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006932:	e023      	b.n	800697c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fcba 	bl	80072b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800694e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	021a      	lsls	r2, r3, #8
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006974:	e002      	b.n	800697c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	75fb      	strb	r3, [r7, #23]
      break;
 800697a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006984:	7dfb      	ldrb	r3, [r7, #23]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop

08006990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_TIM_ConfigClockSource+0x1c>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e0e6      	b.n	8006b7a <HAL_TIM_ConfigClockSource+0x1ea>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80069ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a67      	ldr	r2, [pc, #412]	; (8006b84 <HAL_TIM_ConfigClockSource+0x1f4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	f000 80b1 	beq.w	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 80069ec:	4a65      	ldr	r2, [pc, #404]	; (8006b84 <HAL_TIM_ConfigClockSource+0x1f4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	f200 80b6 	bhi.w	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 80069f4:	4a64      	ldr	r2, [pc, #400]	; (8006b88 <HAL_TIM_ConfigClockSource+0x1f8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	f000 80a9 	beq.w	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 80069fc:	4a62      	ldr	r2, [pc, #392]	; (8006b88 <HAL_TIM_ConfigClockSource+0x1f8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	f200 80ae 	bhi.w	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a04:	4a61      	ldr	r2, [pc, #388]	; (8006b8c <HAL_TIM_ConfigClockSource+0x1fc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	f000 80a1 	beq.w	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 8006a0c:	4a5f      	ldr	r2, [pc, #380]	; (8006b8c <HAL_TIM_ConfigClockSource+0x1fc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	f200 80a6 	bhi.w	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a14:	4a5e      	ldr	r2, [pc, #376]	; (8006b90 <HAL_TIM_ConfigClockSource+0x200>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	f000 8099 	beq.w	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 8006a1c:	4a5c      	ldr	r2, [pc, #368]	; (8006b90 <HAL_TIM_ConfigClockSource+0x200>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	f200 809e 	bhi.w	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a24:	4a5b      	ldr	r2, [pc, #364]	; (8006b94 <HAL_TIM_ConfigClockSource+0x204>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	f000 8091 	beq.w	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 8006a2c:	4a59      	ldr	r2, [pc, #356]	; (8006b94 <HAL_TIM_ConfigClockSource+0x204>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	f200 8096 	bhi.w	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a38:	f000 8089 	beq.w	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 8006a3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a40:	f200 808e 	bhi.w	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a48:	d03e      	beq.n	8006ac8 <HAL_TIM_ConfigClockSource+0x138>
 8006a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4e:	f200 8087 	bhi.w	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a56:	f000 8086 	beq.w	8006b66 <HAL_TIM_ConfigClockSource+0x1d6>
 8006a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5e:	d87f      	bhi.n	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a60:	2b70      	cmp	r3, #112	; 0x70
 8006a62:	d01a      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x10a>
 8006a64:	2b70      	cmp	r3, #112	; 0x70
 8006a66:	d87b      	bhi.n	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a68:	2b60      	cmp	r3, #96	; 0x60
 8006a6a:	d050      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x17e>
 8006a6c:	2b60      	cmp	r3, #96	; 0x60
 8006a6e:	d877      	bhi.n	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a70:	2b50      	cmp	r3, #80	; 0x50
 8006a72:	d03c      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x15e>
 8006a74:	2b50      	cmp	r3, #80	; 0x50
 8006a76:	d873      	bhi.n	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	d058      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0x19e>
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	d86f      	bhi.n	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a80:	2b30      	cmp	r3, #48	; 0x30
 8006a82:	d064      	beq.n	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d86b      	bhi.n	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d060      	beq.n	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d867      	bhi.n	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d05c      	beq.n	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d05a      	beq.n	8006b4e <HAL_TIM_ConfigClockSource+0x1be>
 8006a98:	e062      	b.n	8006b60 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6899      	ldr	r1, [r3, #8]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f000 fceb 	bl	8007484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006abc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	609a      	str	r2, [r3, #8]
      break;
 8006ac6:	e04f      	b.n	8006b68 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	6899      	ldr	r1, [r3, #8]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f000 fcd4 	bl	8007484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aea:	609a      	str	r2, [r3, #8]
      break;
 8006aec:	e03c      	b.n	8006b68 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6859      	ldr	r1, [r3, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	461a      	mov	r2, r3
 8006afc:	f000 fc46 	bl	800738c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2150      	movs	r1, #80	; 0x50
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fc9f 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 8006b0c:	e02c      	b.n	8006b68 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6818      	ldr	r0, [r3, #0]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	6859      	ldr	r1, [r3, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f000 fc65 	bl	80073ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2160      	movs	r1, #96	; 0x60
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fc8f 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 8006b2c:	e01c      	b.n	8006b68 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6859      	ldr	r1, [r3, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f000 fc26 	bl	800738c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2140      	movs	r1, #64	; 0x40
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fc7f 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 8006b4c:	e00c      	b.n	8006b68 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f000 fc76 	bl	800744a <TIM_ITRx_SetConfig>
      break;
 8006b5e:	e003      	b.n	8006b68 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]
      break;
 8006b64:	e000      	b.n	8006b68 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8006b66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	00100070 	.word	0x00100070
 8006b88:	00100050 	.word	0x00100050
 8006b8c:	00100040 	.word	0x00100040
 8006b90:	00100030 	.word	0x00100030
 8006b94:	00100020 	.word	0x00100020

08006b98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a42      	ldr	r2, [pc, #264]	; (8006d18 <TIM_Base_SetConfig+0x11c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1a:	d00f      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a3f      	ldr	r2, [pc, #252]	; (8006d1c <TIM_Base_SetConfig+0x120>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00b      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a3e      	ldr	r2, [pc, #248]	; (8006d20 <TIM_Base_SetConfig+0x124>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d007      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a3d      	ldr	r2, [pc, #244]	; (8006d24 <TIM_Base_SetConfig+0x128>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_Base_SetConfig+0x40>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a3c      	ldr	r2, [pc, #240]	; (8006d28 <TIM_Base_SetConfig+0x12c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d108      	bne.n	8006c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a31      	ldr	r2, [pc, #196]	; (8006d18 <TIM_Base_SetConfig+0x11c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d01f      	beq.n	8006c96 <TIM_Base_SetConfig+0x9a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5c:	d01b      	beq.n	8006c96 <TIM_Base_SetConfig+0x9a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a2e      	ldr	r2, [pc, #184]	; (8006d1c <TIM_Base_SetConfig+0x120>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d017      	beq.n	8006c96 <TIM_Base_SetConfig+0x9a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2d      	ldr	r2, [pc, #180]	; (8006d20 <TIM_Base_SetConfig+0x124>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d013      	beq.n	8006c96 <TIM_Base_SetConfig+0x9a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a2c      	ldr	r2, [pc, #176]	; (8006d24 <TIM_Base_SetConfig+0x128>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00f      	beq.n	8006c96 <TIM_Base_SetConfig+0x9a>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a2c      	ldr	r2, [pc, #176]	; (8006d2c <TIM_Base_SetConfig+0x130>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00b      	beq.n	8006c96 <TIM_Base_SetConfig+0x9a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a2b      	ldr	r2, [pc, #172]	; (8006d30 <TIM_Base_SetConfig+0x134>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d007      	beq.n	8006c96 <TIM_Base_SetConfig+0x9a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <TIM_Base_SetConfig+0x138>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d003      	beq.n	8006c96 <TIM_Base_SetConfig+0x9a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a25      	ldr	r2, [pc, #148]	; (8006d28 <TIM_Base_SetConfig+0x12c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d108      	bne.n	8006ca8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a12      	ldr	r2, [pc, #72]	; (8006d18 <TIM_Base_SetConfig+0x11c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d013      	beq.n	8006cfc <TIM_Base_SetConfig+0x100>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a13      	ldr	r2, [pc, #76]	; (8006d24 <TIM_Base_SetConfig+0x128>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00f      	beq.n	8006cfc <TIM_Base_SetConfig+0x100>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <TIM_Base_SetConfig+0x130>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00b      	beq.n	8006cfc <TIM_Base_SetConfig+0x100>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a12      	ldr	r2, [pc, #72]	; (8006d30 <TIM_Base_SetConfig+0x134>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d007      	beq.n	8006cfc <TIM_Base_SetConfig+0x100>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <TIM_Base_SetConfig+0x138>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_Base_SetConfig+0x100>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a0c      	ldr	r2, [pc, #48]	; (8006d28 <TIM_Base_SetConfig+0x12c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d103      	bne.n	8006d04 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	615a      	str	r2, [r3, #20]
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40012c00 	.word	0x40012c00
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800
 8006d24:	40013400 	.word	0x40013400
 8006d28:	40015000 	.word	0x40015000
 8006d2c:	40014000 	.word	0x40014000
 8006d30:	40014400 	.word	0x40014400
 8006d34:	40014800 	.word	0x40014800

08006d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0303 	bic.w	r3, r3, #3
 8006d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f023 0302 	bic.w	r3, r3, #2
 8006d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a30      	ldr	r2, [pc, #192]	; (8006e54 <TIM_OC1_SetConfig+0x11c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d013      	beq.n	8006dc0 <TIM_OC1_SetConfig+0x88>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a2f      	ldr	r2, [pc, #188]	; (8006e58 <TIM_OC1_SetConfig+0x120>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00f      	beq.n	8006dc0 <TIM_OC1_SetConfig+0x88>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a2e      	ldr	r2, [pc, #184]	; (8006e5c <TIM_OC1_SetConfig+0x124>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00b      	beq.n	8006dc0 <TIM_OC1_SetConfig+0x88>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a2d      	ldr	r2, [pc, #180]	; (8006e60 <TIM_OC1_SetConfig+0x128>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d007      	beq.n	8006dc0 <TIM_OC1_SetConfig+0x88>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a2c      	ldr	r2, [pc, #176]	; (8006e64 <TIM_OC1_SetConfig+0x12c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d003      	beq.n	8006dc0 <TIM_OC1_SetConfig+0x88>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a2b      	ldr	r2, [pc, #172]	; (8006e68 <TIM_OC1_SetConfig+0x130>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d10c      	bne.n	8006dda <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f023 0308 	bic.w	r3, r3, #8
 8006dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f023 0304 	bic.w	r3, r3, #4
 8006dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <TIM_OC1_SetConfig+0x11c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <TIM_OC1_SetConfig+0xd2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1c      	ldr	r2, [pc, #112]	; (8006e58 <TIM_OC1_SetConfig+0x120>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00f      	beq.n	8006e0a <TIM_OC1_SetConfig+0xd2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a1b      	ldr	r2, [pc, #108]	; (8006e5c <TIM_OC1_SetConfig+0x124>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00b      	beq.n	8006e0a <TIM_OC1_SetConfig+0xd2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1a      	ldr	r2, [pc, #104]	; (8006e60 <TIM_OC1_SetConfig+0x128>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <TIM_OC1_SetConfig+0xd2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a19      	ldr	r2, [pc, #100]	; (8006e64 <TIM_OC1_SetConfig+0x12c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d003      	beq.n	8006e0a <TIM_OC1_SetConfig+0xd2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <TIM_OC1_SetConfig+0x130>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d111      	bne.n	8006e2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	621a      	str	r2, [r3, #32]
}
 8006e48:	bf00      	nop
 8006e4a:	371c      	adds	r7, #28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	40012c00 	.word	0x40012c00
 8006e58:	40013400 	.word	0x40013400
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40014400 	.word	0x40014400
 8006e64:	40014800 	.word	0x40014800
 8006e68:	40015000 	.word	0x40015000

08006e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f023 0210 	bic.w	r2, r3, #16
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f023 0320 	bic.w	r3, r3, #32
 8006eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a2c      	ldr	r2, [pc, #176]	; (8006f7c <TIM_OC2_SetConfig+0x110>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_OC2_SetConfig+0x74>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a2b      	ldr	r2, [pc, #172]	; (8006f80 <TIM_OC2_SetConfig+0x114>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_OC2_SetConfig+0x74>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a2a      	ldr	r2, [pc, #168]	; (8006f84 <TIM_OC2_SetConfig+0x118>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d10d      	bne.n	8006efc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	011b      	lsls	r3, r3, #4
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a1f      	ldr	r2, [pc, #124]	; (8006f7c <TIM_OC2_SetConfig+0x110>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d013      	beq.n	8006f2c <TIM_OC2_SetConfig+0xc0>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a1e      	ldr	r2, [pc, #120]	; (8006f80 <TIM_OC2_SetConfig+0x114>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00f      	beq.n	8006f2c <TIM_OC2_SetConfig+0xc0>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a1e      	ldr	r2, [pc, #120]	; (8006f88 <TIM_OC2_SetConfig+0x11c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00b      	beq.n	8006f2c <TIM_OC2_SetConfig+0xc0>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <TIM_OC2_SetConfig+0x120>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_OC2_SetConfig+0xc0>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a1c      	ldr	r2, [pc, #112]	; (8006f90 <TIM_OC2_SetConfig+0x124>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_OC2_SetConfig+0xc0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a17      	ldr	r2, [pc, #92]	; (8006f84 <TIM_OC2_SetConfig+0x118>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d113      	bne.n	8006f54 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40012c00 	.word	0x40012c00
 8006f80:	40013400 	.word	0x40013400
 8006f84:	40015000 	.word	0x40015000
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40014400 	.word	0x40014400
 8006f90:	40014800 	.word	0x40014800

08006f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a2b      	ldr	r2, [pc, #172]	; (80070a0 <TIM_OC3_SetConfig+0x10c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d007      	beq.n	8007006 <TIM_OC3_SetConfig+0x72>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a2a      	ldr	r2, [pc, #168]	; (80070a4 <TIM_OC3_SetConfig+0x110>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_OC3_SetConfig+0x72>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a29      	ldr	r2, [pc, #164]	; (80070a8 <TIM_OC3_SetConfig+0x114>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d10d      	bne.n	8007022 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800700c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	021b      	lsls	r3, r3, #8
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a1e      	ldr	r2, [pc, #120]	; (80070a0 <TIM_OC3_SetConfig+0x10c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <TIM_OC3_SetConfig+0xbe>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a1d      	ldr	r2, [pc, #116]	; (80070a4 <TIM_OC3_SetConfig+0x110>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00f      	beq.n	8007052 <TIM_OC3_SetConfig+0xbe>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a1d      	ldr	r2, [pc, #116]	; (80070ac <TIM_OC3_SetConfig+0x118>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00b      	beq.n	8007052 <TIM_OC3_SetConfig+0xbe>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a1c      	ldr	r2, [pc, #112]	; (80070b0 <TIM_OC3_SetConfig+0x11c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d007      	beq.n	8007052 <TIM_OC3_SetConfig+0xbe>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <TIM_OC3_SetConfig+0x120>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d003      	beq.n	8007052 <TIM_OC3_SetConfig+0xbe>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a16      	ldr	r2, [pc, #88]	; (80070a8 <TIM_OC3_SetConfig+0x114>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d113      	bne.n	800707a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	621a      	str	r2, [r3, #32]
}
 8007094:	bf00      	nop
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40013400 	.word	0x40013400
 80070a8:	40015000 	.word	0x40015000
 80070ac:	40014000 	.word	0x40014000
 80070b0:	40014400 	.word	0x40014400
 80070b4:	40014800 	.word	0x40014800

080070b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	031b      	lsls	r3, r3, #12
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a2c      	ldr	r2, [pc, #176]	; (80071c8 <TIM_OC4_SetConfig+0x110>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_OC4_SetConfig+0x74>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a2b      	ldr	r2, [pc, #172]	; (80071cc <TIM_OC4_SetConfig+0x114>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_OC4_SetConfig+0x74>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a2a      	ldr	r2, [pc, #168]	; (80071d0 <TIM_OC4_SetConfig+0x118>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d10d      	bne.n	8007148 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	031b      	lsls	r3, r3, #12
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007146:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <TIM_OC4_SetConfig+0x110>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d013      	beq.n	8007178 <TIM_OC4_SetConfig+0xc0>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <TIM_OC4_SetConfig+0x114>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00f      	beq.n	8007178 <TIM_OC4_SetConfig+0xc0>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a1e      	ldr	r2, [pc, #120]	; (80071d4 <TIM_OC4_SetConfig+0x11c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00b      	beq.n	8007178 <TIM_OC4_SetConfig+0xc0>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <TIM_OC4_SetConfig+0x120>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d007      	beq.n	8007178 <TIM_OC4_SetConfig+0xc0>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a1c      	ldr	r2, [pc, #112]	; (80071dc <TIM_OC4_SetConfig+0x124>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_OC4_SetConfig+0xc0>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a17      	ldr	r2, [pc, #92]	; (80071d0 <TIM_OC4_SetConfig+0x118>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d113      	bne.n	80071a0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007186:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	019b      	lsls	r3, r3, #6
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	019b      	lsls	r3, r3, #6
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40012c00 	.word	0x40012c00
 80071cc:	40013400 	.word	0x40013400
 80071d0:	40015000 	.word	0x40015000
 80071d4:	40014000 	.word	0x40014000
 80071d8:	40014400 	.word	0x40014400
 80071dc:	40014800 	.word	0x40014800

080071e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800720e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007224:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a19      	ldr	r2, [pc, #100]	; (800729c <TIM_OC5_SetConfig+0xbc>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d013      	beq.n	8007262 <TIM_OC5_SetConfig+0x82>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <TIM_OC5_SetConfig+0xc0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00f      	beq.n	8007262 <TIM_OC5_SetConfig+0x82>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a17      	ldr	r2, [pc, #92]	; (80072a4 <TIM_OC5_SetConfig+0xc4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00b      	beq.n	8007262 <TIM_OC5_SetConfig+0x82>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a16      	ldr	r2, [pc, #88]	; (80072a8 <TIM_OC5_SetConfig+0xc8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d007      	beq.n	8007262 <TIM_OC5_SetConfig+0x82>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a15      	ldr	r2, [pc, #84]	; (80072ac <TIM_OC5_SetConfig+0xcc>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d003      	beq.n	8007262 <TIM_OC5_SetConfig+0x82>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a14      	ldr	r2, [pc, #80]	; (80072b0 <TIM_OC5_SetConfig+0xd0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d109      	bne.n	8007276 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	621a      	str	r2, [r3, #32]
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40013400 	.word	0x40013400
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800
 80072b0:	40015000 	.word	0x40015000

080072b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	051b      	lsls	r3, r3, #20
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a1a      	ldr	r2, [pc, #104]	; (8007374 <TIM_OC6_SetConfig+0xc0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d013      	beq.n	8007338 <TIM_OC6_SetConfig+0x84>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a19      	ldr	r2, [pc, #100]	; (8007378 <TIM_OC6_SetConfig+0xc4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00f      	beq.n	8007338 <TIM_OC6_SetConfig+0x84>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a18      	ldr	r2, [pc, #96]	; (800737c <TIM_OC6_SetConfig+0xc8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00b      	beq.n	8007338 <TIM_OC6_SetConfig+0x84>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a17      	ldr	r2, [pc, #92]	; (8007380 <TIM_OC6_SetConfig+0xcc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d007      	beq.n	8007338 <TIM_OC6_SetConfig+0x84>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a16      	ldr	r2, [pc, #88]	; (8007384 <TIM_OC6_SetConfig+0xd0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d003      	beq.n	8007338 <TIM_OC6_SetConfig+0x84>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a15      	ldr	r2, [pc, #84]	; (8007388 <TIM_OC6_SetConfig+0xd4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d109      	bne.n	800734c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800733e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	029b      	lsls	r3, r3, #10
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	621a      	str	r2, [r3, #32]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40012c00 	.word	0x40012c00
 8007378:	40013400 	.word	0x40013400
 800737c:	40014000 	.word	0x40014000
 8007380:	40014400 	.word	0x40014400
 8007384:	40014800 	.word	0x40014800
 8007388:	40015000 	.word	0x40015000

0800738c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0201 	bic.w	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f023 030a 	bic.w	r3, r3, #10
 80073c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	621a      	str	r2, [r3, #32]
}
 80073de:	bf00      	nop
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f023 0210 	bic.w	r2, r3, #16
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	031b      	lsls	r3, r3, #12
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	f043 0307 	orr.w	r3, r3, #7
 8007470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	609a      	str	r2, [r3, #8]
}
 8007478:	bf00      	nop
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800749e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	021a      	lsls	r2, r3, #8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	431a      	orrs	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	609a      	str	r2, [r3, #8]
}
 80074b8:	bf00      	nop
 80074ba:	371c      	adds	r7, #28
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074d8:	2302      	movs	r3, #2
 80074da:	e06f      	b.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a31      	ldr	r2, [pc, #196]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d009      	beq.n	800751a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a30      	ldr	r2, [pc, #192]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d004      	beq.n	800751a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a2e      	ldr	r2, [pc, #184]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d108      	bne.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007520:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d01d      	beq.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755c:	d018      	beq.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1c      	ldr	r2, [pc, #112]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d013      	beq.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1a      	ldr	r2, [pc, #104]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00e      	beq.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a15      	ldr	r2, [pc, #84]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d009      	beq.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a16      	ldr	r2, [pc, #88]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d004      	beq.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10c      	bne.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007596:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	40012c00 	.word	0x40012c00
 80075cc:	40013400 	.word	0x40013400
 80075d0:	40015000 	.word	0x40015000
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800
 80075dc:	40014000 	.word	0x40014000

080075e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e042      	b.n	8007704 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007684:	2b00      	cmp	r3, #0
 8007686:	d106      	bne.n	8007696 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7fb faeb 	bl	8002c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2224      	movs	r2, #36	; 0x24
 800769a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0201 	bic.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fc62 	bl	8007f78 <UART_SetConfig>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e022      	b.n	8007704 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 ff52 	bl	8008570 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 ffd9 	bl	80086b4 <UART_CheckIdleState>
 8007702:	4603      	mov	r3, r0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800770c:	b480      	push	{r7}
 800770e:	b091      	sub	sp, #68	; 0x44
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007720:	2b20      	cmp	r3, #32
 8007722:	f040 808c 	bne.w	800783e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <HAL_UART_Transmit_IT+0x26>
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e084      	b.n	8007840 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_UART_Transmit_IT+0x38>
 8007740:	2302      	movs	r3, #2
 8007742:	e07d      	b.n	8007840 <HAL_UART_Transmit_IT+0x134>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	88fa      	ldrh	r2, [r7, #6]
 800775e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2221      	movs	r2, #33	; 0x21
 8007774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007780:	d12e      	bne.n	80077e0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778a:	d107      	bne.n	800779c <HAL_UART_Transmit_IT+0x90>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d103      	bne.n	800779c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4a2d      	ldr	r2, [pc, #180]	; (800784c <HAL_UART_Transmit_IT+0x140>)
 8007798:	675a      	str	r2, [r3, #116]	; 0x74
 800779a:	e002      	b.n	80077a2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4a2c      	ldr	r2, [pc, #176]	; (8007850 <HAL_UART_Transmit_IT+0x144>)
 80077a0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ca:	637a      	str	r2, [r7, #52]	; 0x34
 80077cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e5      	bne.n	80077aa <HAL_UART_Transmit_IT+0x9e>
 80077de:	e02c      	b.n	800783a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e8:	d107      	bne.n	80077fa <HAL_UART_Transmit_IT+0xee>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d103      	bne.n	80077fa <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4a17      	ldr	r2, [pc, #92]	; (8007854 <HAL_UART_Transmit_IT+0x148>)
 80077f6:	675a      	str	r2, [r3, #116]	; 0x74
 80077f8:	e002      	b.n	8007800 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4a16      	ldr	r2, [pc, #88]	; (8007858 <HAL_UART_Transmit_IT+0x14c>)
 80077fe:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	613b      	str	r3, [r7, #16]
   return(result);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007826:	623b      	str	r3, [r7, #32]
 8007828:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	69f9      	ldr	r1, [r7, #28]
 800782c:	6a3a      	ldr	r2, [r7, #32]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	61bb      	str	r3, [r7, #24]
   return(result);
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e6      	bne.n	8007808 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	e000      	b.n	8007840 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800783e:	2302      	movs	r3, #2
  }
}
 8007840:	4618      	mov	r0, r3
 8007842:	3744      	adds	r7, #68	; 0x44
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	08008e83 	.word	0x08008e83
 8007850:	08008da3 	.word	0x08008da3
 8007854:	08008ce1 	.word	0x08008ce1
 8007858:	08008c29 	.word	0x08008c29

0800785c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	; 0x28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007870:	2b20      	cmp	r3, #32
 8007872:	d142      	bne.n	80078fa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <HAL_UART_Receive_IT+0x24>
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e03b      	b.n	80078fc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_UART_Receive_IT+0x36>
 800788e:	2302      	movs	r3, #2
 8007890:	e034      	b.n	80078fc <HAL_UART_Receive_IT+0xa0>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a17      	ldr	r2, [pc, #92]	; (8007904 <HAL_UART_Receive_IT+0xa8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d01f      	beq.n	80078ea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d018      	beq.n	80078ea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	613b      	str	r3, [r7, #16]
   return(result);
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	623b      	str	r3, [r7, #32]
 80078d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	69f9      	ldr	r1, [r7, #28]
 80078dc:	6a3a      	ldr	r2, [r7, #32]
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e6      	bne.n	80078b8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	461a      	mov	r2, r3
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fff3 	bl	80088dc <UART_Start_Receive_IT>
 80078f6:	4603      	mov	r3, r0
 80078f8:	e000      	b.n	80078fc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80078fa:	2302      	movs	r3, #2
  }
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3728      	adds	r7, #40	; 0x28
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40008000 	.word	0x40008000

08007908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b0ba      	sub	sp, #232	; 0xe8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800792e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007932:	f640 030f 	movw	r3, #2063	; 0x80f
 8007936:	4013      	ands	r3, r2
 8007938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800793c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11b      	bne.n	800797c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d015      	beq.n	800797c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d009      	beq.n	800797c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 82d6 	beq.w	8007f1e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
      }
      return;
 800797a:	e2d0      	b.n	8007f1e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800797c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 811f 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007986:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800798a:	4b8b      	ldr	r3, [pc, #556]	; (8007bb8 <HAL_UART_IRQHandler+0x2b0>)
 800798c:	4013      	ands	r3, r2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007996:	4b89      	ldr	r3, [pc, #548]	; (8007bbc <HAL_UART_IRQHandler+0x2b4>)
 8007998:	4013      	ands	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8112 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d011      	beq.n	80079d0 <HAL_UART_IRQHandler+0xc8>
 80079ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2201      	movs	r2, #1
 80079be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079c6:	f043 0201 	orr.w	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d011      	beq.n	8007a00 <HAL_UART_IRQHandler+0xf8>
 80079dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2202      	movs	r2, #2
 80079ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f6:	f043 0204 	orr.w	r2, r3, #4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d011      	beq.n	8007a30 <HAL_UART_IRQHandler+0x128>
 8007a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a26:	f043 0202 	orr.w	r2, r3, #2
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d017      	beq.n	8007a6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a4c:	4b5a      	ldr	r3, [pc, #360]	; (8007bb8 <HAL_UART_IRQHandler+0x2b0>)
 8007a4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a62:	f043 0208 	orr.w	r2, r3, #8
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d012      	beq.n	8007a9e <HAL_UART_IRQHandler+0x196>
 8007a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00c      	beq.n	8007a9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a94:	f043 0220 	orr.w	r2, r3, #32
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 823c 	beq.w	8007f22 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d013      	beq.n	8007ade <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d105      	bne.n	8007ace <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d005      	beq.n	8007b02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007afa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d04f      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 f814 	bl	8008b30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b40      	cmp	r3, #64	; 0x40
 8007b14:	d141      	bne.n	8007b9a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1d9      	bne.n	8007b16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d013      	beq.n	8007b92 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b6e:	4a14      	ldr	r2, [pc, #80]	; (8007bc0 <HAL_UART_IRQHandler+0x2b8>)
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fc fceb 	bl	8004552 <HAL_DMA_Abort_IT>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d017      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	e00f      	b.n	8007bb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f9da 	bl	8007f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b98:	e00b      	b.n	8007bb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f9d6 	bl	8007f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba0:	e007      	b.n	8007bb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f9d2 	bl	8007f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007bb0:	e1b7      	b.n	8007f22 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb2:	bf00      	nop
    return;
 8007bb4:	e1b5      	b.n	8007f22 <HAL_UART_IRQHandler+0x61a>
 8007bb6:	bf00      	nop
 8007bb8:	10000001 	.word	0x10000001
 8007bbc:	04000120 	.word	0x04000120
 8007bc0:	08008bfd 	.word	0x08008bfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f040 814a 	bne.w	8007e62 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd2:	f003 0310 	and.w	r3, r3, #16
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8143 	beq.w	8007e62 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 813c 	beq.w	8007e62 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2210      	movs	r2, #16
 8007bf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfc:	2b40      	cmp	r3, #64	; 0x40
 8007bfe:	f040 80b5 	bne.w	8007d6c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8187 	beq.w	8007f26 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c22:	429a      	cmp	r2, r3
 8007c24:	f080 817f 	bcs.w	8007f26 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 8086 	bne.w	8007d50 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1da      	bne.n	8007c44 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e1      	bne.n	8007c8e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3308      	adds	r3, #8
 8007cd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e3      	bne.n	8007cca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d20:	f023 0310 	bic.w	r3, r3, #16
 8007d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d32:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d3a:	e841 2300 	strex	r3, r2, [r1]
 8007d3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1e4      	bne.n	8007d10 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fc fba8 	bl	80044a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f8fb 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d6a:	e0dc      	b.n	8007f26 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80ce 	beq.w	8007f2a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80c9 	beq.w	8007f2a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dba:	647b      	str	r3, [r7, #68]	; 0x44
 8007dbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e4      	bne.n	8007d98 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007de4:	f023 0301 	bic.w	r3, r3, #1
 8007de8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007df6:	633a      	str	r2, [r7, #48]	; 0x30
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e1      	bne.n	8007dce <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0310 	bic.w	r3, r3, #16
 8007e32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e4      	bne.n	8007e1e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f880 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e60:	e063      	b.n	8007f2a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00e      	beq.n	8007e8c <HAL_UART_IRQHandler+0x584>
 8007e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d008      	beq.n	8007e8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 fcf9 	bl	800987c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e8a:	e051      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d014      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d105      	bne.n	8007eb0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d008      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d03a      	beq.n	8007f2e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
    }
    return;
 8007ec0:	e035      	b.n	8007f2e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x5da>
 8007ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f001 f846 	bl	8008f6c <UART_EndTransmit_IT>
    return;
 8007ee0:	e026      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d009      	beq.n	8007f02 <HAL_UART_IRQHandler+0x5fa>
 8007eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 fcd2 	bl	80098a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f00:	e016      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d010      	beq.n	8007f30 <HAL_UART_IRQHandler+0x628>
 8007f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	da0c      	bge.n	8007f30 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 fcba 	bl	8009890 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f1c:	e008      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
      return;
 8007f1e:	bf00      	nop
 8007f20:	e006      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
    return;
 8007f22:	bf00      	nop
 8007f24:	e004      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
      return;
 8007f26:	bf00      	nop
 8007f28:	e002      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
      return;
 8007f2a:	bf00      	nop
 8007f2c:	e000      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
    return;
 8007f2e:	bf00      	nop
  }
}
 8007f30:	37e8      	adds	r7, #232	; 0xe8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop

08007f38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f7c:	b08c      	sub	sp, #48	; 0x30
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4baa      	ldr	r3, [pc, #680]	; (8008250 <UART_SetConfig+0x2d8>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	6812      	ldr	r2, [r2, #0]
 8007fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a9f      	ldr	r2, [pc, #636]	; (8008254 <UART_SetConfig+0x2dc>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d004      	beq.n	8007fe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007fee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	6812      	ldr	r2, [r2, #0]
 8007ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	f023 010f 	bic.w	r1, r3, #15
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a90      	ldr	r2, [pc, #576]	; (8008258 <UART_SetConfig+0x2e0>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d125      	bne.n	8008068 <UART_SetConfig+0xf0>
 800801c:	4b8f      	ldr	r3, [pc, #572]	; (800825c <UART_SetConfig+0x2e4>)
 800801e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	2b03      	cmp	r3, #3
 8008028:	d81a      	bhi.n	8008060 <UART_SetConfig+0xe8>
 800802a:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <UART_SetConfig+0xb8>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	08008041 	.word	0x08008041
 8008034:	08008051 	.word	0x08008051
 8008038:	08008049 	.word	0x08008049
 800803c:	08008059 	.word	0x08008059
 8008040:	2301      	movs	r3, #1
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008046:	e116      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008048:	2302      	movs	r3, #2
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800804e:	e112      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008050:	2304      	movs	r3, #4
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008056:	e10e      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008058:	2308      	movs	r3, #8
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805e:	e10a      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008060:	2310      	movs	r3, #16
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008066:	e106      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a7c      	ldr	r2, [pc, #496]	; (8008260 <UART_SetConfig+0x2e8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d138      	bne.n	80080e4 <UART_SetConfig+0x16c>
 8008072:	4b7a      	ldr	r3, [pc, #488]	; (800825c <UART_SetConfig+0x2e4>)
 8008074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008078:	f003 030c 	and.w	r3, r3, #12
 800807c:	2b0c      	cmp	r3, #12
 800807e:	d82d      	bhi.n	80080dc <UART_SetConfig+0x164>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <UART_SetConfig+0x110>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080bd 	.word	0x080080bd
 800808c:	080080dd 	.word	0x080080dd
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080dd 	.word	0x080080dd
 8008098:	080080cd 	.word	0x080080cd
 800809c:	080080dd 	.word	0x080080dd
 80080a0:	080080dd 	.word	0x080080dd
 80080a4:	080080dd 	.word	0x080080dd
 80080a8:	080080c5 	.word	0x080080c5
 80080ac:	080080dd 	.word	0x080080dd
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	080080dd 	.word	0x080080dd
 80080b8:	080080d5 	.word	0x080080d5
 80080bc:	2300      	movs	r3, #0
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c2:	e0d8      	b.n	8008276 <UART_SetConfig+0x2fe>
 80080c4:	2302      	movs	r3, #2
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ca:	e0d4      	b.n	8008276 <UART_SetConfig+0x2fe>
 80080cc:	2304      	movs	r3, #4
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d2:	e0d0      	b.n	8008276 <UART_SetConfig+0x2fe>
 80080d4:	2308      	movs	r3, #8
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080da:	e0cc      	b.n	8008276 <UART_SetConfig+0x2fe>
 80080dc:	2310      	movs	r3, #16
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e2:	e0c8      	b.n	8008276 <UART_SetConfig+0x2fe>
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a5e      	ldr	r2, [pc, #376]	; (8008264 <UART_SetConfig+0x2ec>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d125      	bne.n	800813a <UART_SetConfig+0x1c2>
 80080ee:	4b5b      	ldr	r3, [pc, #364]	; (800825c <UART_SetConfig+0x2e4>)
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080f8:	2b30      	cmp	r3, #48	; 0x30
 80080fa:	d016      	beq.n	800812a <UART_SetConfig+0x1b2>
 80080fc:	2b30      	cmp	r3, #48	; 0x30
 80080fe:	d818      	bhi.n	8008132 <UART_SetConfig+0x1ba>
 8008100:	2b20      	cmp	r3, #32
 8008102:	d00a      	beq.n	800811a <UART_SetConfig+0x1a2>
 8008104:	2b20      	cmp	r3, #32
 8008106:	d814      	bhi.n	8008132 <UART_SetConfig+0x1ba>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <UART_SetConfig+0x19a>
 800810c:	2b10      	cmp	r3, #16
 800810e:	d008      	beq.n	8008122 <UART_SetConfig+0x1aa>
 8008110:	e00f      	b.n	8008132 <UART_SetConfig+0x1ba>
 8008112:	2300      	movs	r3, #0
 8008114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008118:	e0ad      	b.n	8008276 <UART_SetConfig+0x2fe>
 800811a:	2302      	movs	r3, #2
 800811c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008120:	e0a9      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008122:	2304      	movs	r3, #4
 8008124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008128:	e0a5      	b.n	8008276 <UART_SetConfig+0x2fe>
 800812a:	2308      	movs	r3, #8
 800812c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008130:	e0a1      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008132:	2310      	movs	r3, #16
 8008134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008138:	e09d      	b.n	8008276 <UART_SetConfig+0x2fe>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a4a      	ldr	r2, [pc, #296]	; (8008268 <UART_SetConfig+0x2f0>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d125      	bne.n	8008190 <UART_SetConfig+0x218>
 8008144:	4b45      	ldr	r3, [pc, #276]	; (800825c <UART_SetConfig+0x2e4>)
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800814e:	2bc0      	cmp	r3, #192	; 0xc0
 8008150:	d016      	beq.n	8008180 <UART_SetConfig+0x208>
 8008152:	2bc0      	cmp	r3, #192	; 0xc0
 8008154:	d818      	bhi.n	8008188 <UART_SetConfig+0x210>
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d00a      	beq.n	8008170 <UART_SetConfig+0x1f8>
 800815a:	2b80      	cmp	r3, #128	; 0x80
 800815c:	d814      	bhi.n	8008188 <UART_SetConfig+0x210>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <UART_SetConfig+0x1f0>
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	d008      	beq.n	8008178 <UART_SetConfig+0x200>
 8008166:	e00f      	b.n	8008188 <UART_SetConfig+0x210>
 8008168:	2300      	movs	r3, #0
 800816a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800816e:	e082      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008170:	2302      	movs	r3, #2
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008176:	e07e      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008178:	2304      	movs	r3, #4
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817e:	e07a      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008180:	2308      	movs	r3, #8
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008186:	e076      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008188:	2310      	movs	r3, #16
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818e:	e072      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a35      	ldr	r2, [pc, #212]	; (800826c <UART_SetConfig+0x2f4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d12a      	bne.n	80081f0 <UART_SetConfig+0x278>
 800819a:	4b30      	ldr	r3, [pc, #192]	; (800825c <UART_SetConfig+0x2e4>)
 800819c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081a8:	d01a      	beq.n	80081e0 <UART_SetConfig+0x268>
 80081aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081ae:	d81b      	bhi.n	80081e8 <UART_SetConfig+0x270>
 80081b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b4:	d00c      	beq.n	80081d0 <UART_SetConfig+0x258>
 80081b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ba:	d815      	bhi.n	80081e8 <UART_SetConfig+0x270>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <UART_SetConfig+0x250>
 80081c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c4:	d008      	beq.n	80081d8 <UART_SetConfig+0x260>
 80081c6:	e00f      	b.n	80081e8 <UART_SetConfig+0x270>
 80081c8:	2300      	movs	r3, #0
 80081ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ce:	e052      	b.n	8008276 <UART_SetConfig+0x2fe>
 80081d0:	2302      	movs	r3, #2
 80081d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d6:	e04e      	b.n	8008276 <UART_SetConfig+0x2fe>
 80081d8:	2304      	movs	r3, #4
 80081da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081de:	e04a      	b.n	8008276 <UART_SetConfig+0x2fe>
 80081e0:	2308      	movs	r3, #8
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e6:	e046      	b.n	8008276 <UART_SetConfig+0x2fe>
 80081e8:	2310      	movs	r3, #16
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ee:	e042      	b.n	8008276 <UART_SetConfig+0x2fe>
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a17      	ldr	r2, [pc, #92]	; (8008254 <UART_SetConfig+0x2dc>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d13a      	bne.n	8008270 <UART_SetConfig+0x2f8>
 80081fa:	4b18      	ldr	r3, [pc, #96]	; (800825c <UART_SetConfig+0x2e4>)
 80081fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008200:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008204:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008208:	d01a      	beq.n	8008240 <UART_SetConfig+0x2c8>
 800820a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800820e:	d81b      	bhi.n	8008248 <UART_SetConfig+0x2d0>
 8008210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008214:	d00c      	beq.n	8008230 <UART_SetConfig+0x2b8>
 8008216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800821a:	d815      	bhi.n	8008248 <UART_SetConfig+0x2d0>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <UART_SetConfig+0x2b0>
 8008220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008224:	d008      	beq.n	8008238 <UART_SetConfig+0x2c0>
 8008226:	e00f      	b.n	8008248 <UART_SetConfig+0x2d0>
 8008228:	2300      	movs	r3, #0
 800822a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800822e:	e022      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008230:	2302      	movs	r3, #2
 8008232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008236:	e01e      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008238:	2304      	movs	r3, #4
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823e:	e01a      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008240:	2308      	movs	r3, #8
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008246:	e016      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008248:	2310      	movs	r3, #16
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e012      	b.n	8008276 <UART_SetConfig+0x2fe>
 8008250:	cfff69f3 	.word	0xcfff69f3
 8008254:	40008000 	.word	0x40008000
 8008258:	40013800 	.word	0x40013800
 800825c:	40021000 	.word	0x40021000
 8008260:	40004400 	.word	0x40004400
 8008264:	40004800 	.word	0x40004800
 8008268:	40004c00 	.word	0x40004c00
 800826c:	40005000 	.word	0x40005000
 8008270:	2310      	movs	r3, #16
 8008272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4aae      	ldr	r2, [pc, #696]	; (8008534 <UART_SetConfig+0x5bc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	f040 8097 	bne.w	80083b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008282:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008286:	2b08      	cmp	r3, #8
 8008288:	d823      	bhi.n	80082d2 <UART_SetConfig+0x35a>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <UART_SetConfig+0x318>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082b5 	.word	0x080082b5
 8008294:	080082d3 	.word	0x080082d3
 8008298:	080082bd 	.word	0x080082bd
 800829c:	080082d3 	.word	0x080082d3
 80082a0:	080082c3 	.word	0x080082c3
 80082a4:	080082d3 	.word	0x080082d3
 80082a8:	080082d3 	.word	0x080082d3
 80082ac:	080082d3 	.word	0x080082d3
 80082b0:	080082cb 	.word	0x080082cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b4:	f7fd fd72 	bl	8005d9c <HAL_RCC_GetPCLK1Freq>
 80082b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082ba:	e010      	b.n	80082de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082bc:	4b9e      	ldr	r3, [pc, #632]	; (8008538 <UART_SetConfig+0x5c0>)
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082c0:	e00d      	b.n	80082de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082c2:	f7fd fcfd 	bl	8005cc0 <HAL_RCC_GetSysClockFreq>
 80082c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082c8:	e009      	b.n	80082de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082d0:	e005      	b.n	80082de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8130 	beq.w	8008546 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	4a94      	ldr	r2, [pc, #592]	; (800853c <UART_SetConfig+0x5c4>)
 80082ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4413      	add	r3, r2
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	429a      	cmp	r2, r3
 8008308:	d305      	bcc.n	8008316 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	429a      	cmp	r2, r3
 8008314:	d903      	bls.n	800831e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800831c:	e113      	b.n	8008546 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	2200      	movs	r2, #0
 8008322:	60bb      	str	r3, [r7, #8]
 8008324:	60fa      	str	r2, [r7, #12]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	4a84      	ldr	r2, [pc, #528]	; (800853c <UART_SetConfig+0x5c4>)
 800832c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008330:	b29b      	uxth	r3, r3
 8008332:	2200      	movs	r2, #0
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800833c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008340:	f7f7 ff6a 	bl	8000218 <__aeabi_uldivmod>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	4610      	mov	r0, r2
 800834a:	4619      	mov	r1, r3
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	020b      	lsls	r3, r1, #8
 8008356:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800835a:	0202      	lsls	r2, r0, #8
 800835c:	6979      	ldr	r1, [r7, #20]
 800835e:	6849      	ldr	r1, [r1, #4]
 8008360:	0849      	lsrs	r1, r1, #1
 8008362:	2000      	movs	r0, #0
 8008364:	460c      	mov	r4, r1
 8008366:	4605      	mov	r5, r0
 8008368:	eb12 0804 	adds.w	r8, r2, r4
 800836c:	eb43 0905 	adc.w	r9, r3, r5
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	469a      	mov	sl, r3
 8008378:	4693      	mov	fp, r2
 800837a:	4652      	mov	r2, sl
 800837c:	465b      	mov	r3, fp
 800837e:	4640      	mov	r0, r8
 8008380:	4649      	mov	r1, r9
 8008382:	f7f7 ff49 	bl	8000218 <__aeabi_uldivmod>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4613      	mov	r3, r2
 800838c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008394:	d308      	bcc.n	80083a8 <UART_SetConfig+0x430>
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800839c:	d204      	bcs.n	80083a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6a3a      	ldr	r2, [r7, #32]
 80083a4:	60da      	str	r2, [r3, #12]
 80083a6:	e0ce      	b.n	8008546 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083ae:	e0ca      	b.n	8008546 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b8:	d166      	bne.n	8008488 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80083ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083be:	2b08      	cmp	r3, #8
 80083c0:	d827      	bhi.n	8008412 <UART_SetConfig+0x49a>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <UART_SetConfig+0x450>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	080083f5 	.word	0x080083f5
 80083d0:	080083fd 	.word	0x080083fd
 80083d4:	08008413 	.word	0x08008413
 80083d8:	08008403 	.word	0x08008403
 80083dc:	08008413 	.word	0x08008413
 80083e0:	08008413 	.word	0x08008413
 80083e4:	08008413 	.word	0x08008413
 80083e8:	0800840b 	.word	0x0800840b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ec:	f7fd fcd6 	bl	8005d9c <HAL_RCC_GetPCLK1Freq>
 80083f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083f2:	e014      	b.n	800841e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f4:	f7fd fce8 	bl	8005dc8 <HAL_RCC_GetPCLK2Freq>
 80083f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083fa:	e010      	b.n	800841e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083fc:	4b4e      	ldr	r3, [pc, #312]	; (8008538 <UART_SetConfig+0x5c0>)
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008400:	e00d      	b.n	800841e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008402:	f7fd fc5d 	bl	8005cc0 <HAL_RCC_GetSysClockFreq>
 8008406:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008408:	e009      	b.n	800841e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800840a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008410:	e005      	b.n	800841e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800841c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 8090 	beq.w	8008546 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	4a44      	ldr	r2, [pc, #272]	; (800853c <UART_SetConfig+0x5c4>)
 800842c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008430:	461a      	mov	r2, r3
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	fbb3 f3f2 	udiv	r3, r3, r2
 8008438:	005a      	lsls	r2, r3, #1
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	085b      	lsrs	r3, r3, #1
 8008440:	441a      	add	r2, r3
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	fbb2 f3f3 	udiv	r3, r2, r3
 800844a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	2b0f      	cmp	r3, #15
 8008450:	d916      	bls.n	8008480 <UART_SetConfig+0x508>
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008458:	d212      	bcs.n	8008480 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	b29b      	uxth	r3, r3
 800845e:	f023 030f 	bic.w	r3, r3, #15
 8008462:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	b29b      	uxth	r3, r3
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	b29a      	uxth	r2, r3
 8008470:	8bfb      	ldrh	r3, [r7, #30]
 8008472:	4313      	orrs	r3, r2
 8008474:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	8bfa      	ldrh	r2, [r7, #30]
 800847c:	60da      	str	r2, [r3, #12]
 800847e:	e062      	b.n	8008546 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008486:	e05e      	b.n	8008546 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008488:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800848c:	2b08      	cmp	r3, #8
 800848e:	d828      	bhi.n	80084e2 <UART_SetConfig+0x56a>
 8008490:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <UART_SetConfig+0x520>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	080084cd 	.word	0x080084cd
 80084a4:	080084e3 	.word	0x080084e3
 80084a8:	080084d3 	.word	0x080084d3
 80084ac:	080084e3 	.word	0x080084e3
 80084b0:	080084e3 	.word	0x080084e3
 80084b4:	080084e3 	.word	0x080084e3
 80084b8:	080084db 	.word	0x080084db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084bc:	f7fd fc6e 	bl	8005d9c <HAL_RCC_GetPCLK1Freq>
 80084c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084c2:	e014      	b.n	80084ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084c4:	f7fd fc80 	bl	8005dc8 <HAL_RCC_GetPCLK2Freq>
 80084c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ca:	e010      	b.n	80084ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084cc:	4b1a      	ldr	r3, [pc, #104]	; (8008538 <UART_SetConfig+0x5c0>)
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084d0:	e00d      	b.n	80084ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084d2:	f7fd fbf5 	bl	8005cc0 <HAL_RCC_GetSysClockFreq>
 80084d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084d8:	e009      	b.n	80084ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084e0:	e005      	b.n	80084ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084ec:	bf00      	nop
    }

    if (pclk != 0U)
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d028      	beq.n	8008546 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	4a10      	ldr	r2, [pc, #64]	; (800853c <UART_SetConfig+0x5c4>)
 80084fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084fe:	461a      	mov	r2, r3
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	fbb3 f2f2 	udiv	r2, r3, r2
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	085b      	lsrs	r3, r3, #1
 800850c:	441a      	add	r2, r3
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	fbb2 f3f3 	udiv	r3, r2, r3
 8008516:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	2b0f      	cmp	r3, #15
 800851c:	d910      	bls.n	8008540 <UART_SetConfig+0x5c8>
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008524:	d20c      	bcs.n	8008540 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	b29a      	uxth	r2, r3
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	60da      	str	r2, [r3, #12]
 8008530:	e009      	b.n	8008546 <UART_SetConfig+0x5ce>
 8008532:	bf00      	nop
 8008534:	40008000 	.word	0x40008000
 8008538:	00f42400 	.word	0x00f42400
 800853c:	08009ce8 	.word	0x08009ce8
      }
      else
      {
        ret = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2201      	movs	r2, #1
 800854a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2201      	movs	r2, #1
 8008552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2200      	movs	r2, #0
 800855a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2200      	movs	r2, #0
 8008560:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008562:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008566:	4618      	mov	r0, r3
 8008568:	3730      	adds	r7, #48	; 0x30
 800856a:	46bd      	mov	sp, r7
 800856c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00a      	beq.n	800859a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00a      	beq.n	80085bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e2:	f003 0308 	and.w	r3, r3, #8
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	f003 0310 	and.w	r3, r3, #16
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01a      	beq.n	8008686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800866e:	d10a      	bne.n	8008686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	605a      	str	r2, [r3, #4]
  }
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086c4:	f7fa fc60 	bl	8002f88 <HAL_GetTick>
 80086c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0308 	and.w	r3, r3, #8
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d10e      	bne.n	80086f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f82f 	bl	800874a <UART_WaitOnFlagUntilTimeout>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e025      	b.n	8008742 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b04      	cmp	r3, #4
 8008702:	d10e      	bne.n	8008722 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f819 	bl	800874a <UART_WaitOnFlagUntilTimeout>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e00f      	b.n	8008742 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2220      	movs	r2, #32
 8008726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b09c      	sub	sp, #112	; 0x70
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	603b      	str	r3, [r7, #0]
 8008756:	4613      	mov	r3, r2
 8008758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800875a:	e0a9      	b.n	80088b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800875c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008762:	f000 80a5 	beq.w	80088b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008766:	f7fa fc0f 	bl	8002f88 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008772:	429a      	cmp	r2, r3
 8008774:	d302      	bcc.n	800877c <UART_WaitOnFlagUntilTimeout+0x32>
 8008776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008778:	2b00      	cmp	r3, #0
 800877a:	d140      	bne.n	80087fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800878a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008790:	667b      	str	r3, [r7, #100]	; 0x64
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800879a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800879c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80087a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e6      	bne.n	800877c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	f023 0301 	bic.w	r3, r3, #1
 80087c4:	663b      	str	r3, [r7, #96]	; 0x60
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80087d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e5      	bne.n	80087ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e069      	b.n	80088d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0304 	and.w	r3, r3, #4
 8008808:	2b00      	cmp	r3, #0
 800880a:	d051      	beq.n	80088b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800881a:	d149      	bne.n	80088b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008824:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882e:	e853 3f00 	ldrex	r3, [r3]
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800883a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
 8008846:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008848:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800884a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800884c:	e841 2300 	strex	r3, r2, [r1]
 8008850:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e6      	bne.n	8008826 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	e853 3f00 	ldrex	r3, [r3]
 8008866:	613b      	str	r3, [r7, #16]
   return(result);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f023 0301 	bic.w	r3, r3, #1
 800886e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3308      	adds	r3, #8
 8008876:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008878:	623a      	str	r2, [r7, #32]
 800887a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	69f9      	ldr	r1, [r7, #28]
 800887e:	6a3a      	ldr	r2, [r7, #32]
 8008880:	e841 2300 	strex	r3, r2, [r1]
 8008884:	61bb      	str	r3, [r7, #24]
   return(result);
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e5      	bne.n	8008858 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2220      	movs	r2, #32
 8008898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e010      	b.n	80088d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69da      	ldr	r2, [r3, #28]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	4013      	ands	r3, r2
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	429a      	cmp	r2, r3
 80088be:	bf0c      	ite	eq
 80088c0:	2301      	moveq	r3, #1
 80088c2:	2300      	movne	r3, #0
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	461a      	mov	r2, r3
 80088c8:	79fb      	ldrb	r3, [r7, #7]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	f43f af46 	beq.w	800875c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3770      	adds	r7, #112	; 0x70
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088dc:	b480      	push	{r7}
 80088de:	b0a3      	sub	sp, #140	; 0x8c
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	88fa      	ldrh	r2, [r7, #6]
 80088f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890e:	d10e      	bne.n	800892e <UART_Start_Receive_IT+0x52>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d105      	bne.n	8008924 <UART_Start_Receive_IT+0x48>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800891e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008922:	e02d      	b.n	8008980 <UART_Start_Receive_IT+0xa4>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	22ff      	movs	r2, #255	; 0xff
 8008928:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800892c:	e028      	b.n	8008980 <UART_Start_Receive_IT+0xa4>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10d      	bne.n	8008952 <UART_Start_Receive_IT+0x76>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d104      	bne.n	8008948 <UART_Start_Receive_IT+0x6c>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	22ff      	movs	r2, #255	; 0xff
 8008942:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008946:	e01b      	b.n	8008980 <UART_Start_Receive_IT+0xa4>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	227f      	movs	r2, #127	; 0x7f
 800894c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008950:	e016      	b.n	8008980 <UART_Start_Receive_IT+0xa4>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800895a:	d10d      	bne.n	8008978 <UART_Start_Receive_IT+0x9c>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d104      	bne.n	800896e <UART_Start_Receive_IT+0x92>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	227f      	movs	r2, #127	; 0x7f
 8008968:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800896c:	e008      	b.n	8008980 <UART_Start_Receive_IT+0xa4>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	223f      	movs	r2, #63	; 0x3f
 8008972:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008976:	e003      	b.n	8008980 <UART_Start_Receive_IT+0xa4>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2222      	movs	r2, #34	; 0x22
 800898c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3308      	adds	r3, #8
 8008996:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80089a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3308      	adds	r3, #8
 80089b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80089b4:	673a      	str	r2, [r7, #112]	; 0x70
 80089b6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80089ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80089c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e3      	bne.n	8008990 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d0:	d153      	bne.n	8008a7a <UART_Start_Receive_IT+0x19e>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089d8:	88fa      	ldrh	r2, [r7, #6]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d34d      	bcc.n	8008a7a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e6:	d107      	bne.n	80089f8 <UART_Start_Receive_IT+0x11c>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d103      	bne.n	80089f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	4a4b      	ldr	r2, [pc, #300]	; (8008b20 <UART_Start_Receive_IT+0x244>)
 80089f4:	671a      	str	r2, [r3, #112]	; 0x70
 80089f6:	e002      	b.n	80089fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4a4a      	ldr	r2, [pc, #296]	; (8008b24 <UART_Start_Receive_IT+0x248>)
 80089fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d01a      	beq.n	8008a44 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a32:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e4      	bne.n	8008a0e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3308      	adds	r3, #8
 8008a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3308      	adds	r3, #8
 8008a62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008a64:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e5      	bne.n	8008a44 <UART_Start_Receive_IT+0x168>
 8008a78:	e04a      	b.n	8008b10 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a82:	d107      	bne.n	8008a94 <UART_Start_Receive_IT+0x1b8>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d103      	bne.n	8008a94 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4a26      	ldr	r2, [pc, #152]	; (8008b28 <UART_Start_Receive_IT+0x24c>)
 8008a90:	671a      	str	r2, [r3, #112]	; 0x70
 8008a92:	e002      	b.n	8008a9a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4a25      	ldr	r2, [pc, #148]	; (8008b2c <UART_Start_Receive_IT+0x250>)
 8008a98:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d019      	beq.n	8008ade <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008abe:	677b      	str	r3, [r7, #116]	; 0x74
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e6      	bne.n	8008aaa <UART_Start_Receive_IT+0x1ce>
 8008adc:	e018      	b.n	8008b10 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	613b      	str	r3, [r7, #16]
   return(result);
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f043 0320 	orr.w	r3, r3, #32
 8008af2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008afc:	623b      	str	r3, [r7, #32]
 8008afe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	69f9      	ldr	r1, [r7, #28]
 8008b02:	6a3a      	ldr	r2, [r7, #32]
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e6      	bne.n	8008ade <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	378c      	adds	r7, #140	; 0x8c
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	0800957d 	.word	0x0800957d
 8008b24:	08009285 	.word	0x08009285
 8008b28:	08009123 	.word	0x08009123
 8008b2c:	08008fc3 	.word	0x08008fc3

08008b30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b095      	sub	sp, #84	; 0x54
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b56:	643b      	str	r3, [r7, #64]	; 0x40
 8008b58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e6      	bne.n	8008b38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3308      	adds	r3, #8
 8008b70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	e853 3f00 	ldrex	r3, [r3]
 8008b78:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b80:	f023 0301 	bic.w	r3, r3, #1
 8008b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e3      	bne.n	8008b6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d118      	bne.n	8008bdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	e853 3f00 	ldrex	r3, [r3]
 8008bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f023 0310 	bic.w	r3, r3, #16
 8008bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	6979      	ldr	r1, [r7, #20]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e6      	bne.n	8008baa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008bf0:	bf00      	nop
 8008bf2:	3754      	adds	r7, #84	; 0x54
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7ff f996 	bl	8007f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c20:	bf00      	nop
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b08f      	sub	sp, #60	; 0x3c
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c36:	2b21      	cmp	r3, #33	; 0x21
 8008c38:	d14c      	bne.n	8008cd4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d132      	bne.n	8008cac <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e6      	bne.n	8008c46 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	61bb      	str	r3, [r7, #24]
 8008c98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6979      	ldr	r1, [r7, #20]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e6      	bne.n	8008c78 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008caa:	e013      	b.n	8008cd4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008cd4:	bf00      	nop
 8008cd6:	373c      	adds	r7, #60	; 0x3c
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b091      	sub	sp, #68	; 0x44
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cee:	2b21      	cmp	r3, #33	; 0x21
 8008cf0:	d151      	bne.n	8008d96 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d132      	bne.n	8008d64 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e6      	bne.n	8008cfe <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4e:	61fb      	str	r3, [r7, #28]
 8008d50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	69b9      	ldr	r1, [r7, #24]
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e6      	bne.n	8008d30 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008d62:	e018      	b.n	8008d96 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d68:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d78:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d7e:	1c9a      	adds	r2, r3, #2
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008d96:	bf00      	nop
 8008d98:	3744      	adds	r7, #68	; 0x44
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b091      	sub	sp, #68	; 0x44
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008db0:	2b21      	cmp	r3, #33	; 0x21
 8008db2:	d160      	bne.n	8008e76 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008dba:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008dbc:	e057      	b.n	8008e6e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d133      	bne.n	8008e32 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	e853 3f00 	ldrex	r3, [r3]
 8008dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3308      	adds	r3, #8
 8008de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dea:	633a      	str	r2, [r7, #48]	; 0x30
 8008dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df2:	e841 2300 	strex	r3, r2, [r1]
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1e5      	bne.n	8008dca <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	e853 3f00 	ldrex	r3, [r3]
 8008e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	69b9      	ldr	r1, [r7, #24]
 8008e22:	69fa      	ldr	r2, [r7, #28]
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	617b      	str	r3, [r7, #20]
   return(result);
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e6      	bne.n	8008dfe <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008e30:	e021      	b.n	8008e76 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d013      	beq.n	8008e68 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008e68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008e6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1a4      	bne.n	8008dbe <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008e74:	e7ff      	b.n	8008e76 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008e76:	bf00      	nop
 8008e78:	3744      	adds	r7, #68	; 0x44
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b091      	sub	sp, #68	; 0x44
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e90:	2b21      	cmp	r3, #33	; 0x21
 8008e92:	d165      	bne.n	8008f60 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008e9c:	e05c      	b.n	8008f58 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d133      	bne.n	8008f12 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ecc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e5      	bne.n	8008eaa <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	61bb      	str	r3, [r7, #24]
 8008efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008f10:	e026      	b.n	8008f60 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d018      	beq.n	8008f52 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f24:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f34:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f3a:	1c9a      	adds	r2, r3, #2
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008f52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f54:	3b01      	subs	r3, #1
 8008f56:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008f58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d19f      	bne.n	8008e9e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008f5e:	e7ff      	b.n	8008f60 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008f60:	bf00      	nop
 8008f62:	3744      	adds	r7, #68	; 0x44
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f88:	61fb      	str	r3, [r7, #28]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6979      	ldr	r1, [r7, #20]
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e6      	bne.n	8008f74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7fe ffbf 	bl	8007f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fba:	bf00      	nop
 8008fbc:	3720      	adds	r7, #32
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b096      	sub	sp, #88	; 0x58
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fda:	2b22      	cmp	r3, #34	; 0x22
 8008fdc:	f040 8095 	bne.w	800910a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008fee:	b2d9      	uxtb	r1, r3
 8008ff0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffa:	400a      	ands	r2, r1
 8008ffc:	b2d2      	uxtb	r2, r2
 8008ffe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009022:	b29b      	uxth	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	d178      	bne.n	800911a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800903c:	653b      	str	r3, [r7, #80]	; 0x50
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009046:	647b      	str	r3, [r7, #68]	; 0x44
 8009048:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800904c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e6      	bne.n	8009028 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	623b      	str	r3, [r7, #32]
   return(result);
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	f023 0301 	bic.w	r3, r3, #1
 8009070:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800907a:	633a      	str	r2, [r7, #48]	; 0x30
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e5      	bne.n	800905a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d12e      	bne.n	8009102 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0310 	bic.w	r3, r3, #16
 80090be:	64bb      	str	r3, [r7, #72]	; 0x48
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	461a      	mov	r2, r3
 80090c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090c8:	61fb      	str	r3, [r7, #28]
 80090ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	69b9      	ldr	r1, [r7, #24]
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	e841 2300 	strex	r3, r2, [r1]
 80090d4:	617b      	str	r3, [r7, #20]
   return(result);
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e6      	bne.n	80090aa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	f003 0310 	and.w	r3, r3, #16
 80090e6:	2b10      	cmp	r3, #16
 80090e8:	d103      	bne.n	80090f2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2210      	movs	r2, #16
 80090f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7fe ff30 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009100:	e00b      	b.n	800911a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7f9 fc02 	bl	800290c <HAL_UART_RxCpltCallback>
}
 8009108:	e007      	b.n	800911a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	699a      	ldr	r2, [r3, #24]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0208 	orr.w	r2, r2, #8
 8009118:	619a      	str	r2, [r3, #24]
}
 800911a:	bf00      	nop
 800911c:	3758      	adds	r7, #88	; 0x58
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b096      	sub	sp, #88	; 0x58
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009130:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913a:	2b22      	cmp	r3, #34	; 0x22
 800913c:	f040 8095 	bne.w	800926a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009150:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009154:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009158:	4013      	ands	r3, r2
 800915a:	b29a      	uxth	r2, r3
 800915c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800915e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009164:	1c9a      	adds	r2, r3, #2
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009170:	b29b      	uxth	r3, r3
 8009172:	3b01      	subs	r3, #1
 8009174:	b29a      	uxth	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009182:	b29b      	uxth	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d178      	bne.n	800927a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800919c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a6:	643b      	str	r3, [r7, #64]	; 0x40
 80091a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e6      	bne.n	8009188 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3308      	adds	r3, #8
 80091c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	f023 0301 	bic.w	r3, r3, #1
 80091d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3308      	adds	r3, #8
 80091d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e5      	bne.n	80091ba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009200:	2b01      	cmp	r3, #1
 8009202:	d12e      	bne.n	8009262 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	60bb      	str	r3, [r7, #8]
   return(result);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	f023 0310 	bic.w	r3, r3, #16
 800921e:	647b      	str	r3, [r7, #68]	; 0x44
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6979      	ldr	r1, [r7, #20]
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	613b      	str	r3, [r7, #16]
   return(result);
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e6      	bne.n	800920a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	f003 0310 	and.w	r3, r3, #16
 8009246:	2b10      	cmp	r3, #16
 8009248:	d103      	bne.n	8009252 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2210      	movs	r2, #16
 8009250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7fe fe80 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009260:	e00b      	b.n	800927a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7f9 fb52 	bl	800290c <HAL_UART_RxCpltCallback>
}
 8009268:	e007      	b.n	800927a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	699a      	ldr	r2, [r3, #24]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0208 	orr.w	r2, r2, #8
 8009278:	619a      	str	r2, [r3, #24]
}
 800927a:	bf00      	nop
 800927c:	3758      	adds	r7, #88	; 0x58
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b0a6      	sub	sp, #152	; 0x98
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009292:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ba:	2b22      	cmp	r3, #34	; 0x22
 80092bc:	f040 814f 	bne.w	800955e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092c6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092ca:	e0f6      	b.n	80094ba <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092d6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80092da:	b2d9      	uxtb	r1, r3
 80092dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e6:	400a      	ands	r2, r1
 80092e8:	b2d2      	uxtb	r2, r2
 80092ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009312:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	2b00      	cmp	r3, #0
 800931c:	d053      	beq.n	80093c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800931e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	d011      	beq.n	800934e <UART_RxISR_8BIT_FIFOEN+0xca>
 800932a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800932e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00b      	beq.n	800934e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2201      	movs	r2, #1
 800933c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009344:	f043 0201 	orr.w	r2, r3, #1
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800934e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b00      	cmp	r3, #0
 8009358:	d011      	beq.n	800937e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800935a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2202      	movs	r2, #2
 800936c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009374:	f043 0204 	orr.w	r2, r3, #4
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800937e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009382:	f003 0304 	and.w	r3, r3, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	d011      	beq.n	80093ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800938a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00b      	beq.n	80093ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2204      	movs	r2, #4
 800939c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a4:	f043 0202 	orr.w	r2, r3, #2
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d006      	beq.n	80093c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7fe fdc7 	bl	8007f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d173      	bne.n	80094ba <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80093e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80093f6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80093fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093fc:	e841 2300 	strex	r3, r2, [r1]
 8009400:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e4      	bne.n	80093d2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3308      	adds	r3, #8
 800940e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800941e:	f023 0301 	bic.w	r3, r3, #1
 8009422:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800942c:	657a      	str	r2, [r7, #84]	; 0x54
 800942e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009432:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800943a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e3      	bne.n	8009408 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009452:	2b01      	cmp	r3, #1
 8009454:	d12e      	bne.n	80094b4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	f023 0310 	bic.w	r3, r3, #16
 8009470:	67bb      	str	r3, [r7, #120]	; 0x78
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800947a:	643b      	str	r3, [r7, #64]	; 0x40
 800947c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e6      	bne.n	800945c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b10      	cmp	r3, #16
 800949a:	d103      	bne.n	80094a4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2210      	movs	r2, #16
 80094a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7fe fd57 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
 80094b2:	e002      	b.n	80094ba <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7f9 fa29 	bl	800290c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d006      	beq.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80094c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f47f aefe 	bne.w	80092cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094da:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d045      	beq.n	800956e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d23e      	bcs.n	800956e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3308      	adds	r3, #8
 80094f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009506:	673b      	str	r3, [r7, #112]	; 0x70
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3308      	adds	r3, #8
 800950e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e5      	bne.n	80094f0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a14      	ldr	r2, [pc, #80]	; (8009578 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009528:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	60bb      	str	r3, [r7, #8]
   return(result);
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f043 0320 	orr.w	r3, r3, #32
 800953e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	461a      	mov	r2, r3
 8009546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009548:	61bb      	str	r3, [r7, #24]
 800954a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954c:	6979      	ldr	r1, [r7, #20]
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	e841 2300 	strex	r3, r2, [r1]
 8009554:	613b      	str	r3, [r7, #16]
   return(result);
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e6      	bne.n	800952a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800955c:	e007      	b.n	800956e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	699a      	ldr	r2, [r3, #24]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f042 0208 	orr.w	r2, r2, #8
 800956c:	619a      	str	r2, [r3, #24]
}
 800956e:	bf00      	nop
 8009570:	3798      	adds	r7, #152	; 0x98
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	08008fc3 	.word	0x08008fc3

0800957c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b0a8      	sub	sp, #160	; 0xa0
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800958a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b2:	2b22      	cmp	r3, #34	; 0x22
 80095b4:	f040 8153 	bne.w	800985e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095c2:	e0fa      	b.n	80097ba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80095d6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80095da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80095de:	4013      	ands	r3, r2
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ec:	1c9a      	adds	r2, r3, #2
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800960e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	2b00      	cmp	r3, #0
 8009618:	d053      	beq.n	80096c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800961a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d011      	beq.n	800964a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009626:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800962a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2201      	movs	r2, #1
 8009638:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009640:	f043 0201 	orr.w	r2, r3, #1
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800964a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d011      	beq.n	800967a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00b      	beq.n	800967a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2202      	movs	r2, #2
 8009668:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009670:	f043 0204 	orr.w	r2, r3, #4
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800967a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d011      	beq.n	80096aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009686:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00b      	beq.n	80096aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2204      	movs	r2, #4
 8009698:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a0:	f043 0202 	orr.w	r2, r3, #2
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d006      	beq.n	80096c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7fe fc49 	bl	8007f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d175      	bne.n	80097ba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096f2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e4      	bne.n	80096ce <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3308      	adds	r3, #8
 800970a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800970e:	e853 3f00 	ldrex	r3, [r3]
 8009712:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800971a:	f023 0301 	bic.w	r3, r3, #1
 800971e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800972c:	65ba      	str	r2, [r7, #88]	; 0x58
 800972e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800973a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e1      	bne.n	8009704 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2220      	movs	r2, #32
 8009744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009752:	2b01      	cmp	r3, #1
 8009754:	d12e      	bne.n	80097b4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800976a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976c:	f023 0310 	bic.w	r3, r3, #16
 8009770:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800977a:	647b      	str	r3, [r7, #68]	; 0x44
 800977c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e6      	bne.n	800975c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	f003 0310 	and.w	r3, r3, #16
 8009798:	2b10      	cmp	r3, #16
 800979a:	d103      	bne.n	80097a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2210      	movs	r2, #16
 80097a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7fe fbd7 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
 80097b2:	e002      	b.n	80097ba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7f9 f8a9 	bl	800290c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d006      	beq.n	80097d0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80097c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f47f aefa 	bne.w	80095c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80097da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d045      	beq.n	800986e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d23e      	bcs.n	800986e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3308      	adds	r3, #8
 80097f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	623b      	str	r3, [r7, #32]
   return(result);
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009806:	677b      	str	r3, [r7, #116]	; 0x74
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3308      	adds	r3, #8
 800980e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009810:	633a      	str	r2, [r7, #48]	; 0x30
 8009812:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e5      	bne.n	80097f0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a14      	ldr	r2, [pc, #80]	; (8009878 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009828:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	60fb      	str	r3, [r7, #12]
   return(result);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f043 0320 	orr.w	r3, r3, #32
 800983e:	673b      	str	r3, [r7, #112]	; 0x70
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009848:	61fb      	str	r3, [r7, #28]
 800984a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	69b9      	ldr	r1, [r7, #24]
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	617b      	str	r3, [r7, #20]
   return(result);
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e6      	bne.n	800982a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800985c:	e007      	b.n	800986e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f042 0208 	orr.w	r2, r2, #8
 800986c:	619a      	str	r2, [r3, #24]
}
 800986e:	bf00      	nop
 8009870:	37a0      	adds	r7, #160	; 0xa0
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	08009123 	.word	0x08009123

0800987c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d101      	bne.n	80098ce <HAL_UARTEx_DisableFifoMode+0x16>
 80098ca:	2302      	movs	r3, #2
 80098cc:	e027      	b.n	800991e <HAL_UARTEx_DisableFifoMode+0x66>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2224      	movs	r2, #36	; 0x24
 80098da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0201 	bic.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80098fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2220      	movs	r2, #32
 8009910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3714      	adds	r7, #20
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800993e:	2302      	movs	r3, #2
 8009940:	e02d      	b.n	800999e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2224      	movs	r2, #36	; 0x24
 800994e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 0201 	bic.w	r2, r2, #1
 8009968:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f850 	bl	8009a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d101      	bne.n	80099be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099ba:	2302      	movs	r3, #2
 80099bc:	e02d      	b.n	8009a1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2224      	movs	r2, #36	; 0x24
 80099ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f022 0201 	bic.w	r2, r2, #1
 80099e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	683a      	ldr	r2, [r7, #0]
 80099f6:	430a      	orrs	r2, r1
 80099f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f812 	bl	8009a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
	...

08009a24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d108      	bne.n	8009a46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a44:	e031      	b.n	8009aaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a46:	2308      	movs	r3, #8
 8009a48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a4a:	2308      	movs	r3, #8
 8009a4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	0e5b      	lsrs	r3, r3, #25
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f003 0307 	and.w	r3, r3, #7
 8009a5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	0f5b      	lsrs	r3, r3, #29
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	7b3a      	ldrb	r2, [r7, #12]
 8009a72:	4911      	ldr	r1, [pc, #68]	; (8009ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8009a74:	5c8a      	ldrb	r2, [r1, r2]
 8009a76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a7a:	7b3a      	ldrb	r2, [r7, #12]
 8009a7c:	490f      	ldr	r1, [pc, #60]	; (8009abc <UARTEx_SetNbDataToProcess+0x98>)
 8009a7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a80:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	7b7a      	ldrb	r2, [r7, #13]
 8009a90:	4909      	ldr	r1, [pc, #36]	; (8009ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8009a92:	5c8a      	ldrb	r2, [r1, r2]
 8009a94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a98:	7b7a      	ldrb	r2, [r7, #13]
 8009a9a:	4908      	ldr	r1, [pc, #32]	; (8009abc <UARTEx_SetNbDataToProcess+0x98>)
 8009a9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009aaa:	bf00      	nop
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	08009d00 	.word	0x08009d00
 8009abc:	08009d08 	.word	0x08009d08

08009ac0 <memcmp>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	3901      	subs	r1, #1
 8009ac4:	4402      	add	r2, r0
 8009ac6:	4290      	cmp	r0, r2
 8009ac8:	d101      	bne.n	8009ace <memcmp+0xe>
 8009aca:	2000      	movs	r0, #0
 8009acc:	e005      	b.n	8009ada <memcmp+0x1a>
 8009ace:	7803      	ldrb	r3, [r0, #0]
 8009ad0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d001      	beq.n	8009adc <memcmp+0x1c>
 8009ad8:	1b18      	subs	r0, r3, r4
 8009ada:	bd10      	pop	{r4, pc}
 8009adc:	3001      	adds	r0, #1
 8009ade:	e7f2      	b.n	8009ac6 <memcmp+0x6>

08009ae0 <memset>:
 8009ae0:	4402      	add	r2, r0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d100      	bne.n	8009aea <memset+0xa>
 8009ae8:	4770      	bx	lr
 8009aea:	f803 1b01 	strb.w	r1, [r3], #1
 8009aee:	e7f9      	b.n	8009ae4 <memset+0x4>

08009af0 <__libc_init_array>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	4d0d      	ldr	r5, [pc, #52]	; (8009b28 <__libc_init_array+0x38>)
 8009af4:	4c0d      	ldr	r4, [pc, #52]	; (8009b2c <__libc_init_array+0x3c>)
 8009af6:	1b64      	subs	r4, r4, r5
 8009af8:	10a4      	asrs	r4, r4, #2
 8009afa:	2600      	movs	r6, #0
 8009afc:	42a6      	cmp	r6, r4
 8009afe:	d109      	bne.n	8009b14 <__libc_init_array+0x24>
 8009b00:	4d0b      	ldr	r5, [pc, #44]	; (8009b30 <__libc_init_array+0x40>)
 8009b02:	4c0c      	ldr	r4, [pc, #48]	; (8009b34 <__libc_init_array+0x44>)
 8009b04:	f000 f826 	bl	8009b54 <_init>
 8009b08:	1b64      	subs	r4, r4, r5
 8009b0a:	10a4      	asrs	r4, r4, #2
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	42a6      	cmp	r6, r4
 8009b10:	d105      	bne.n	8009b1e <__libc_init_array+0x2e>
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b18:	4798      	blx	r3
 8009b1a:	3601      	adds	r6, #1
 8009b1c:	e7ee      	b.n	8009afc <__libc_init_array+0xc>
 8009b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b22:	4798      	blx	r3
 8009b24:	3601      	adds	r6, #1
 8009b26:	e7f2      	b.n	8009b0e <__libc_init_array+0x1e>
 8009b28:	08009d18 	.word	0x08009d18
 8009b2c:	08009d18 	.word	0x08009d18
 8009b30:	08009d18 	.word	0x08009d18
 8009b34:	08009d1c 	.word	0x08009d1c

08009b38 <memcpy>:
 8009b38:	440a      	add	r2, r1
 8009b3a:	4291      	cmp	r1, r2
 8009b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009b40:	d100      	bne.n	8009b44 <memcpy+0xc>
 8009b42:	4770      	bx	lr
 8009b44:	b510      	push	{r4, lr}
 8009b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	d1f9      	bne.n	8009b46 <memcpy+0xe>
 8009b52:	bd10      	pop	{r4, pc}

08009b54 <_init>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr

08009b60 <_fini>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr
