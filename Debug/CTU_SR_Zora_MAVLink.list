
CTU_SR_Zora_MAVLink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000967c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08009854  08009854  00019854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a0c  08009a0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a0c  08009a0c  00019a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a14  08009a14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a14  08009a14  00019a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a18  08009a18  00019a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  2000000c  08009a28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b0  08009a28  000209b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ebdb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003394  00000000  00000000  0003ec5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  00041ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ab  00000000  00000000  00043a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022716  00000000  00000000  00044edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bddb  00000000  00000000  000675f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed095  00000000  00000000  000833cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074b4  00000000  00000000  00170464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00177918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800983c 	.word	0x0800983c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800983c 	.word	0x0800983c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <mavlink_comm_send_bytes>:

//required define for the protocol to use "mavlink_comm_send_bytes" function
#define MAVLINK_SEND_UART_BYTES
//convenience function for sending whole data block at once through a channel
//even though it has UART in its name, it has nothing to do with uart itself
static void mavlink_comm_send_bytes(mavlink_channel_t chan, const char *buf, uint16_t len){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]
    if(chan == MAVLINK_COMM_0){
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10d      	bne.n	8000546 <mavlink_comm_send_bytes+0x32>
        //wait until the TX register is not empty
        while(!__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC)){}
 800052a:	bf00      	nop
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <mavlink_comm_send_bytes+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000536:	2b40      	cmp	r3, #64	; 0x40
 8000538:	d1f8      	bne.n	800052c <mavlink_comm_send_bytes+0x18>

        HAL_UART_Transmit_IT(&huart1, (uint8_t *)buf, len);
 800053a:	88bb      	ldrh	r3, [r7, #4]
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <mavlink_comm_send_bytes+0x3c>)
 8000542:	f006 ff57 	bl	80073f4 <HAL_UART_Transmit_IT>
    }
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200001f4 	.word	0x200001f4

08000554 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b2da      	uxtb	r2, r3
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4053      	eors	r3, r2
 800056a:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	b25a      	sxtb	r2, r3
 8000572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000576:	4053      	eors	r3, r2
 8000578:	b25b      	sxtb	r3, r3
 800057a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	0a1b      	lsrs	r3, r3, #8
 8000582:	b29b      	uxth	r3, r3
 8000584:	b21a      	sxth	r2, r3
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21b      	sxth	r3, r3
 800058c:	4053      	eors	r3, r2
 800058e:	b21a      	sxth	r2, r3
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	b21b      	sxth	r3, r3
 8000596:	4053      	eors	r3, r2
 8000598:	b21a      	sxth	r2, r3
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	091b      	lsrs	r3, r3, #4
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	4053      	eors	r3, r2
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	801a      	strh	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005c6:	801a      	strh	r2, [r3, #0]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80005e0:	f107 030e 	add.w	r3, r7, #14
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffe7 	bl	80005b8 <crc_init>
	while (length--) {
 80005ea:	e009      	b.n	8000600 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	607a      	str	r2, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	f107 020e 	add.w	r2, r7, #14
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffaa 	bl	8000554 <crc_accumulate>
	while (length--) {
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	1e5a      	subs	r2, r3, #1
 8000604:	807a      	strh	r2, [r7, #2]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1f0      	bne.n	80005ec <crc_calculate+0x18>
        }
        return crcTmp;
 800060a:	89fb      	ldrh	r3, [r7, #14]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	4613      	mov	r3, r2
 8000620:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	617b      	str	r3, [r7, #20]
	while (length--) {
 8000626:	e007      	b.n	8000638 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	617a      	str	r2, [r7, #20]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	68f9      	ldr	r1, [r7, #12]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff8e 	bl	8000554 <crc_accumulate>
	while (length--) {
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	1e5a      	subs	r2, r3, #1
 800063c:	80fa      	strh	r2, [r7, #6]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f2      	bne.n	8000628 <crc_accumulate_buffer+0x14>
        }
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <mavlink_sha256_init+0x50>)
 8000664:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <mavlink_sha256_init+0x54>)
 800066a:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <mavlink_sha256_init+0x58>)
 8000670:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <mavlink_sha256_init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <mavlink_sha256_init+0x60>)
 800067c:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <mavlink_sha256_init+0x64>)
 8000682:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <mavlink_sha256_init+0x68>)
 8000688:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <mavlink_sha256_init+0x6c>)
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	6a09e667 	.word	0x6a09e667
 80006a0:	bb67ae85 	.word	0xbb67ae85
 80006a4:	3c6ef372 	.word	0x3c6ef372
 80006a8:	a54ff53a 	.word	0xa54ff53a
 80006ac:	510e527f 	.word	0x510e527f
 80006b0:	9b05688c 	.word	0x9b05688c
 80006b4:	1f83d9ab 	.word	0x1f83d9ab
 80006b8:	5be0cd19 	.word	0x5be0cd19

080006bc <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 80006bc:	b480      	push	{r7}
 80006be:	b0cf      	sub	sp, #316	; 0x13c
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ca:	6018      	str	r0, [r3, #0]
 80006cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006d0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80006d4:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 80006d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 80006e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 80006f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 8000706:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800070a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8000716:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800071a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8000726:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800072a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8000736:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800073a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8000746:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800074a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800075c:	e016      	b.n	800078c <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 800075e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000768:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800076c:	6812      	ldr	r2, [r2, #0]
 800076e:	4413      	add	r3, r2
 8000770:	6819      	ldr	r1, [r3, #0]
 8000772:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800077a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800077e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000786:	3301      	adds	r3, #1
 8000788:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800078c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000790:	2b0f      	cmp	r3, #15
 8000792:	dde4      	ble.n	800075e <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000794:	2310      	movs	r3, #16
 8000796:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800079a:	e069      	b.n	8000870 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800079c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007a0:	1e9a      	subs	r2, r3, #2
 80007a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ae:	ea4f 4273 	mov.w	r2, r3, ror #17
 80007b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b6:	1e99      	subs	r1, r3, #2
 80007b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007c4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80007c8:	405a      	eors	r2, r3
 80007ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007ce:	1e99      	subs	r1, r3, #2
 80007d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007dc:	0a9b      	lsrs	r3, r3, #10
 80007de:	405a      	eors	r2, r3
 80007e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007e4:	1fd9      	subs	r1, r3, #7
 80007e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007f2:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80007f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007f8:	f1a3 010f 	sub.w	r1, r3, #15
 80007fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000804:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000808:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800080c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000810:	f1a3 000f 	sub.w	r0, r3, #15
 8000814:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800081c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000820:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000824:	4059      	eors	r1, r3
 8000826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800082a:	f1a3 000f 	sub.w	r0, r3, #15
 800082e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000836:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800083a:	08db      	lsrs	r3, r3, #3
 800083c:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800083e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000844:	f1a3 0110 	sub.w	r1, r3, #16
 8000848:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800084c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000850:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000854:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000856:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800085a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800085e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800086a:	3301      	adds	r3, #1
 800086c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000874:	2b3f      	cmp	r3, #63	; 0x3f
 8000876:	dd91      	ble.n	800079c <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000878:	2300      	movs	r3, #0
 800087a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800087e:	e078      	b.n	8000972 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000880:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000884:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000888:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800088c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000890:	405a      	eors	r2, r3
 8000892:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000896:	ea4f 6373 	mov.w	r3, r3, ror #25
 800089a:	405a      	eors	r2, r3
 800089c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008a0:	441a      	add	r2, r3
 80008a2:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80008a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008aa:	4019      	ands	r1, r3
 80008ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008b0:	43d8      	mvns	r0, r3
 80008b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008b6:	4003      	ands	r3, r0
 80008b8:	404b      	eors	r3, r1
 80008ba:	441a      	add	r2, r3
 80008bc:	496e      	ldr	r1, [pc, #440]	; (8000a78 <mavlink_sha256_calc+0x3bc>)
 80008be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c6:	441a      	add	r2, r3
 80008c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80008cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80008d0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80008d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008d8:	4413      	add	r3, r2
 80008da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80008de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008e2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80008e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008ea:	ea4f 3373 	mov.w	r3, r3, ror #13
 80008ee:	405a      	eors	r2, r3
 80008f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008f4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80008f8:	405a      	eors	r2, r3
 80008fa:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80008fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000902:	4059      	eors	r1, r3
 8000904:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000908:	4019      	ands	r1, r3
 800090a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800090e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000912:	4003      	ands	r3, r0
 8000914:	404b      	eors	r3, r1
 8000916:	4413      	add	r3, r2
 8000918:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 800091c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000920:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8000924:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000928:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 800092c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000930:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8000934:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000938:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800093c:	4413      	add	r3, r2
 800093e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000946:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 800094a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800094e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000952:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000956:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 800095a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800095e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000962:	4413      	add	r3, r2
 8000964:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8000968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800096c:	3301      	adds	r3, #1
 800096e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000976:	2b3f      	cmp	r3, #63	; 0x3f
 8000978:	dd82      	ble.n	8000880 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 800097a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800097e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800098a:	441a      	add	r2, r3
 800098c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000990:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000998:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800099c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80009a8:	441a      	add	r2, r3
 80009aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 80009b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	691a      	ldr	r2, [r3, #16]
 80009c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80009c6:	441a      	add	r2, r3
 80009c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 80009d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80009e4:	441a      	add	r2, r3
 80009e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 80009f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a02:	441a      	add	r2, r3
 8000a04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8000a10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a20:	441a      	add	r2, r3
 8000a22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a26:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8000a2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	6a1a      	ldr	r2, [r3, #32]
 8000a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a3e:	441a      	add	r2, r3
 8000a40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8000a4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a5c:	441a      	add	r2, r3
 8000a5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a6a:	bf00      	nop
 8000a6c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	08009878 	.word	0x08009878

08000a7c <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09c      	sub	sp, #112	; 0x70
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	441a      	add	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d904      	bls.n	8000ab4 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000abc:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000abe:	e057      	b.n	8000b70 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8000ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ac2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ac6:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d201      	bcs.n	8000ad4 <mavlink_sha256_update+0x58>
            l = len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000adc:	4413      	add	r3, r2
 8000ade:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ae0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f008 fe9c 	bl	8009820 <memcpy>
	offset += l;
 8000ae8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aec:	4413      	add	r3, r2
 8000aee:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000af0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000af4:	4413      	add	r3, r2
 8000af6:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b02:	2b40      	cmp	r3, #64	; 0x40
 8000b04:	d134      	bne.n	8000b70 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3328      	adds	r3, #40	; 0x28
 8000b0a:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	663b      	str	r3, [r7, #96]	; 0x60
 8000b10:	e023      	b.n	8000b5a <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b18:	4413      	add	r3, r2
 8000b1a:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b2a:	3303      	adds	r3, #3
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b30:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b34:	1c9a      	adds	r2, r3, #2
 8000b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b38:	3301      	adds	r3, #1
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b44:	3302      	adds	r3, #2
 8000b46:	7812      	ldrb	r2, [r2, #0]
 8000b48:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b4c:	3303      	adds	r3, #3
 8000b4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b56:	3301      	adds	r3, #1
 8000b58:	663b      	str	r3, [r7, #96]	; 0x60
 8000b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	ddd8      	ble.n	8000b12 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4619      	mov	r1, r3
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f7ff fda8 	bl	80006bc <mavlink_sha256_calc>
	    offset = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1a4      	bne.n	8000ac0 <mavlink_sha256_update+0x44>
	}
    }
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3770      	adds	r7, #112	; 0x70
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b098      	sub	sp, #96	; 0x60
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b94:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b98:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3308      	adds	r3, #8
 8000ba8:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	2247      	movs	r2, #71	; 0x47
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f008 fe05 	bl	80097c8 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bc4:	3307      	adds	r3, #7
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	3360      	adds	r3, #96	; 0x60
 8000bca:	443b      	add	r3, r7
 8000bcc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	0a1a      	lsrs	r2, r3, #8
 8000bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bd8:	3306      	adds	r3, #6
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	3360      	adds	r3, #96	; 0x60
 8000bde:	443b      	add	r3, r7
 8000be0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	0c1a      	lsrs	r2, r3, #16
 8000bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bec:	3305      	adds	r3, #5
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	3360      	adds	r3, #96	; 0x60
 8000bf2:	443b      	add	r3, r7
 8000bf4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	0e1a      	lsrs	r2, r3, #24
 8000bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c00:	3304      	adds	r3, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	3360      	adds	r3, #96	; 0x60
 8000c06:	443b      	add	r3, r7
 8000c08:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c12:	3303      	adds	r3, #3
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	3360      	adds	r3, #96	; 0x60
 8000c18:	443b      	add	r3, r7
 8000c1a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	0a1a      	lsrs	r2, r3, #8
 8000c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c26:	3302      	adds	r3, #2
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	3360      	adds	r3, #96	; 0x60
 8000c2c:	443b      	add	r3, r7
 8000c2e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	0c1a      	lsrs	r2, r3, #16
 8000c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	3360      	adds	r3, #96	; 0x60
 8000c40:	443b      	add	r3, r7
 8000c42:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	0e1b      	lsrs	r3, r3, #24
 8000c4c:	b2d9      	uxtb	r1, r3
 8000c4e:	f107 020c 	add.w	r2, r7, #12
 8000c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c54:	4413      	add	r3, r2
 8000c56:	460a      	mov	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c5c:	f103 0208 	add.w	r2, r3, #8
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	4619      	mov	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff08 	bl	8000a7c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c6e:	78da      	ldrb	r2, [r3, #3]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c7a:	7892      	ldrb	r2, [r2, #2]
 8000c7c:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	3302      	adds	r3, #2
 8000c82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c84:	7852      	ldrb	r2, [r2, #1]
 8000c86:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	3303      	adds	r3, #3
 8000c8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3304      	adds	r3, #4
 8000c96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c98:	79d2      	ldrb	r2, [r2, #7]
 8000c9a:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	3305      	adds	r3, #5
 8000ca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ca2:	7992      	ldrb	r2, [r2, #6]
 8000ca4:	701a      	strb	r2, [r3, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	3760      	adds	r7, #96	; 0x60
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <mavlink_get_channel_status+0x24>)
 8000cc6:	4413      	add	r3, r2
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	200004bc 	.word	0x200004bc

08000cd8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f44f 7292 	mov.w	r2, #292	; 0x124
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <mavlink_get_channel_buffer+0x24>)
 8000cee:	4413      	add	r3, r2
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	2000051c 	.word	0x2000051c

08000d00 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b0a0      	sub	sp, #128	; 0x80
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <mavlink_sign_packet+0x20>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <mavlink_sign_packet+0x24>
	    return 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e04f      	b.n	8000dc4 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	785a      	ldrb	r2, [r3, #1]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d32:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f107 0110 	add.w	r1, r7, #16
 8000d3e:	2206      	movs	r2, #6
 8000d40:	4618      	mov	r0, r3
 8000d42:	f008 fd6d 	bl	8009820 <memcpy>
	signing->timestamp++;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d4c:	1c54      	adds	r4, r2, #1
 8000d4e:	f143 0500 	adc.w	r5, r3, #0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fc75 	bl	800064c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f103 0110 	add.w	r1, r3, #16
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fe84 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000d74:	78fa      	ldrb	r2, [r7, #3]
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe7d 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000d82:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000d86:	f107 0318 	add.w	r3, r7, #24
 8000d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fe74 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	2202      	movs	r2, #2
 8000d9a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fe6c 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	2207      	movs	r2, #7
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fe65 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1dda      	adds	r2, r3, #7
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fedf 	bl	8000b80 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000dc2:	230d      	movs	r3, #13
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3780      	adds	r7, #128	; 0x80
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}

08000dcc <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000dd8:	e002      	b.n	8000de0 <_mav_trim_payload+0x14>
		length--;
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d906      	bls.n	8000df4 <_mav_trim_payload+0x28>
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f2      	beq.n	8000dda <_mav_trim_payload+0xe>
	}
	return length;
 8000df4:	78fb      	ldrb	r3, [r7, #3]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8000e04:	b5b0      	push	{r4, r5, r7, lr}
 8000e06:	b0aa      	sub	sp, #168	; 0xa8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <mavlink_signature_check+0x16>
		return true;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e13e      	b.n	8001098 <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000e28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8000e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e30:	3307      	adds	r3, #7
 8000e32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8000e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fc06 	bl	800064c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f103 0110 	add.w	r1, r3, #16
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe15 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8000e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e56:	220a      	movs	r2, #10
 8000e58:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe0d 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f103 010c 	add.w	r1, r3, #12
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	78db      	ldrb	r3, [r3, #3]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fe02 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	2202      	movs	r2, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fdf9 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8000e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8e:	2207      	movs	r2, #7
 8000e90:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fdf1 	bl	8000a7c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8000e9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fe6b 	bl	8000b80 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	2206      	movs	r2, #6
 8000eb0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f008 fc77 	bl	80097a8 <memcmp>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d005      	beq.n	8000ecc <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return false;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e0e5      	b.n	8001098 <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8000ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8000ee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ee6:	1c59      	adds	r1, r3, #1
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	2206      	movs	r2, #6
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f008 fc96 	bl	8009820 <memcpy>

	if (signing_streams == NULL) {
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d105      	bne.n	8000f06 <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2203      	movs	r2, #3
 8000efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                return false;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e0c8      	b.n	8001098 <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000f0c:	e02b      	b.n	8000f66 <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	79d9      	ldrb	r1, [r3, #7]
 8000f12:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f16:	68b8      	ldr	r0, [r7, #8]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4403      	add	r3, r0
 8000f20:	3303      	adds	r3, #3
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4299      	cmp	r1, r3
 8000f26:	d119      	bne.n	8000f5c <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7a19      	ldrb	r1, [r3, #8]
 8000f2c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f30:	68b8      	ldr	r0, [r7, #8]
 8000f32:	4613      	mov	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	4403      	add	r3, r0
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d10c      	bne.n	8000f5c <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8000f42:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3302      	adds	r3, #2
 8000f52:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8000f54:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d00b      	beq.n	8000f74 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000f5c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000f60:	3301      	adds	r3, #1
 8000f62:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3cd      	bcc.n	8000f0e <mavlink_signature_check+0x10a>
 8000f72:	e000      	b.n	8000f76 <mavlink_signature_check+0x172>
			break;
 8000f74:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d146      	bne.n	8001010 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	2b0f      	cmp	r3, #15
 8000f88:	d905      	bls.n	8000f96 <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e080      	b.n	8001098 <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8000f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f9a:	4941      	ldr	r1, [pc, #260]	; (80010a0 <mavlink_signature_check+0x29c>)
 8000f9c:	1854      	adds	r4, r2, r1
 8000f9e:	f143 0500 	adc.w	r5, r3, #0
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fa8:	4294      	cmp	r4, r2
 8000faa:	eb75 0303 	sbcs.w	r3, r5, r3
 8000fae:	d205      	bcs.n	8000fbc <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e06d      	b.n	8001098 <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8000fbc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	79d8      	ldrb	r0, [r3, #7]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4413      	add	r3, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	3303      	adds	r3, #3
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8000fd4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7a18      	ldrb	r0, [r3, #8]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	4602      	mov	r2, r0
 8000fea:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8000fec:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001000:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	b29a      	uxth	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	801a      	strh	r2, [r3, #0]
 800100e:	e021      	b.n	8001054 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800101c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	4413      	add	r3, r2
 800102a:	1d59      	adds	r1, r3, #5
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	2206      	movs	r2, #6
 8001032:	4618      	mov	r0, r3
 8001034:	f008 fbf4 	bl	8009820 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800103c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001040:	4290      	cmp	r0, r2
 8001042:	eb71 0303 	sbcs.w	r3, r1, r3
 8001046:	d305      	bcc.n	8001054 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2206      	movs	r2, #6
 800104c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8001050:	2300      	movs	r3, #0
 8001052:	e021      	b.n	8001098 <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001054:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	4413      	add	r3, r2
 8001062:	1d58      	adds	r0, r3, #5
 8001064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001068:	3301      	adds	r3, #1
 800106a:	2206      	movs	r2, #6
 800106c:	4619      	mov	r1, r3
 800106e:	f008 fbd7 	bl	8009820 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001076:	68f9      	ldr	r1, [r7, #12]
 8001078:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800107c:	4290      	cmp	r0, r2
 800107e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001082:	d204      	bcs.n	800108e <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8001084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001088:	68f9      	ldr	r1, [r7, #12]
 800108a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return true;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	37a8      	adds	r7, #168	; 0xa8
 800109c:	46bd      	mov	sp, r7
 800109e:	bdb0      	pop	{r4, r5, r7, pc}
 80010a0:	005b8d80 	.word	0x005b8d80

080010a4 <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	789b      	ldrb	r3, [r3, #2]
 80010b0:	3301      	adds	r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	709a      	strb	r2, [r3, #2]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_mav_finalize_message_chan_send>:
 * @brief Finalize a MAVLink message with channel assignment and send
 */
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint32_t msgid,
                                                    const char *packet, 
						    uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b0db      	sub	sp, #364	; 0x16c
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	4604      	mov	r4, r0
 80010cc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80010d0:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 80010d4:	6001      	str	r1, [r0, #0]
 80010d6:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80010da:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 80010de:	600a      	str	r2, [r1, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010e6:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80010ea:	4622      	mov	r2, r4
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010f2:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
 80010f6:	460a      	mov	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80010fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010fe:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fdd3 	bl	8000cb0 <mavlink_get_channel_status>
 800110a:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN;
 800110e:	2309      	movs	r3, #9
 8001110:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint8_t signature_len = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN];
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 800111a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800111e:	7b1b      	ldrb	r3, [r3, #12]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf14      	ite	ne
 8001128:	2301      	movne	r3, #1
 800112a:	2300      	moveq	r3, #0
 800112c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001130:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001134:	f083 0301 	eor.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00e      	beq.n	800115c <_mav_finalize_message_chan_send+0x98>
 800113e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d009      	beq.n	800115c <_mav_finalize_message_chan_send+0x98>
 8001148:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <_mav_finalize_message_chan_send+0x98>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <_mav_finalize_message_chan_send+0x9a>
 800115c:	2300      	movs	r3, #0
 800115e:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8001162:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e

        if (mavlink1) {
 800116e:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001172:	2b00      	cmp	r3, #0
 8001174:	d032      	beq.n	80011dc <_mav_finalize_message_chan_send+0x118>
            length = min_length;
 8001176:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800117a:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
            if (msgid > 255) {
 8001184:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001188:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2bff      	cmp	r3, #255	; 0xff
 8001190:	d904      	bls.n	800119c <_mav_finalize_message_chan_send+0xd8>
                // can't send 16 bit messages
                _mav_parse_error(status);
 8001192:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8001196:	f7ff ff85 	bl	80010a4 <_mav_parse_error>
 800119a:	e112      	b.n	80013c2 <_mav_finalize_message_chan_send+0x2fe>
                return;
            }
            header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800119c:	2305      	movs	r3, #5
 800119e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
            buf[0] = MAVLINK_STX_MAVLINK1;
 80011a2:	23fe      	movs	r3, #254	; 0xfe
 80011a4:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
            buf[1] = length;
 80011a8:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 80011ac:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
            buf[2] = status->current_tx_seq;
 80011b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011b4:	799b      	ldrb	r3, [r3, #6]
 80011b6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
            buf[3] = mavlink_system.sysid;
 80011ba:	4b84      	ldr	r3, [pc, #528]	; (80013cc <_mav_finalize_message_chan_send+0x308>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            buf[4] = mavlink_system.compid;
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <_mav_finalize_message_chan_send+0x308>)
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
            buf[5] = msgid & 0xFF;
 80011ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011ce:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 80011da:	e04e      	b.n	800127a <_mav_finalize_message_chan_send+0x1b6>
        } else {
	    uint8_t incompat_flags = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
	    if (signing) {
 80011e2:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <_mav_finalize_message_chan_send+0x132>
		incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80011ea:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
	    }
            length = _mav_trim_payload(packet, length);
 80011f6:	f897 2168 	ldrb.w	r2, [r7, #360]	; 0x168
 80011fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001202:	4611      	mov	r1, r2
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f7ff fde1 	bl	8000dcc <_mav_trim_payload>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
            buf[0] = MAVLINK_STX;
 8001210:	23fd      	movs	r3, #253	; 0xfd
 8001212:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
            buf[1] = length;
 8001216:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 800121a:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
            buf[2] = incompat_flags;
 800121e:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 8001222:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
            buf[3] = 0; // compat_flags
 8001226:	2300      	movs	r3, #0
 8001228:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            buf[4] = status->current_tx_seq;
 800122c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001230:	799b      	ldrb	r3, [r3, #6]
 8001232:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
            buf[5] = mavlink_system.sysid;
 8001236:	4b65      	ldr	r3, [pc, #404]	; (80013cc <_mav_finalize_message_chan_send+0x308>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
            buf[6] = mavlink_system.compid;
 800123e:	4b63      	ldr	r3, [pc, #396]	; (80013cc <_mav_finalize_message_chan_send+0x308>)
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
            buf[7] = msgid & 0xFF;
 8001246:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800124a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
            buf[8] = (msgid >> 8) & 0xFF;
 8001256:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800125a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
            buf[9] = (msgid >> 16) & 0xFF;
 8001268:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800126c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0c1b      	lsrs	r3, r3, #16
 8001274:	b2db      	uxtb	r3, r3
 8001276:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
        }
	status->current_tx_seq++;
 800127a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800127e:	799b      	ldrb	r3, [r3, #6]
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001288:	719a      	strb	r2, [r3, #6]
	checksum = crc_calculate((const uint8_t*)&buf[1], header_len);
 800128a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800128e:	b29a      	uxth	r2, r3
 8001290:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001294:	3301      	adds	r3, #1
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f99b 	bl	80005d4 <crc_calculate>
 800129e:	4603      	mov	r3, r0
 80012a0:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
	crc_accumulate_buffer(&checksum, packet, length);
 80012a4:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80012ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80012b2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	f7ff f9ac 	bl	8000614 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 80012bc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80012c0:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f944 	bl	8000554 <crc_accumulate>
	ck[0] = (uint8_t)(checksum & 0xFF);
 80012cc:	f8b7 3148 	ldrh.w	r3, [r7, #328]	; 0x148
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
	ck[1] = (uint8_t)(checksum >> 8);
 80012d6:	f8b7 3148 	ldrh.w	r3, [r7, #328]	; 0x148
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 80012e4:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d01c      	beq.n	8001326 <_mav_finalize_message_chan_send+0x262>
		// possibly add a signature
		signature_len = mavlink_sign_packet(status->signing, signature, buf, header_len+1,
 80012ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012f0:	6918      	ldr	r0, [r3, #16]
 80012f2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80012f6:	3301      	adds	r3, #1
 80012f8:	b2dc      	uxtb	r4, r3
 80012fa:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80012fe:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001302:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001312:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	4623      	mov	r3, r4
 800131c:	f7ff fcf0 	bl	8000d00 <mavlink_sign_packet>
 8001320:	4603      	mov	r3, r0
 8001322:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	}
#endif

    #ifdef MAVLINK_SEND_WHOLE_DATA_OVERRIDE
        //try sending the message in one long packet, instead of multiple small ones
        uint8_t outBuf[MAVLINK_MAX_MESSAGE_LENGTH] = {0};
 8001326:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800132a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	3304      	adds	r3, #4
 8001334:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f008 fa44 	bl	80097c8 <memset>

        const uint8_t headerLength = MAVLINK_NUM_HEADER_BYTES;
 8001340:	230a      	movs	r3, #10
 8001342:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
        memcpy(&outBuf,&buf,headerLength);
 8001346:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
 800134a:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f008 fa64 	bl	8009820 <memcpy>

        memcpy(&outBuf[headerLength], packet, length);
 8001358:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 800135c:	f107 0210 	add.w	r2, r7, #16
 8001360:	18d0      	adds	r0, r2, r3
 8001362:	f897 2168 	ldrb.w	r2, [r7, #360]	; 0x168
 8001366:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800136a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800136e:	6819      	ldr	r1, [r3, #0]
 8001370:	f008 fa56 	bl	8009820 <memcpy>

        memcpy(&outBuf[headerLength+length], ck, 2);
 8001374:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
 8001378:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 800137c:	4413      	add	r3, r2
 800137e:	f107 0210 	add.w	r2, r7, #16
 8001382:	4413      	add	r3, r2
 8001384:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8001388:	801a      	strh	r2, [r3, #0]

        uint16_t bufferLen = header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800138a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800138e:	b29a      	uxth	r2, r3
 8001390:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8001394:	b29b      	uxth	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	b29a      	uxth	r2, r3
 800139a:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3303      	adds	r3, #3
 80013a6:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a

        _mavlink_send_uart(chan, (const char *)outBuf,bufferLen);
 80013aa:	f8b7 214a 	ldrh.w	r2, [r7, #330]	; 0x14a
 80013ae:	f107 0110 	add.w	r1, r7, #16
 80013b2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013b6:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fb9d 	bl	8001afc <_mavlink_send_uart>
            _mavlink_send_uart(chan, (const char *)signature, signature_len);
        }
        MAVLINK_END_UART_SEND(chan, header_len + 3 + (uint16_t)length + (uint16_t)signature_len);

    #endif
}
 80013c2:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000028 	.word	0x20000028

080013d0 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 80013dc:	f107 030e 	add.w	r3, r7, #14
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8e9 	bl	80005b8 <crc_init>
	msg->checksum = crcTmp;
 80013e6:	89fa      	ldrh	r2, [r7, #14]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	801a      	strh	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001406:	f107 020e 	add.w	r2, r7, #14
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8a0 	bl	8000554 <crc_accumulate>
	msg->checksum = checksum;
 8001414:	89fa      	ldrh	r2, [r7, #14]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	801a      	strh	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	2306      	movs	r3, #6
 8001432:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001434:	e025      	b.n	8001482 <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4413      	add	r3, r2
 800143c:	3301      	adds	r3, #1
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001442:	491f      	ldr	r1, [pc, #124]	; (80014c0 <mavlink_get_msg_entry+0x9c>)
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d203      	bcs.n	8001460 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3b01      	subs	r3, #1
 800145c:	613b      	str	r3, [r7, #16]
                continue;
 800145e:	e010      	b.n	8001482 <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001460:	4917      	ldr	r1, [pc, #92]	; (80014c0 <mavlink_get_msg_entry+0x9c>)
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d902      	bls.n	800147c <mavlink_get_msg_entry+0x58>
                low = mid;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	617b      	str	r3, [r7, #20]
                continue;
 800147a:	e002      	b.n	8001482 <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	617b      	str	r3, [r7, #20]
            break;
 8001480:	e003      	b.n	800148a <mavlink_get_msg_entry+0x66>
        while (low < high) {
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3d5      	bcc.n	8001436 <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <mavlink_get_msg_entry+0x9c>)
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e006      	b.n	80014b2 <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <mavlink_get_msg_entry+0x9c>)
 80014b0:	4413      	add	r3, r2
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	08009978 	.word	0x08009978

080014c4 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	78db      	ldrb	r3, [r3, #3]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	f200 8258 	bhi.w	8001994 <mavlink_frame_char_buffer+0x4d0>
 80014e4:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <mavlink_frame_char_buffer+0x28>)
 80014e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ea:	bf00      	nop
 80014ec:	0800152d 	.word	0x0800152d
 80014f0:	0800152d 	.word	0x0800152d
 80014f4:	0800158b 	.word	0x0800158b
 80014f8:	080015f1 	.word	0x080015f1
 80014fc:	08001629 	.word	0x08001629
 8001500:	08001641 	.word	0x08001641
 8001504:	08001659 	.word	0x08001659
 8001508:	08001671 	.word	0x08001671
 800150c:	08001689 	.word	0x08001689
 8001510:	080016e3 	.word	0x080016e3
 8001514:	08001727 	.word	0x08001727
 8001518:	0800177b 	.word	0x0800177b
 800151c:	080017b3 	.word	0x080017b3
 8001520:	08001835 	.word	0x08001835
 8001524:	08001835 	.word	0x08001835
 8001528:	080018e7 	.word	0x080018e7
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2bfd      	cmp	r3, #253	; 0xfd
 8001530:	d113      	bne.n	800155a <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2202      	movs	r2, #2
 8001536:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	79fa      	ldrb	r2, [r7, #7]
 8001542:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	7b1b      	ldrb	r3, [r3, #12]
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff ff3c 	bl	80013d0 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001558:	e213      	b.n	8001982 <mavlink_frame_char_buffer+0x4be>
		} else if (c == MAVLINK_STX_MAVLINK1)
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2bfe      	cmp	r3, #254	; 0xfe
 800155e:	f040 8210 	bne.w	8001982 <mavlink_frame_char_buffer+0x4be>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2202      	movs	r2, #2
 8001566:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	79fa      	ldrb	r2, [r7, #7]
 8001572:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	7b1b      	ldrb	r3, [r3, #12]
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f7ff ff24 	bl	80013d0 <mavlink_start_checksum>
		break;
 8001588:	e1fb      	b.n	8001982 <mavlink_frame_char_buffer+0x4be>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00f      	beq.n	80015b2 <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	3301      	adds	r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f7ff fd80 	bl	80010a4 <_mav_parse_error>
			status->msg_received = 0;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2201      	movs	r2, #1
 80015ae:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 80015b0:	e1f0      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
			rxmsg->len = c;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2200      	movs	r2, #0
 80015bc:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7ff ff16 	bl	80013f4 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	7b1b      	ldrb	r3, [r3, #12]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2205      	movs	r2, #5
 80015e4:	70da      	strb	r2, [r3, #3]
		break;
 80015e6:	e1d5      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2203      	movs	r2, #3
 80015ec:	70da      	strb	r2, [r3, #3]
		break;
 80015ee:	e1d1      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	79fa      	ldrb	r2, [r7, #7]
 80015f4:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	791b      	ldrb	r3, [r3, #4]
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <mavlink_frame_char_buffer+0x152>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001602:	68b8      	ldr	r0, [r7, #8]
 8001604:	f7ff fd4e 	bl	80010a4 <_mav_parse_error>
			status->msg_received = 0;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2201      	movs	r2, #1
 8001612:	70da      	strb	r2, [r3, #3]
			break;
 8001614:	e1be      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
		}
		mavlink_update_checksum(rxmsg, c);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4619      	mov	r1, r3
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff feea 	bl	80013f4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2204      	movs	r2, #4
 8001624:	70da      	strb	r2, [r3, #3]
		break;
 8001626:	e1b5      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4619      	mov	r1, r3
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff fede 	bl	80013f4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2205      	movs	r2, #5
 800163c:	70da      	strb	r2, [r3, #3]
		break;
 800163e:	e1a9      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4619      	mov	r1, r3
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff fed2 	bl	80013f4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2206      	movs	r2, #6
 8001654:	70da      	strb	r2, [r3, #3]
		break;
 8001656:	e19d      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4619      	mov	r1, r3
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fec6 	bl	80013f4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2207      	movs	r2, #7
 800166c:	70da      	strb	r2, [r3, #3]
		break;
 800166e:	e191      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	79fa      	ldrb	r2, [r7, #7]
 8001674:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4619      	mov	r1, r3
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7ff feba 	bl	80013f4 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2208      	movs	r2, #8
 8001684:	70da      	strb	r2, [r3, #3]
		break;
 8001686:	e185      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	b2d9      	uxtb	r1, r3
 8001692:	2000      	movs	r0, #0
 8001694:	4301      	orrs	r1, r0
 8001696:	7251      	strb	r1, [r2, #9]
 8001698:	0a19      	lsrs	r1, r3, #8
 800169a:	b2c9      	uxtb	r1, r1
 800169c:	2000      	movs	r0, #0
 800169e:	4301      	orrs	r1, r0
 80016a0:	7291      	strb	r1, [r2, #10]
 80016a2:	0c1b      	lsrs	r3, r3, #16
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	430b      	orrs	r3, r1
 80016aa:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4619      	mov	r1, r3
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fe9f 	bl	80013f4 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	7b1b      	ldrb	r3, [r3, #12]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <mavlink_frame_char_buffer+0x216>
			if(rxmsg->len > 0) {
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <mavlink_frame_char_buffer+0x20e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	220b      	movs	r2, #11
 80016ce:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 80016d0:	e160      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	220c      	movs	r2, #12
 80016d6:	70da      	strb	r2, [r3, #3]
		break;
 80016d8:	e15c      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2209      	movs	r2, #9
 80016de:	70da      	strb	r2, [r3, #3]
		break;
 80016e0:	e158      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80016ea:	461a      	mov	r2, r3
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	4313      	orrs	r3, r2
 80016f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	b2d1      	uxtb	r1, r2
 80016fa:	2000      	movs	r0, #0
 80016fc:	4301      	orrs	r1, r0
 80016fe:	7259      	strb	r1, [r3, #9]
 8001700:	0a11      	lsrs	r1, r2, #8
 8001702:	b2c9      	uxtb	r1, r1
 8001704:	2000      	movs	r0, #0
 8001706:	4301      	orrs	r1, r0
 8001708:	7299      	strb	r1, [r3, #10]
 800170a:	0c12      	lsrs	r2, r2, #16
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	2100      	movs	r1, #0
 8001710:	430a      	orrs	r2, r1
 8001712:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4619      	mov	r1, r3
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff fe6b 	bl	80013f4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	220a      	movs	r2, #10
 8001722:	70da      	strb	r2, [r3, #3]
		break;
 8001724:	e136      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800172e:	461a      	mov	r2, r3
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	4313      	orrs	r3, r2
 8001736:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	b2d1      	uxtb	r1, r2
 800173e:	2000      	movs	r0, #0
 8001740:	4301      	orrs	r1, r0
 8001742:	7259      	strb	r1, [r3, #9]
 8001744:	0a11      	lsrs	r1, r2, #8
 8001746:	b2c9      	uxtb	r1, r1
 8001748:	2000      	movs	r0, #0
 800174a:	4301      	orrs	r1, r0
 800174c:	7299      	strb	r1, [r3, #10]
 800174e:	0c12      	lsrs	r2, r2, #16
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	2100      	movs	r1, #0
 8001754:	430a      	orrs	r2, r1
 8001756:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4619      	mov	r1, r3
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fe49 	bl	80013f4 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	78db      	ldrb	r3, [r3, #3]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <mavlink_frame_char_buffer+0x2ae>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	220b      	movs	r2, #11
 800176e:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001770:	e110      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	220c      	movs	r2, #12
 8001776:	70da      	strb	r2, [r3, #3]
		break;
 8001778:	e10c      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f103 020c 	add.w	r2, r3, #12
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	791b      	ldrb	r3, [r3, #4]
 8001784:	1c59      	adds	r1, r3, #1
 8001786:	b2c8      	uxtb	r0, r1
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	7108      	strb	r0, [r1, #4]
 800178c:	4413      	add	r3, r2
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4619      	mov	r1, r3
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fe2c 	bl	80013f4 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	791a      	ldrb	r2, [r3, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	78db      	ldrb	r3, [r3, #3]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 80ee 	bne.w	8001986 <mavlink_frame_char_buffer+0x4c2>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	220c      	movs	r2, #12
 80017ae:	70da      	strb	r2, [r3, #3]
		}
		break;
 80017b0:	e0e9      	b.n	8001986 <mavlink_frame_char_buffer+0x4c2>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe32 	bl	8001424 <mavlink_get_msg_entry>
 80017c0:	61b8      	str	r0, [r7, #24]
		uint8_t crc_extra = e?e->crc_extra:0;
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <mavlink_frame_char_buffer+0x30a>
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	791b      	ldrb	r3, [r3, #4]
 80017cc:	e000      	b.n	80017d0 <mavlink_frame_char_buffer+0x30c>
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]
		mavlink_update_checksum(rxmsg, crc_extra);
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff fe0c 	bl	80013f4 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 80017dc:	79fa      	ldrb	r2, [r7, #7]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d003      	beq.n	80017f0 <mavlink_frame_char_buffer+0x32c>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	220e      	movs	r2, #14
 80017ec:	70da      	strb	r2, [r3, #3]
 80017ee:	e002      	b.n	80017f6 <mavlink_frame_char_buffer+0x332>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	220d      	movs	r2, #13
 80017f4:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80c2 	beq.w	800198a <mavlink_frame_char_buffer+0x4c6>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	791a      	ldrb	r2, [r3, #4]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	799b      	ldrb	r3, [r3, #6]
 800180e:	429a      	cmp	r2, r3
 8001810:	f080 80bb 	bcs.w	800198a <mavlink_frame_char_buffer+0x4c6>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	330c      	adds	r3, #12
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	7912      	ldrb	r2, [r2, #4]
 800181c:	1898      	adds	r0, r3, r2
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	799b      	ldrb	r3, [r3, #6]
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	791b      	ldrb	r3, [r3, #4]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	461a      	mov	r2, r3
 800182c:	2100      	movs	r1, #0
 800182e:	f007 ffcb 	bl	80097c8 <memset>
		}
		break;
 8001832:	e0aa      	b.n	800198a <mavlink_frame_char_buffer+0x4c6>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	2b0e      	cmp	r3, #14
 800183a:	d007      	beq.n	800184c <mavlink_frame_char_buffer+0x388>
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	b29b      	uxth	r3, r3
 8001848:	429a      	cmp	r2, r3
 800184a:	d003      	beq.n	8001854 <mavlink_frame_char_buffer+0x390>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e002      	b.n	800185a <mavlink_frame_char_buffer+0x396>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	79fa      	ldrb	r2, [r7, #7]
 800185e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	791b      	ldrb	r3, [r3, #4]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00e      	beq.n	800188c <mavlink_frame_char_buffer+0x3c8>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	220f      	movs	r2, #15
 8001872:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	220d      	movs	r2, #13
 8001878:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	f000 8085 	beq.w	800198e <mavlink_frame_char_buffer+0x4ca>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 800188a:	e080      	b.n	800198e <mavlink_frame_char_buffer+0x4ca>
			if (status->signing &&
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01b      	beq.n	80018cc <mavlink_frame_char_buffer+0x408>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00f      	beq.n	80018be <mavlink_frame_char_buffer+0x3fa>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	6892      	ldr	r2, [r2, #8]
 80018a8:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80018ac:	4611      	mov	r1, r2
 80018ae:	68b8      	ldr	r0, [r7, #8]
 80018b0:	4798      	blx	r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <mavlink_frame_char_buffer+0x408>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d002      	beq.n	80018cc <mavlink_frame_char_buffer+0x408>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2203      	movs	r2, #3
 80018ca:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2201      	movs	r2, #1
 80018d0:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d05a      	beq.n	800198e <mavlink_frame_char_buffer+0x4ca>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80018d8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80018dc:	68f9      	ldr	r1, [r7, #12]
 80018de:	6838      	ldr	r0, [r7, #0]
 80018e0:	f007 ff9e 	bl	8009820 <memcpy>
		break;
 80018e4:	e053      	b.n	800198e <mavlink_frame_char_buffer+0x4ca>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	7b5b      	ldrb	r3, [r3, #13]
 80018ea:	f1c3 030d 	rsb	r3, r3, #13
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	7b5b      	ldrb	r3, [r3, #13]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	7b5b      	ldrb	r3, [r3, #13]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d142      	bne.n	8001992 <mavlink_frame_char_buffer+0x4ce>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	6918      	ldr	r0, [r3, #16]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff fa74 	bl	8000e04 <mavlink_signature_check>
 800191c:	4603      	mov	r3, r0
 800191e:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8001920:	7ffb      	ldrb	r3, [r7, #31]
 8001922:	f083 0301 	eor.w	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <mavlink_frame_char_buffer+0x490>
			   	(status->signing->accept_unsigned_callback &&
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00e      	beq.n	8001954 <mavlink_frame_char_buffer+0x490>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	6892      	ldr	r2, [r2, #8]
 8001940:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8001944:	4611      	mov	r1, r2
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	4798      	blx	r3
 800194a:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <mavlink_frame_char_buffer+0x490>
				// accepted via application level override
				sig_ok = true;
 8001950:	2301      	movs	r3, #1
 8001952:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8001954:	7ffb      	ldrb	r3, [r7, #31]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <mavlink_frame_char_buffer+0x49e>
				status->msg_received = MAVLINK_FRAMING_OK;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	e002      	b.n	8001968 <mavlink_frame_char_buffer+0x4a4>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2203      	movs	r2, #3
 8001966:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2201      	movs	r2, #1
 800196c:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00e      	beq.n	8001992 <mavlink_frame_char_buffer+0x4ce>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001974:	f44f 7292 	mov.w	r2, #292	; 0x124
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	6838      	ldr	r0, [r7, #0]
 800197c:	f007 ff50 	bl	8009820 <memcpy>
			}
		}
		break;
 8001980:	e007      	b.n	8001992 <mavlink_frame_char_buffer+0x4ce>
		break;
 8001982:	bf00      	nop
 8001984:	e006      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
		break;
 8001986:	bf00      	nop
 8001988:	e004      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
		break;
 800198a:	bf00      	nop
 800198c:	e002      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
		break;
 800198e:	bf00      	nop
 8001990:	e000      	b.n	8001994 <mavlink_frame_char_buffer+0x4d0>
		break;
 8001992:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d110      	bne.n	80019be <mavlink_frame_char_buffer+0x4fa>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	799a      	ldrb	r2, [r3, #6]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	891b      	ldrh	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <mavlink_frame_char_buffer+0x4ee>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2200      	movs	r2, #0
 80019b0:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	891b      	ldrh	r3, [r3, #8]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <mavlink_frame_char_buffer+0x508>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	78da      	ldrb	r2, [r3, #3]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 80019cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01a      	beq.n	8001a08 <mavlink_frame_char_buffer+0x544>
           r_mavlink_status->parse_state = status->parse_state;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	78da      	ldrb	r2, [r3, #3]
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	791a      	ldrb	r2, [r3, #4]
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e0:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	795b      	ldrb	r3, [r3, #5]
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	891a      	ldrh	r2, [r3, #8]
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	789b      	ldrb	r3, [r3, #2]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	7b1a      	ldrb	r2, [r3, #12]
 8001a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a06:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d110      	bne.n	8001a38 <mavlink_frame_char_buffer+0x574>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <mavlink_frame_char_buffer+0x574>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60ba      	str	r2, [r7, #8]
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	460b      	mov	r3, r1
 8001a54:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f93d 	bl	8000cd8 <mavlink_get_channel_buffer>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f924 	bl	8000cb0 <mavlink_get_channel_status>
 8001a68:	4601      	mov	r1, r0
 8001a6a:	7bba      	ldrb	r2, [r7, #14]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff fd26 	bl	80014c4 <mavlink_frame_char_buffer>
 8001a78:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd90      	pop	{r4, r7, pc}

08001a82 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b088      	sub	sp, #32
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60ba      	str	r2, [r7, #8]
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	460b      	mov	r3, r1
 8001a92:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8001a94:	7bb9      	ldrb	r1, [r7, #14]
 8001a96:	7bf8      	ldrb	r0, [r7, #15]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f7ff ffd2 	bl	8001a44 <mavlink_frame_char>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d002      	beq.n	8001ab0 <mavlink_parse_char+0x2e>
 8001aaa:	7ffb      	ldrb	r3, [r7, #31]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d120      	bne.n	8001af2 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f910 	bl	8000cd8 <mavlink_get_channel_buffer>
 8001ab8:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f8f7 	bl	8000cb0 <mavlink_get_channel_status>
 8001ac2:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8001ac4:	6978      	ldr	r0, [r7, #20]
 8001ac6:	f7ff faed 	bl	80010a4 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	2bfd      	cmp	r3, #253	; 0xfd
 8001ada:	d108      	bne.n	8001aee <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8001ae8:	69b8      	ldr	r0, [r7, #24]
 8001aea:	f7ff fc71 	bl	80013d0 <mavlink_start_checksum>
	    }
	    return 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8001af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	80bb      	strh	r3, [r7, #4]
#ifdef MAVLINK_SEND_UART_BYTES
	/* this is the more efficient approach, if the platform
	   defines it */
    mavlink_comm_send_bytes(chan, (const uint8_t *)buf, len);
 8001b0c:	88ba      	ldrh	r2, [r7, #4]
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	6839      	ldr	r1, [r7, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fcfe 	bl	8000514 <mavlink_comm_send_bytes>
	uint16_t i;
	for (i = 0; i < len; i++) {
		mavlink_comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <mavlink_msg_heartbeat_send_struct>:
 * @brief Send a heartbeat message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_heartbeat_send_struct(mavlink_channel_t chan, const mavlink_heartbeat_t* heartbeat)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_heartbeat_send(chan, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)heartbeat, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8001b2c:	79f8      	ldrb	r0, [r7, #7]
 8001b2e:	2332      	movs	r3, #50	; 0x32
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	2309      	movs	r3, #9
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2309      	movs	r3, #9
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f7ff fac2 	bl	80010c4 <_mav_finalize_message_chan_send>
#endif
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	78db      	ldrb	r3, [r3, #3]
 8001b56:	2b09      	cmp	r3, #9
 8001b58:	bf28      	it	cs
 8001b5a:	2309      	movcs	r3, #9
 8001b5c:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001b5e:	2209      	movs	r2, #9
 8001b60:	2100      	movs	r1, #0
 8001b62:	6838      	ldr	r0, [r7, #0]
 8001b64:	f007 fe30 	bl	80097c8 <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	330c      	adds	r3, #12
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f007 fe55 	bl	8009820 <memcpy>
#endif
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <mavlink_msg_zora_led_status_send_struct>:
 * @brief Send a zora_led_status message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_zora_led_status_send_struct(mavlink_channel_t chan, const mavlink_zora_led_status_t* zora_led_status)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af02      	add	r7, sp, #8
 8001b84:	4603      	mov	r3, r0
 8001b86:	6039      	str	r1, [r7, #0]
 8001b88:	71fb      	strb	r3, [r7, #7]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_zora_led_status_send(chan, zora_led_status->LED_GREEN_STATUS, zora_led_status->LED_ORANGE_STATUS, zora_led_status->LED_RED_STATUS);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ZORA_LED_STATUS, (const char *)zora_led_status, MAVLINK_MSG_ID_ZORA_LED_STATUS_MIN_LEN, MAVLINK_MSG_ID_ZORA_LED_STATUS_LEN, MAVLINK_MSG_ID_ZORA_LED_STATUS_CRC);
 8001b8a:	79f8      	ldrb	r0, [r7, #7]
 8001b8c:	2335      	movs	r3, #53	; 0x35
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	2303      	movs	r3, #3
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2303      	movs	r3, #3
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	210a      	movs	r1, #10
 8001b9a:	f7ff fa93 	bl	80010c4 <_mav_finalize_message_chan_send>
#endif
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
    command_long->command = mavlink_msg_command_long_get_command(msg);
    command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
    command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
    command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_LONG_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_LONG_LEN;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	78db      	ldrb	r3, [r3, #3]
 8001bb4:	2b21      	cmp	r3, #33	; 0x21
 8001bb6:	bf28      	it	cs
 8001bb8:	2321      	movcs	r3, #33	; 0x21
 8001bba:	73fb      	strb	r3, [r7, #15]
        memset(command_long, 0, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 8001bbc:	2221      	movs	r2, #33	; 0x21
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	6838      	ldr	r0, [r7, #0]
 8001bc2:	f007 fe01 	bl	80097c8 <memset>
    memcpy(command_long, _MAV_PAYLOAD(msg), len);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6838      	ldr	r0, [r7, #0]
 8001bd0:	f007 fe26 	bl	8009820 <memcpy>
#endif
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <mavlink_msg_command_ack_send_struct>:
 * @brief Send a command_ack message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_command_ack_send_struct(mavlink_channel_t chan, const mavlink_command_ack_t* command_ack)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_command_ack_send(chan, command_ack->command, command_ack->result, command_ack->progress, command_ack->result_param2, command_ack->target_system, command_ack->target_component);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_COMMAND_ACK, (const char *)command_ack, MAVLINK_MSG_ID_COMMAND_ACK_MIN_LEN, MAVLINK_MSG_ID_COMMAND_ACK_LEN, MAVLINK_MSG_ID_COMMAND_ACK_CRC);
 8001be8:	79f8      	ldrb	r0, [r7, #7]
 8001bea:	238f      	movs	r3, #143	; 0x8f
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	230a      	movs	r3, #10
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	214d      	movs	r1, #77	; 0x4d
 8001bf8:	f7ff fa64 	bl	80010c4 <_mav_finalize_message_chan_send>
#endif
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <mavlink_msg_protocol_version_send_struct>:
 * @brief Send a protocol_version message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_protocol_version_send_struct(mavlink_channel_t chan, const mavlink_protocol_version_t* protocol_version)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_protocol_version_send(chan, protocol_version->version, protocol_version->min_version, protocol_version->max_version, protocol_version->spec_version_hash, protocol_version->library_version_hash);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PROTOCOL_VERSION, (const char *)protocol_version, MAVLINK_MSG_ID_PROTOCOL_VERSION_MIN_LEN, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN, MAVLINK_MSG_ID_PROTOCOL_VERSION_CRC);
 8001c10:	79f8      	ldrb	r0, [r7, #7]
 8001c12:	23d9      	movs	r3, #217	; 0xd9
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	2316      	movs	r3, #22
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2316      	movs	r3, #22
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001c22:	f7ff fa4f 	bl	80010c4 <_mav_finalize_message_chan_send>
#endif
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <mavlink_msg_protocol_version_decode>:
 *
 * @param msg The message to decode
 * @param protocol_version C-struct to decode the message contents into
 */
static inline void mavlink_msg_protocol_version_decode(const mavlink_message_t* msg, mavlink_protocol_version_t* protocol_version)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
    protocol_version->min_version = mavlink_msg_protocol_version_get_min_version(msg);
    protocol_version->max_version = mavlink_msg_protocol_version_get_max_version(msg);
    mavlink_msg_protocol_version_get_spec_version_hash(msg, protocol_version->spec_version_hash);
    mavlink_msg_protocol_version_get_library_version_hash(msg, protocol_version->library_version_hash);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN? msg->len : MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	78db      	ldrb	r3, [r3, #3]
 8001c3c:	2b16      	cmp	r3, #22
 8001c3e:	bf28      	it	cs
 8001c40:	2316      	movcs	r3, #22
 8001c42:	73fb      	strb	r3, [r7, #15]
        memset(protocol_version, 0, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN);
 8001c44:	2216      	movs	r2, #22
 8001c46:	2100      	movs	r1, #0
 8001c48:	6838      	ldr	r0, [r7, #0]
 8001c4a:	f007 fdbd 	bl	80097c8 <memset>
    memcpy(protocol_version, _MAV_PAYLOAD(msg), len);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	330c      	adds	r3, #12
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	4619      	mov	r1, r3
 8001c56:	6838      	ldr	r0, [r7, #0]
 8001c58:	f007 fde2 	bl	8009820 <memcpy>
#endif
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <setLEDs>:
#pragma once

#ifndef CTU_SR_ZORA_MAVLINK_MAVLINKCOMMANDS_HPP
#define CTU_SR_ZORA_MAVLINK_MAVLINKCOMMANDS_HPP

static void setLEDs(bool green, bool orange, bool red){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	71bb      	strb	r3, [r7, #6]
 8001c72:	4613      	mov	r3, r2
 8001c74:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, green);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c7e:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <setLEDs+0x44>)
 8001c80:	f003 f972 	bl	8004f68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, orange);
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8c:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <setLEDs+0x44>)
 8001c8e:	f003 f96b 	bl	8004f68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, red);
 8001c92:	797b      	ldrb	r3, [r7, #5]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <setLEDs+0x44>)
 8001c9c:	f003 f964 	bl	8004f68 <HAL_GPIO_WritePin>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	48000800 	.word	0x48000800

08001cac <MAVlinkSetLEDs>:

static void MAVlinkWriteLEDstatus();
static void MAVlinkSetLEDs(const mavlink_command_long_t * const command){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

    setLEDs((bool)command->param1, (bool)command->param2, (bool)command->param3);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	bf14      	ite	ne
 8001cc4:	2301      	movne	r3, #1
 8001cc6:	2300      	moveq	r3, #0
 8001cc8:	b2d8      	uxtb	r0, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	bf14      	ite	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	2300      	moveq	r3, #0
 8001cde:	b2d9      	uxtb	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ce6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f7ff ffb4 	bl	8001c64 <setLEDs>

    mavlink_command_ack_t ack = {
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
            .command = command->command,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8b9b      	ldrh	r3, [r3, #28]
    mavlink_command_ack_t ack = {
 8001d0c:	81bb      	strh	r3, [r7, #12]
 8001d0e:	2364      	movs	r3, #100	; 0x64
 8001d10:	73fb      	strb	r3, [r7, #15]
             .progress = 100, //meaning that 100% of command has been executed; only relevant for COMMAND_IN_PROGRESS
            .result = MAV_RESULT_ACCEPTED
    };
    mavlink_msg_command_ack_send_struct(MAVLINK_COMM_0,&ack);
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	4619      	mov	r1, r3
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff ff5f 	bl	8001bdc <mavlink_msg_command_ack_send_struct>

    HAL_Delay(150);
 8001d1e:	2096      	movs	r0, #150	; 0x96
 8001d20:	f000 ffaa 	bl	8002c78 <HAL_Delay>

    MAVlinkWriteLEDstatus();
 8001d24:	f000 f804 	bl	8001d30 <MAVlinkWriteLEDstatus>
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <MAVlinkWriteLEDstatus>:
#ifndef CTU_SR_ZORA_MAVLINK_MAVLINKMESSAGES_H
#define CTU_SR_ZORA_MAVLINK_MAVLINKMESSAGES_H

#include <string.h>

static void MAVlinkWriteLEDstatus(){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

    GPIO_PinState G = HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d3a:	4811      	ldr	r0, [pc, #68]	; (8001d80 <MAVlinkWriteLEDstatus+0x50>)
 8001d3c:	f003 f8fc 	bl	8004f38 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState O = HAL_GPIO_ReadPin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8001d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <MAVlinkWriteLEDstatus+0x50>)
 8001d4a:	f003 f8f5 	bl	8004f38 <HAL_GPIO_ReadPin>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71bb      	strb	r3, [r7, #6]
    GPIO_PinState R = HAL_GPIO_ReadPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d56:	480a      	ldr	r0, [pc, #40]	; (8001d80 <MAVlinkWriteLEDstatus+0x50>)
 8001d58:	f003 f8ee 	bl	8004f38 <HAL_GPIO_ReadPin>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	717b      	strb	r3, [r7, #5]

    mavlink_zora_led_status_t ledStatus = {
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	703b      	strb	r3, [r7, #0]
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	707b      	strb	r3, [r7, #1]
 8001d68:	797b      	ldrb	r3, [r7, #5]
 8001d6a:	70bb      	strb	r3, [r7, #2]
            .LED_GREEN_STATUS = G,
            .LED_ORANGE_STATUS = O,
            .LED_RED_STATUS = R
    };

    mavlink_msg_zora_led_status_send_struct(MAVLINK_COMM_0,&ledStatus);
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	4619      	mov	r1, r3
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff ff04 	bl	8001b7e <mavlink_msg_zora_led_status_send_struct>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	48000800 	.word	0x48000800

08001d84 <MAVLinkSetCurrentSystem>:

//-------------
// USE THIS FUNCTION TO SET THE MAVLINK SYSTEM PARAMETRS
//-------------
//system = mavlink_system defined in MAVLinkSetup.h
static void MAVLinkSetCurrentSystem(mavlink_system_t * system, uint8_t SysId, uint8_t CompId){
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
 8001d90:	4613      	mov	r3, r2
 8001d92:	70bb      	strb	r3, [r7, #2]
    system->sysid = SysId;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	701a      	strb	r2, [r3, #0]
    system->compid = CompId;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	78ba      	ldrb	r2, [r7, #2]
 8001d9e:	705a      	strb	r2, [r3, #1]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <MAVlinkWriteHearbeat>:

static void MAVlinkWriteHearbeat(){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
    unsigned len = mavlink_msg_heartbeat_pack( MAVlinkSystemID,MAVlinkComponentID, &message,MAV_TYPE_ROCKET,MAV_AUTOPILOT_INVALID,MAV_MODE_FLAG_DECODE_POSITION_SAFETY, 0,MAV_STATE_STANDBY);	    // Translate message to buffer	    len = mavlink_msg_to_send_buffer((uint8_t*)buf, &message);
    len = mavlink_msg_to_send_buffer((uint8_t*)buf, &message);

	 */

	mavlink_heartbeat_t heartbeat = {
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <MAVlinkWriteHearbeat+0x24>)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001db8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	            .custom_mode = 0,
	            .system_status = MAV_STATE_STANDBY,
				.mavlink_version = 3
	    };

	    mavlink_msg_heartbeat_send_struct(MAVLINK_COMM_0,&heartbeat);
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fead 	bl	8001b20 <mavlink_msg_heartbeat_send_struct>

}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	08009854 	.word	0x08009854

08001dd4 <MAVlinkWriteProtocolVersion>:

static void MAVlinkWriteProtocolVersion(){
 8001dd4:	b5b0      	push	{r4, r5, r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0

    //TODO: Figure out the correct version hash data
    mavlink_protocol_version_t data = {
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MAVlinkWriteProtocolVersion+0x2c>)
 8001ddc:	463c      	mov	r4, r7
 8001dde:	461d      	mov	r5, r3
 8001de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001de8:	6020      	str	r0, [r4, #0]
 8001dea:	3404      	adds	r4, #4
 8001dec:	8021      	strh	r1, [r4, #0]
           .min_version = MAVLINK_MSG_ID_PROTOCOL_VERSION,
           .library_version_hash = "TESTTEST",
           .spec_version_hash = "PROTPROT"
    };

    mavlink_msg_protocol_version_send_struct(MAVLINK_COMM_0,&data);
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff ff06 	bl	8001c04 <mavlink_msg_protocol_version_send_struct>
}
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8001e00:	08009860 	.word	0x08009860

08001e04 <MAVLinkHandleLongCommands>:

static bool MAVLinkHandleLongCommands(const mavlink_command_long_t * const command){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    switch (command->command){
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	8b9b      	ldrh	r3, [r3, #28]
 8001e10:	2b64      	cmp	r3, #100	; 0x64
 8001e12:	d01a      	beq.n	8001e4a <MAVLinkHandleLongCommands+0x46>
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e18:	d11c      	bne.n	8001e54 <MAVLinkHandleLongCommands+0x50>

        //if the command request the system to send a message:
        case MAV_CMD_REQUEST_MESSAGE:
            uint16_t requestedMessageID = (uint16_t)command->param1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e24:	ee17 3a90 	vmov	r3, s15
 8001e28:	81fb      	strh	r3, [r7, #14]

            switch (requestedMessageID) {
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
 8001e2c:	2b0a      	cmp	r3, #10
 8001e2e:	d006      	beq.n	8001e3e <MAVLinkHandleLongCommands+0x3a>
 8001e30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e34:	d107      	bne.n	8001e46 <MAVLinkHandleLongCommands+0x42>
                case MAVLINK_MSG_ID_PROTOCOL_VERSION:
                    MAVlinkWriteProtocolVersion();
 8001e36:	f7ff ffcd 	bl	8001dd4 <MAVlinkWriteProtocolVersion>
                    return true;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00b      	b.n	8001e56 <MAVLinkHandleLongCommands+0x52>

                case MAVLINK_MSG_ID_ZORA_LED_STATUS:
                    MAVlinkWriteLEDstatus();
 8001e3e:	f7ff ff77 	bl	8001d30 <MAVlinkWriteLEDstatus>
                    return true;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <MAVLinkHandleLongCommands+0x52>

                default:
                    return false;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e005      	b.n	8001e56 <MAVLinkHandleLongCommands+0x52>

            }
            break;

        case MAV_CMD_SET_LEDS:
            MAVlinkSetLEDs(command); return true;
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff2e 	bl	8001cac <MAVlinkSetLEDs>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <MAVLinkHandleLongCommands+0x52>

        default:
            return false;
 8001e54:	2300      	movs	r3, #0
            break;
    }
    return false;
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <MAVLinkHandleReceivedMessage>:

static bool MAVLinkHandleReceivedMessage(mavlink_message_t * message, mavlink_status_t * messageStatus){
 8001e5e:	b5b0      	push	{r4, r5, r7, lr}
 8001e60:	b09e      	sub	sp, #120	; 0x78
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
    switch (message->msgid) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001e70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e74:	d00f      	beq.n	8001e96 <MAVLinkHandleReceivedMessage+0x38>
 8001e76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e7a:	dc2b      	bgt.n	8001ed4 <MAVLinkHandleReceivedMessage+0x76>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <MAVLinkHandleReceivedMessage+0x28>
 8001e80:	2b4c      	cmp	r3, #76	; 0x4c
 8001e82:	d010      	beq.n	8001ea6 <MAVLinkHandleReceivedMessage+0x48>
 8001e84:	e026      	b.n	8001ed4 <MAVLinkHandleReceivedMessage+0x76>
        case MAVLINK_MSG_ID_HEARTBEAT:
            mavlink_heartbeat_t hb;
            mavlink_msg_heartbeat_decode(message,&hb);
 8001e86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fe5b 	bl	8001b48 <mavlink_msg_heartbeat_decode>
            return true;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e01f      	b.n	8001ed6 <MAVLinkHandleReceivedMessage+0x78>

        case MAVLINK_MSG_ID_PROTOCOL_VERSION:
            mavlink_protocol_version_t protocol;
            mavlink_msg_protocol_version_decode(message, &protocol);
 8001e96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fec6 	bl	8001c2e <mavlink_msg_protocol_version_decode>
            return true;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e017      	b.n	8001ed6 <MAVLinkHandleReceivedMessage+0x78>

            //receive message of type Command
        case MAVLINK_MSG_ID_COMMAND_LONG:
            mavlink_command_long_t _command;
            mavlink_msg_command_long_decode(message, &_command);
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff fe7a 	bl	8001ba6 <mavlink_msg_command_long_decode>
            const mavlink_command_long_t command = _command; //convert it to a const data variable to prevent change later
 8001eb2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001eb6:	f107 050c 	add.w	r5, r7, #12
 8001eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec2:	682b      	ldr	r3, [r5, #0]
 8001ec4:	6023      	str	r3, [r4, #0]


            //parse the command
            return MAVLinkHandleLongCommands(&command);
 8001ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff9a 	bl	8001e04 <MAVLinkHandleLongCommands>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	e000      	b.n	8001ed6 <MAVLinkHandleReceivedMessage+0x78>
            break;

        default:
            return false;
 8001ed4:	2300      	movs	r3, #0
    }

    return false;
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3778      	adds	r7, #120	; 0x78
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ee0 <MAVLinkParseBuffer>:

static void MAVLinkParseBuffer(const uint8_t * receivedBuffer){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0d2      	sub	sp, #328	; 0x148
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001eea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001eee:	6018      	str	r0, [r3, #0]
    mavlink_message_t message;
    mavlink_status_t messageStatus;

    //figure out what to do when the mavlink parses the buffer before it should end??
    for(uint16_t i = 0; i < UART_RX_Received_NextFreeByteIndex;i++){
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8001ef6:	e026      	b.n	8001f46 <MAVLinkParseBuffer+0x66>
        const uint8_t byte = receivedBuffer[i];
 8001ef8:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001efc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001f00:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

        //parse the data until its the message is decoded/refused
        if(mavlink_parse_char(MAVLINK_USART1_CHANNEL_NUM,byte,&message,&messageStatus)){
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	f107 0220 	add.w	r2, r7, #32
 8001f16:	f897 1145 	ldrb.w	r1, [r7, #325]	; 0x145
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f7ff fdb1 	bl	8001a82 <mavlink_parse_char>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <MAVLinkParseBuffer+0x5c>
            const bool parse = MAVLinkHandleReceivedMessage(&message,&messageStatus);
 8001f26:	f107 0208 	add.w	r2, r7, #8
 8001f2a:	f107 0320 	add.w	r3, r7, #32
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff94 	bl	8001e5e <MAVLinkHandleReceivedMessage>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
    for(uint16_t i = 0; i < UART_RX_Received_NextFreeByteIndex;i++){
 8001f3c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001f40:	3301      	adds	r3, #1
 8001f42:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MAVLinkParseBuffer+0x80>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d3d1      	bcc.n	8001ef8 <MAVLinkParseBuffer+0x18>
        }
    }

}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200004b8 	.word	0x200004b8

08001f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f6a:	f000 fe14 	bl	8002b96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f6e:	f000 f855 	bl	800201c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f72:	f000 fad1 	bl	8002518 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f76:	f000 faa5 	bl	80024c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f7a:	f000 f899 	bl	80020b0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001f7e:	f000 f985 	bl	800228c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f82:	f000 fa05 	bl	8002390 <MX_TIM4_Init>
  MX_FDCAN2_Init();
 8001f86:	f000 f93b 	bl	8002200 <MX_FDCAN2_Init>
  MX_USART1_UART_Init();
 8001f8a:	f000 fa4f 	bl	800242c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//SysTick->LOAD = (SystemCoreClock / 1000) - 1; //value which will be reloaded after countdown
	//SysTick->VAL = 0x0;
	//SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; //enable clock source to systick, enable systick interrupt, enable systick

  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0U);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f96:	f002 f834 	bl	8004002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
 8001f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f9e:	f002 f84a 	bl	8004036 <HAL_NVIC_EnableIRQ>

  HAL_UART_Receive_IT(&huart1,(uint8_t *)&UART_RX_Byte,1);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4917      	ldr	r1, [pc, #92]	; (8002004 <main+0xa0>)
 8001fa6:	4818      	ldr	r0, [pc, #96]	; (8002008 <main+0xa4>)
 8001fa8:	f005 facc 	bl	8007544 <HAL_UART_Receive_IT>
  // __HAL_UART_ENABLE_IT(&huart1,UART_FLAG_IDLE); //enable IDLE line interrupt for the logic to work
  USART1->CR1 |= USART_CR1_IDLEIE; // //enable IDLE line interrupt for the logic to work
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <main+0xa8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a16      	ldr	r2, [pc, #88]	; (800200c <main+0xa8>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6013      	str	r3, [r2, #0]

  //does not owrk??
  //USART1->ICR |= USART_ICR_IDLECF; //clear the interrupt flag (so that we wont get interrupt instantly. next interrupt will occur only after RX buffer is not empty, eg on received data

  //SET MAVLINK SYSTEM ID AND COMPONENT ID
  MAVLinkSetCurrentSystem(&mavlink_system,MAVlinkSystemID,MAVlinkComponentID);
 8001fb8:	220c      	movs	r2, #12
 8001fba:	2101      	movs	r1, #1
 8001fbc:	4814      	ldr	r0, [pc, #80]	; (8002010 <main+0xac>)
 8001fbe:	f7ff fee1 	bl	8001d84 <MAVLinkSetCurrentSystem>

  setLEDs(1, 1, 1);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f7ff fe4c 	bl	8001c64 <setLEDs>

  uint32_t lastTick = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      uint32_t tick = HAL_GetTick();
 8001fd0:	f000 fe46 	bl	8002c60 <HAL_GetTick>
 8001fd4:	6038      	str	r0, [r7, #0]

      //send Heartbeat every second
      if(tick > (lastTick + 1000)){
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d903      	bls.n	8001fea <main+0x86>
          MAVlinkWriteHearbeat();
 8001fe2:	f7ff fee3 	bl	8001dac <MAVlinkWriteHearbeat>
    	  //MAVlinkWriteLEDstatus();
          lastTick = tick;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	607b      	str	r3, [r7, #4]
      }

      //wait for incoming data
      if(FLAG_UART_line_IDLE){
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <main+0xb0>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ed      	beq.n	8001fd0 <main+0x6c>
          MAVLinkParseBuffer((uint8_t *)UART_RX_Received_Message);
 8001ff4:	4808      	ldr	r0, [pc, #32]	; (8002018 <main+0xb4>)
 8001ff6:	f7ff ff73 	bl	8001ee0 <MAVLinkParseBuffer>
          FLAG_UART_line_IDLE = false;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <main+0xb0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
  {
 8002000:	e7e6      	b.n	8001fd0 <main+0x6c>
 8002002:	bf00      	nop
 8002004:	200004bb 	.word	0x200004bb
 8002008:	200001f4 	.word	0x200001f4
 800200c:	40013800 	.word	0x40013800
 8002010:	20000028 	.word	0x20000028
 8002014:	200004ba 	.word	0x200004ba
 8002018:	200003a0 	.word	0x200003a0

0800201c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b094      	sub	sp, #80	; 0x50
 8002020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	2238      	movs	r2, #56	; 0x38
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f007 fbcc 	bl	80097c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800203e:	2000      	movs	r0, #0
 8002040:	f002 ffaa 	bl	8004f98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002044:	2301      	movs	r3, #1
 8002046:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800204c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204e:	2302      	movs	r3, #2
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002052:	2303      	movs	r3, #3
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002056:	2301      	movs	r3, #1
 8002058:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800205a:	2328      	movs	r3, #40	; 0x28
 800205c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800205e:	2302      	movs	r3, #2
 8002060:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002062:	2302      	movs	r3, #2
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002066:	2302      	movs	r3, #2
 8002068:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206a:	f107 0318 	add.w	r3, r7, #24
 800206e:	4618      	mov	r0, r3
 8002070:	f003 f846 	bl	8005100 <HAL_RCC_OscConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800207a:	f000 fad9 	bl	8002630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207e:	230f      	movs	r3, #15
 8002080:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002082:	2303      	movs	r3, #3
 8002084:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2104      	movs	r1, #4
 8002096:	4618      	mov	r0, r3
 8002098:	f003 fb4a 	bl	8005730 <HAL_RCC_ClockConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80020a2:	f000 fac5 	bl	8002630 <Error_Handler>
  }
}
 80020a6:	bf00      	nop
 80020a8:	3750      	adds	r7, #80	; 0x50
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2220      	movs	r2, #32
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f007 fb7d 	bl	80097c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <MX_ADC1_Init+0x13c>)
 80020d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020d6:	4b45      	ldr	r3, [pc, #276]	; (80021ec <MX_ADC1_Init+0x13c>)
 80020d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020de:	4b43      	ldr	r3, [pc, #268]	; (80021ec <MX_ADC1_Init+0x13c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020e4:	4b41      	ldr	r3, [pc, #260]	; (80021ec <MX_ADC1_Init+0x13c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80020ea:	4b40      	ldr	r3, [pc, #256]	; (80021ec <MX_ADC1_Init+0x13c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020f0:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <MX_ADC1_Init+0x13c>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <MX_ADC1_Init+0x13c>)
 80020f8:	2204      	movs	r2, #4
 80020fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <MX_ADC1_Init+0x13c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002102:	4b3a      	ldr	r3, [pc, #232]	; (80021ec <MX_ADC1_Init+0x13c>)
 8002104:	2200      	movs	r2, #0
 8002106:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8002108:	4b38      	ldr	r3, [pc, #224]	; (80021ec <MX_ADC1_Init+0x13c>)
 800210a:	2204      	movs	r2, #4
 800210c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800210e:	4b37      	ldr	r3, [pc, #220]	; (80021ec <MX_ADC1_Init+0x13c>)
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002116:	4b35      	ldr	r3, [pc, #212]	; (80021ec <MX_ADC1_Init+0x13c>)
 8002118:	2200      	movs	r2, #0
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800211c:	4b33      	ldr	r3, [pc, #204]	; (80021ec <MX_ADC1_Init+0x13c>)
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002122:	4b32      	ldr	r3, [pc, #200]	; (80021ec <MX_ADC1_Init+0x13c>)
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <MX_ADC1_Init+0x13c>)
 800212c:	2200      	movs	r2, #0
 800212e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002130:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <MX_ADC1_Init+0x13c>)
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002138:	482c      	ldr	r0, [pc, #176]	; (80021ec <MX_ADC1_Init+0x13c>)
 800213a:	f000 ff99 	bl	8003070 <HAL_ADC_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002144:	f000 fa74 	bl	8002630 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	4826      	ldr	r0, [pc, #152]	; (80021ec <MX_ADC1_Init+0x13c>)
 8002154:	f001 fd92 	bl	8003c7c <HAL_ADCEx_MultiModeConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800215e:	f000 fa67 	bl	8002630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <MX_ADC1_Init+0x140>)
 8002164:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002166:	2306      	movs	r3, #6
 8002168:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800216e:	237f      	movs	r3, #127	; 0x7f
 8002170:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002172:	2304      	movs	r3, #4
 8002174:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	4619      	mov	r1, r3
 800217e:	481b      	ldr	r0, [pc, #108]	; (80021ec <MX_ADC1_Init+0x13c>)
 8002180:	f001 f92a 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800218a:	f000 fa51 	bl	8002630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <MX_ADC1_Init+0x144>)
 8002190:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002192:	230c      	movs	r3, #12
 8002194:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4814      	ldr	r0, [pc, #80]	; (80021ec <MX_ADC1_Init+0x13c>)
 800219c:	f001 f91c 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80021a6:	f000 fa43 	bl	8002630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <MX_ADC1_Init+0x148>)
 80021ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80021ae:	2312      	movs	r3, #18
 80021b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	480d      	ldr	r0, [pc, #52]	; (80021ec <MX_ADC1_Init+0x13c>)
 80021b8:	f001 f90e 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80021c2:	f000 fa35 	bl	8002630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <MX_ADC1_Init+0x14c>)
 80021c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80021ca:	2318      	movs	r3, #24
 80021cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4806      	ldr	r0, [pc, #24]	; (80021ec <MX_ADC1_Init+0x13c>)
 80021d4:	f001 f900 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80021de:	f000 fa27 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	3730      	adds	r7, #48	; 0x30
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000002c 	.word	0x2000002c
 80021f0:	32601000 	.word	0x32601000
 80021f4:	2e300800 	.word	0x2e300800
 80021f8:	3ac04000 	.word	0x3ac04000
 80021fc:	3ef08000 	.word	0x3ef08000

08002200 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002206:	4a20      	ldr	r2, [pc, #128]	; (8002288 <MX_FDCAN2_Init+0x88>)
 8002208:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <MX_FDCAN2_Init+0x84>)
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <MX_FDCAN2_Init+0x84>)
 800221e:	2200      	movs	r2, #0
 8002220:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002224:	2200      	movs	r2, #0
 8002226:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <MX_FDCAN2_Init+0x84>)
 800222a:	2200      	movs	r2, #0
 800222c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 160;
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002230:	22a0      	movs	r2, #160	; 0xa0
 8002232:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002236:	2201      	movs	r2, #1
 8002238:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 5;
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <MX_FDCAN2_Init+0x84>)
 800223c:	2205      	movs	r2, #5
 800223e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002242:	2202      	movs	r2, #2
 8002244:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002248:	2201      	movs	r2, #1
 800224a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <MX_FDCAN2_Init+0x84>)
 800224e:	2201      	movs	r2, #1
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002254:	2201      	movs	r2, #1
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <MX_FDCAN2_Init+0x84>)
 800225a:	2201      	movs	r2, #1
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 3;
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002260:	2203      	movs	r2, #3
 8002262:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002266:	2200      	movs	r2, #0
 8002268:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_FDCAN2_Init+0x84>)
 800226c:	2200      	movs	r2, #0
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	; (8002284 <MX_FDCAN2_Init+0x84>)
 8002272:	f002 f975 	bl	8004560 <HAL_FDCAN_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800227c:	f000 f9d8 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200000f8 	.word	0x200000f8
 8002288:	40006800 	.word	0x40006800

0800228c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	615a      	str	r2, [r3, #20]
 80022bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <MX_TIM3_Init+0xfc>)
 80022c0:	4a32      	ldr	r2, [pc, #200]	; (800238c <MX_TIM3_Init+0x100>)
 80022c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <MX_TIM3_Init+0xfc>)
 80022c6:	2207      	movs	r2, #7
 80022c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <MX_TIM3_Init+0xfc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <MX_TIM3_Init+0xfc>)
 80022d2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80022d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d8:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <MX_TIM3_Init+0xfc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <MX_TIM3_Init+0xfc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022e4:	4828      	ldr	r0, [pc, #160]	; (8002388 <MX_TIM3_Init+0xfc>)
 80022e6:	f003 fe7b 	bl	8005fe0 <HAL_TIM_Base_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80022f0:	f000 f99e 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fe:	4619      	mov	r1, r3
 8002300:	4821      	ldr	r0, [pc, #132]	; (8002388 <MX_TIM3_Init+0xfc>)
 8002302:	f004 f9b9 	bl	8006678 <HAL_TIM_ConfigClockSource>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800230c:	f000 f990 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002310:	481d      	ldr	r0, [pc, #116]	; (8002388 <MX_TIM3_Init+0xfc>)
 8002312:	f003 febc 	bl	800608e <HAL_TIM_PWM_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800231c:	f000 f988 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4816      	ldr	r0, [pc, #88]	; (8002388 <MX_TIM3_Init+0xfc>)
 8002330:	f004 ff3c 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800233a:	f000 f979 	bl	8002630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233e:	2360      	movs	r3, #96	; 0x60
 8002340:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	2200      	movs	r2, #0
 8002352:	4619      	mov	r1, r3
 8002354:	480c      	ldr	r0, [pc, #48]	; (8002388 <MX_TIM3_Init+0xfc>)
 8002356:	f004 f87b 	bl	8006450 <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002360:	f000 f966 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002364:	463b      	mov	r3, r7
 8002366:	2204      	movs	r2, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <MX_TIM3_Init+0xfc>)
 800236c:	f004 f870 	bl	8006450 <HAL_TIM_PWM_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002376:	f000 f95b 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <MX_TIM3_Init+0xfc>)
 800237c:	f000 faaa 	bl	80028d4 <HAL_TIM_MspPostInit>

}
 8002380:	bf00      	nop
 8002382:	3738      	adds	r7, #56	; 0x38
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2000015c 	.word	0x2000015c
 800238c:	40000400 	.word	0x40000400

08002390 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002396:	f107 0310 	add.w	r3, r7, #16
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <MX_TIM4_Init+0x94>)
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <MX_TIM4_Init+0x98>)
 80023b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <MX_TIM4_Init+0x94>)
 80023b6:	229f      	movs	r2, #159	; 0x9f
 80023b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_TIM4_Init+0x94>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <MX_TIM4_Init+0x94>)
 80023c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <MX_TIM4_Init+0x94>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <MX_TIM4_Init+0x94>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023d4:	4813      	ldr	r0, [pc, #76]	; (8002424 <MX_TIM4_Init+0x94>)
 80023d6:	f003 fe03 	bl	8005fe0 <HAL_TIM_Base_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80023e0:	f000 f926 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	4619      	mov	r1, r3
 80023f0:	480c      	ldr	r0, [pc, #48]	; (8002424 <MX_TIM4_Init+0x94>)
 80023f2:	f004 f941 	bl	8006678 <HAL_TIM_ConfigClockSource>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80023fc:	f000 f918 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_TIM4_Init+0x94>)
 800240e:	f004 fecd 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002418:	f000 f90a 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	3720      	adds	r7, #32
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200001a8 	.word	0x200001a8
 8002428:	40000800 	.word	0x40000800

0800242c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002432:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <MX_USART1_UART_Init+0x94>)
 8002434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002438:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800243c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <MX_USART1_UART_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <MX_USART1_UART_Init+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MX_USART1_UART_Init+0x90>)
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002474:	4811      	ldr	r0, [pc, #68]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002476:	f004 ff6d 	bl	8007354 <HAL_UART_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002480:	f000 f8d6 	bl	8002630 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002484:	2100      	movs	r1, #0
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <MX_USART1_UART_Init+0x90>)
 8002488:	f007 f8c3 	bl	8009612 <HAL_UARTEx_SetTxFifoThreshold>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002492:	f000 f8cd 	bl	8002630 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002496:	2100      	movs	r1, #0
 8002498:	4808      	ldr	r0, [pc, #32]	; (80024bc <MX_USART1_UART_Init+0x90>)
 800249a:	f007 f8f8 	bl	800968e <HAL_UARTEx_SetRxFifoThreshold>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024a4:	f000 f8c4 	bl	8002630 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024a8:	4804      	ldr	r0, [pc, #16]	; (80024bc <MX_USART1_UART_Init+0x90>)
 80024aa:	f007 f879 	bl	80095a0 <HAL_UARTEx_DisableFifoMode>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80024b4:	f000 f8bc 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200001f4 	.word	0x200001f4
 80024c0:	40013800 	.word	0x40013800

080024c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_DMA_Init+0x50>)
 80024cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ce:	4a11      	ldr	r2, [pc, #68]	; (8002514 <MX_DMA_Init+0x50>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6493      	str	r3, [r2, #72]	; 0x48
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_DMA_Init+0x50>)
 80024d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <MX_DMA_Init+0x50>)
 80024e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e6:	4a0b      	ldr	r2, [pc, #44]	; (8002514 <MX_DMA_Init+0x50>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6493      	str	r3, [r2, #72]	; 0x48
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MX_DMA_Init+0x50>)
 80024f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	200b      	movs	r0, #11
 8002500:	f001 fd7f 	bl	8004002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002504:	200b      	movs	r0, #11
 8002506:	f001 fd96 	bl	8004036 <HAL_NVIC_EnableIRQ>

}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000

08002518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <MX_GPIO_Init+0xc4>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <MX_GPIO_Init+0xc4>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <MX_GPIO_Init+0xc4>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <MX_GPIO_Init+0xc4>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	4a24      	ldr	r2, [pc, #144]	; (80025dc <MX_GPIO_Init+0xc4>)
 800254c:	f043 0320 	orr.w	r3, r3, #32
 8002550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <MX_GPIO_Init+0xc4>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <MX_GPIO_Init+0xc4>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <MX_GPIO_Init+0xc4>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <MX_GPIO_Init+0xc4>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <MX_GPIO_Init+0xc4>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	4a18      	ldr	r2, [pc, #96]	; (80025dc <MX_GPIO_Init+0xc4>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <MX_GPIO_Init+0xc4>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ORANGE_Pin|LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002594:	4812      	ldr	r0, [pc, #72]	; (80025e0 <MX_GPIO_Init+0xc8>)
 8002596:	f002 fce7 	bl	8004f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_ORANGE_Pin LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_ORANGE_Pin|LED_RED_Pin|LED_GREEN_Pin;
 800259a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	480b      	ldr	r0, [pc, #44]	; (80025e0 <MX_GPIO_Init+0xc8>)
 80025b4:	f002 fb3e 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <MX_GPIO_Init+0xc8>)
 80025ce:	f002 fb31 	bl	8004c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	48000800 	.word	0x48000800

080025e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


//when the uart finishes recieving all data = one byte
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

    //set the recived byte to the buffer and increase the index
    UART_RX_Buffer[UART_RX_Buffer_NextFreeByteIndex] = UART_RX_Byte;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_UART_RxCpltCallback+0x3c>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_UART_RxCpltCallback+0x40>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2d9      	uxtb	r1, r3
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_UART_RxCpltCallback+0x44>)
 80025fc:	5499      	strb	r1, [r3, r2]
    UART_RX_Buffer_NextFreeByteIndex++;
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_UART_RxCpltCallback+0x3c>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_UART_RxCpltCallback+0x3c>)
 800260a:	801a      	strh	r2, [r3, #0]

    //restart interrupt
    HAL_UART_Receive_IT(&huart1,(uint8_t *)&UART_RX_Byte,1);
 800260c:	2201      	movs	r2, #1
 800260e:	4905      	ldr	r1, [pc, #20]	; (8002624 <HAL_UART_RxCpltCallback+0x40>)
 8002610:	4806      	ldr	r0, [pc, #24]	; (800262c <HAL_UART_RxCpltCallback+0x48>)
 8002612:	f004 ff97 	bl	8007544 <HAL_UART_Receive_IT>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000039c 	.word	0x2000039c
 8002624:	200004bb 	.word	0x200004bb
 8002628:	20000284 	.word	0x20000284
 800262c:	200001f4 	.word	0x200001f4

08002630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002634:	b672      	cpsid	i
}
 8002636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002638:	e7fe      	b.n	8002638 <Error_Handler+0x8>
	...

0800263c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_MspInit+0x44>)
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_MspInit+0x44>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6613      	str	r3, [r2, #96]	; 0x60
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_MspInit+0x44>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_MspInit+0x44>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	4a08      	ldr	r2, [pc, #32]	; (8002680 <HAL_MspInit+0x44>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6593      	str	r3, [r2, #88]	; 0x58
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_MspInit+0x44>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002672:	f002 fd35 	bl	80050e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b09e      	sub	sp, #120	; 0x78
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2250      	movs	r2, #80	; 0x50
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f007 f88f 	bl	80097c8 <memset>
  if(hadc->Instance==ADC1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b2:	d15f      	bne.n	8002774 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80026b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80026ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80026be:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fa4f 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80026d0:	f7ff ffae 	bl	8002630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_ADC_MspInit+0xf8>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	4a28      	ldr	r2, [pc, #160]	; (800277c <HAL_ADC_MspInit+0xf8>)
 80026da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e0:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_ADC_MspInit+0xf8>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_ADC_MspInit+0xf8>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a22      	ldr	r2, [pc, #136]	; (800277c <HAL_ADC_MspInit+0xf8>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_ADC_MspInit+0xf8>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002704:	f641 0303 	movw	r3, #6147	; 0x1803
 8002708:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800270a:	2303      	movs	r3, #3
 800270c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002716:	4619      	mov	r1, r3
 8002718:	4819      	ldr	r0, [pc, #100]	; (8002780 <HAL_ADC_MspInit+0xfc>)
 800271a:	f002 fa8b 	bl	8004c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_ADC_MspInit+0x100>)
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <HAL_ADC_MspInit+0x104>)
 8002722:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <HAL_ADC_MspInit+0x100>)
 8002726:	2205      	movs	r2, #5
 8002728:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <HAL_ADC_MspInit+0x100>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_ADC_MspInit+0x100>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_ADC_MspInit+0x100>)
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_ADC_MspInit+0x100>)
 800273e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002742:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_ADC_MspInit+0x100>)
 8002746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800274a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_ADC_MspInit+0x100>)
 800274e:	2220      	movs	r2, #32
 8002750:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_ADC_MspInit+0x100>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002758:	480a      	ldr	r0, [pc, #40]	; (8002784 <HAL_ADC_MspInit+0x100>)
 800275a:	f001 fc87 	bl	800406c <HAL_DMA_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002764:	f7ff ff64 	bl	8002630 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a06      	ldr	r2, [pc, #24]	; (8002784 <HAL_ADC_MspInit+0x100>)
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <HAL_ADC_MspInit+0x100>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002774:	bf00      	nop
 8002776:	3778      	adds	r7, #120	; 0x78
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	48000400 	.word	0x48000400
 8002784:	20000098 	.word	0x20000098
 8002788:	40020008 	.word	0x40020008

0800278c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b09e      	sub	sp, #120	; 0x78
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	2250      	movs	r2, #80	; 0x50
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f007 f80b 	bl	80097c8 <memset>
  if(hfdcan->Instance==FDCAN2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a23      	ldr	r2, [pc, #140]	; (8002844 <HAL_FDCAN_MspInit+0xb8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d13f      	bne.n	800283c <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80027bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80027c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 f9cb 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80027d8:	f7ff ff2a 	bl	8002630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_FDCAN_MspInit+0xbc>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	4a19      	ldr	r2, [pc, #100]	; (8002848 <HAL_FDCAN_MspInit+0xbc>)
 80027e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e6:	6593      	str	r3, [r2, #88]	; 0x58
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_FDCAN_MspInit+0xbc>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_FDCAN_MspInit+0xbc>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	4a13      	ldr	r2, [pc, #76]	; (8002848 <HAL_FDCAN_MspInit+0xbc>)
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_FDCAN_MspInit+0xbc>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800280c:	2360      	movs	r3, #96	; 0x60
 800280e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800281c:	2309      	movs	r3, #9
 800281e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002824:	4619      	mov	r1, r3
 8002826:	4809      	ldr	r0, [pc, #36]	; (800284c <HAL_FDCAN_MspInit+0xc0>)
 8002828:	f002 fa04 	bl	8004c34 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	2056      	movs	r0, #86	; 0x56
 8002832:	f001 fbe6 	bl	8004002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002836:	2056      	movs	r0, #86	; 0x56
 8002838:	f001 fbfd 	bl	8004036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800283c:	bf00      	nop
 800283e:	3778      	adds	r7, #120	; 0x78
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40006800 	.word	0x40006800
 8002848:	40021000 	.word	0x40021000
 800284c:	48000400 	.word	0x48000400

08002850 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <HAL_TIM_Base_MspInit+0x78>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d114      	bne.n	800288c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002862:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_TIM_Base_MspInit+0x7c>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_TIM_Base_MspInit+0x7c>)
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_TIM_Base_MspInit+0x7c>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	201d      	movs	r0, #29
 8002880:	f001 fbbf 	bl	8004002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002884:	201d      	movs	r0, #29
 8002886:	f001 fbd6 	bl	8004036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800288a:	e018      	b.n	80028be <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_TIM_Base_MspInit+0x80>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d113      	bne.n	80028be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_TIM_Base_MspInit+0x7c>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_TIM_Base_MspInit+0x7c>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6593      	str	r3, [r2, #88]	; 0x58
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_TIM_Base_MspInit+0x7c>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	201e      	movs	r0, #30
 80028b4:	f001 fba5 	bl	8004002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028b8:	201e      	movs	r0, #30
 80028ba:	f001 fbbc 	bl	8004036 <HAL_NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40000800 	.word	0x40000800

080028d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <HAL_TIM_MspPostInit+0x64>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d11b      	bne.n	800292e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_TIM_MspPostInit+0x68>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_TIM_MspPostInit+0x68>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_TIM_MspPostInit+0x68>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800290e:	23c0      	movs	r3, #192	; 0xc0
 8002910:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800291e:	2302      	movs	r3, #2
 8002920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002922:	f107 030c 	add.w	r3, r7, #12
 8002926:	4619      	mov	r1, r3
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <HAL_TIM_MspPostInit+0x6c>)
 800292a:	f002 f983 	bl	8004c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800292e:	bf00      	nop
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40000400 	.word	0x40000400
 800293c:	40021000 	.word	0x40021000
 8002940:	48000800 	.word	0x48000800

08002944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b09e      	sub	sp, #120	; 0x78
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2250      	movs	r2, #80	; 0x50
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f006 ff2f 	bl	80097c8 <memset>
  if(huart->Instance==USART1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a22      	ldr	r2, [pc, #136]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d13d      	bne.n	80029f0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002974:	2301      	movs	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4618      	mov	r0, r3
 8002982:	f003 f8f1 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800298c:	f7ff fe50 	bl	8002630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <HAL_UART_MspInit+0xb8>)
 8002992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_UART_MspInit+0xb8>)
 8002996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299a:	6613      	str	r3, [r2, #96]	; 0x60
 800299c:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_UART_MspInit+0xb8>)
 800299e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_UART_MspInit+0xb8>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	4a13      	ldr	r2, [pc, #76]	; (80029fc <HAL_UART_MspInit+0xb8>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_UART_MspInit+0xb8>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029c0:	2330      	movs	r3, #48	; 0x30
 80029c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d0:	2307      	movs	r3, #7
 80029d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029d8:	4619      	mov	r1, r3
 80029da:	4809      	ldr	r0, [pc, #36]	; (8002a00 <HAL_UART_MspInit+0xbc>)
 80029dc:	f002 f92a 	bl	8004c34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	2025      	movs	r0, #37	; 0x25
 80029e6:	f001 fb0c 	bl	8004002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029ea:	2025      	movs	r0, #37	; 0x25
 80029ec:	f001 fb23 	bl	8004036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029f0:	bf00      	nop
 80029f2:	3778      	adds	r7, #120	; 0x78
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40013800 	.word	0x40013800
 80029fc:	40021000 	.word	0x40021000
 8002a00:	48000800 	.word	0x48000800

08002a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a08:	e7fe      	b.n	8002a08 <NMI_Handler+0x4>

08002a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <HardFault_Handler+0x4>

08002a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <MemManage_Handler+0x4>

08002a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <BusFault_Handler+0x4>

08002a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <UsageFault_Handler+0x4>

08002a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a50:	f000 f8f4 	bl	8002c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <DMA1_Channel1_IRQHandler+0x10>)
 8002a5e:	f001 fc6d 	bl	800433c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000098 	.word	0x20000098

08002a6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <TIM3_IRQHandler+0x10>)
 8002a72:	f003 fb6d 	bl	8006150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000015c 	.word	0x2000015c

08002a80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <TIM4_IRQHandler+0x10>)
 8002a86:	f003 fb63 	bl	8006150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200001a8 	.word	0x200001a8

08002a94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

    //wait fro the line to go idle
    if(USART1->ISR & UART_FLAG_IDLE){
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <USART1_IRQHandler+0x5c>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <USART1_IRQHandler+0x52>
        USART1->ICR |= USART_ICR_IDLECF; //clear the interrupt flag
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <USART1_IRQHandler+0x5c>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <USART1_IRQHandler+0x5c>)
 8002aaa:	f043 0310 	orr.w	r3, r3, #16
 8002aae:	6213      	str	r3, [r2, #32]

        //signalize that the received data can be processed
        FLAG_UART_line_IDLE = 1;
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <USART1_IRQHandler+0x60>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]

        //copy the data from the buffer to the parsing buffer
        memcpy((uint8_t *)&UART_RX_Received_Message,(uint8_t *)&UART_RX_Buffer,UART_RX_Buffer_NextFreeByteIndex);
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <USART1_IRQHandler+0x64>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	490f      	ldr	r1, [pc, #60]	; (8002afc <USART1_IRQHandler+0x68>)
 8002ac0:	480f      	ldr	r0, [pc, #60]	; (8002b00 <USART1_IRQHandler+0x6c>)
 8002ac2:	f006 fead 	bl	8009820 <memcpy>

        UART_RX_Received_NextFreeByteIndex = UART_RX_Buffer_NextFreeByteIndex;
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <USART1_IRQHandler+0x64>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <USART1_IRQHandler+0x70>)
 8002ace:	801a      	strh	r2, [r3, #0]


        // set the RX buffer data to 0 and reset the position
        memset((uint8_t *)&UART_RX_Buffer,(uint8_t)0,UART_RX_Buffer_NextFreeByteIndex);
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <USART1_IRQHandler+0x64>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <USART1_IRQHandler+0x68>)
 8002adc:	f006 fe74 	bl	80097c8 <memset>
        UART_RX_Buffer_NextFreeByteIndex = 0;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <USART1_IRQHandler+0x64>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
    }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ae6:	4808      	ldr	r0, [pc, #32]	; (8002b08 <USART1_IRQHandler+0x74>)
 8002ae8:	f004 fd82 	bl	80075f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40013800 	.word	0x40013800
 8002af4:	200004ba 	.word	0x200004ba
 8002af8:	2000039c 	.word	0x2000039c
 8002afc:	20000284 	.word	0x20000284
 8002b00:	200003a0 	.word	0x200003a0
 8002b04:	200004b8 	.word	0x200004b8
 8002b08:	200001f4 	.word	0x200001f4

08002b0c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <FDCAN2_IT0_IRQHandler+0x10>)
 8002b12:	f001 fe7f 	bl	8004814 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200000f8 	.word	0x200000f8

08002b20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <SystemInit+0x20>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <SystemInit+0x20>)
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b44:	480d      	ldr	r0, [pc, #52]	; (8002b7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b48:	480d      	ldr	r0, [pc, #52]	; (8002b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b4a:	490e      	ldr	r1, [pc, #56]	; (8002b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <LoopForever+0xe>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b50:	e002      	b.n	8002b58 <LoopCopyDataInit>

08002b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b56:	3304      	adds	r3, #4

08002b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b5c:	d3f9      	bcc.n	8002b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b60:	4c0b      	ldr	r4, [pc, #44]	; (8002b90 <LoopForever+0x16>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b64:	e001      	b.n	8002b6a <LoopFillZerobss>

08002b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b68:	3204      	adds	r2, #4

08002b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b6c:	d3fb      	bcc.n	8002b66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b6e:	f7ff ffd7 	bl	8002b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b72:	f006 fe31 	bl	80097d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b76:	f7ff f9f5 	bl	8001f64 <main>

08002b7a <LoopForever>:

LoopForever:
    b LoopForever
 8002b7a:	e7fe      	b.n	8002b7a <LoopForever>
  ldr   r0, =_estack
 8002b7c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002b88:	08009a1c 	.word	0x08009a1c
  ldr r2, =_sbss
 8002b8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002b90:	200009b0 	.word	0x200009b0

08002b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC1_2_IRQHandler>

08002b96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba0:	2003      	movs	r0, #3
 8002ba2:	f001 fa23 	bl	8003fec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ba6:	200f      	movs	r0, #15
 8002ba8:	f000 f80e 	bl	8002bc8 <HAL_InitTick>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	71fb      	strb	r3, [r7, #7]
 8002bb6:	e001      	b.n	8002bbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bb8:	f7ff fd40 	bl	800263c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bbc:	79fb      	ldrb	r3, [r7, #7]

}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_InitTick+0x68>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d022      	beq.n	8002c22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_InitTick+0x6c>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_InitTick+0x68>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fa2e 	bl	8004052 <HAL_SYSTICK_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	d809      	bhi.n	8002c16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c02:	2200      	movs	r2, #0
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c0a:	f001 f9fa 	bl	8004002 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_InitTick+0x70>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e007      	b.n	8002c26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	e004      	b.n	8002c26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e001      	b.n	8002c26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000008 	.word	0x20000008
 8002c34:	20000000 	.word	0x20000000
 8002c38:	20000004 	.word	0x20000004

08002c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_IncTick+0x1c>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_IncTick+0x20>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a03      	ldr	r2, [pc, #12]	; (8002c58 <HAL_IncTick+0x1c>)
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	200009ac 	.word	0x200009ac
 8002c5c:	20000008 	.word	0x20000008

08002c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return uwTick;
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <HAL_GetTick+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200009ac 	.word	0x200009ac

08002c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7ff ffee 	bl	8002c60 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c90:	d004      	beq.n	8002c9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_Delay+0x40>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c9c:	bf00      	nop
 8002c9e:	f7ff ffdf 	bl	8002c60 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d8f7      	bhi.n	8002c9e <HAL_Delay+0x26>
  {
  }
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000008 	.word	0x20000008

08002cbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3360      	adds	r3, #96	; 0x60
 8002d36:	461a      	mov	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <LL_ADC_SetOffset+0x44>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	03fff000 	.word	0x03fff000

08002d6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3360      	adds	r3, #96	; 0x60
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3360      	adds	r3, #96	; 0x60
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b087      	sub	sp, #28
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	615a      	str	r2, [r3, #20]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3330      	adds	r3, #48	; 0x30
 8002e70:	461a      	mov	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	211f      	movs	r1, #31
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	f003 011f 	and.w	r1, r3, #31
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3314      	adds	r3, #20
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	0e5b      	lsrs	r3, r3, #25
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	0d1b      	lsrs	r3, r3, #20
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2107      	movs	r1, #7
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	401a      	ands	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	0d1b      	lsrs	r3, r3, #20
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0f      	ldr	r2, [pc, #60]	; (8002f5c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d10a      	bne.n	8002f3a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002f38:	e00a      	b.n	8002f50 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f46:	43db      	mvns	r3, r3
 8002f48:	401a      	ands	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	407f0000 	.word	0x407f0000

08002f60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6093      	str	r3, [r2, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f98:	d101      	bne.n	8002f9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe8:	d101      	bne.n	8002fee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <LL_ADC_IsEnabled+0x18>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <LL_ADC_IsEnabled+0x1a>
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b04      	cmp	r3, #4
 8003034:	d101      	bne.n	800303a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d101      	bne.n	8003060 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1a1      	b.n	80033ce <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff faf3 	bl	8002684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff67 	bl	8002f84 <LL_ADC_IsDeepPowerDownEnabled>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff4d 	bl	8002f60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff82 	bl	8002fd4 <LL_ADC_IsInternalRegulatorEnabled>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d115      	bne.n	8003102 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff66 	bl	8002fac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e0:	4b9a      	ldr	r3, [pc, #616]	; (800334c <HAL_ADC_Init+0x2dc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	4a9a      	ldr	r2, [pc, #616]	; (8003350 <HAL_ADC_Init+0x2e0>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030f4:	e002      	b.n	80030fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f9      	bne.n	80030f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff64 	bl	8002fd4 <LL_ADC_IsInternalRegulatorEnabled>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff75 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 8003138:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	f040 813a 	bne.w	80033bc <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 8136 	bne.w	80033bc <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003158:	f043 0202 	orr.w	r2, r3, #2
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff49 	bl	8002ffc <LL_ADC_IsEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d137      	bne.n	80031e0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003178:	d004      	beq.n	8003184 <HAL_ADC_Init+0x114>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_ADC_Init+0x2e4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10f      	bne.n	80031a4 <HAL_ADC_Init+0x134>
 8003184:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003188:	f7ff ff38 	bl	8002ffc <LL_ADC_IsEnabled>
 800318c:	4604      	mov	r4, r0
 800318e:	4871      	ldr	r0, [pc, #452]	; (8003354 <HAL_ADC_Init+0x2e4>)
 8003190:	f7ff ff34 	bl	8002ffc <LL_ADC_IsEnabled>
 8003194:	4603      	mov	r3, r0
 8003196:	4323      	orrs	r3, r4
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e008      	b.n	80031b6 <HAL_ADC_Init+0x146>
 80031a4:	486c      	ldr	r0, [pc, #432]	; (8003358 <HAL_ADC_Init+0x2e8>)
 80031a6:	f7ff ff29 	bl	8002ffc <LL_ADC_IsEnabled>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d012      	beq.n	80031e0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c2:	d004      	beq.n	80031ce <HAL_ADC_Init+0x15e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a62      	ldr	r2, [pc, #392]	; (8003354 <HAL_ADC_Init+0x2e4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_Init+0x162>
 80031ce:	4a63      	ldr	r2, [pc, #396]	; (800335c <HAL_ADC_Init+0x2ec>)
 80031d0:	e000      	b.n	80031d4 <HAL_ADC_Init+0x164>
 80031d2:	4a63      	ldr	r2, [pc, #396]	; (8003360 <HAL_ADC_Init+0x2f0>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f7ff fd6e 	bl	8002cbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	7f5b      	ldrb	r3, [r3, #29]
 80031e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80031f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800320a:	2b01      	cmp	r3, #1
 800320c:	d106      	bne.n	800321c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	3b01      	subs	r3, #1
 8003214:	045b      	lsls	r3, r3, #17
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_ADC_Init+0x2f4>)
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	69b9      	ldr	r1, [r7, #24]
 8003248:	430b      	orrs	r3, r1
 800324a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fedb 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 800326c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fee8 	bl	8003048 <LL_ADC_INJ_IsConversionOngoing>
 8003278:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d17b      	bne.n	8003378 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d178      	bne.n	8003378 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800328a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003292:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a2:	f023 0302 	bic.w	r3, r3, #2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	69b9      	ldr	r1, [r7, #24]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d017      	beq.n	80032e8 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6911      	ldr	r1, [r2, #16]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80032e6:	e013      	b.n	8003310 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800330c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003316:	2b01      	cmp	r3, #1
 8003318:	d126      	bne.n	8003368 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800333c:	430a      	orrs	r2, r1
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	611a      	str	r2, [r3, #16]
 800334a:	e015      	b.n	8003378 <HAL_ADC_Init+0x308>
 800334c:	20000000 	.word	0x20000000
 8003350:	053e2d63 	.word	0x053e2d63
 8003354:	50000100 	.word	0x50000100
 8003358:	50000400 	.word	0x50000400
 800335c:	50000300 	.word	0x50000300
 8003360:	50000700 	.word	0x50000700
 8003364:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10c      	bne.n	800339a <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f023 010f 	bic.w	r1, r3, #15
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	1e5a      	subs	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
 8003398:	e007      	b.n	80033aa <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 020f 	bic.w	r2, r2, #15
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80033ba:	e007      	b.n	80033cc <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	f043 0210 	orr.w	r2, r3, #16
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3724      	adds	r7, #36	; 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	bf00      	nop

080033d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b0b6      	sub	sp, #216	; 0xd8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d102      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x24>
 80033f6:	2302      	movs	r3, #2
 80033f8:	f000 bc04 	b.w	8003c04 <HAL_ADC_ConfigChannel+0x82c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fe0a 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 83e8 	bne.w	8003be6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	f7ff fd1c 	bl	8002e60 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fdf8 	bl	8003022 <LL_ADC_REG_IsConversionOngoing>
 8003432:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fe04 	bl	8003048 <LL_ADC_INJ_IsConversionOngoing>
 8003440:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003444:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 81d9 	bne.w	8003800 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800344e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 81d4 	bne.w	8003800 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003460:	d10f      	bne.n	8003482 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	4619      	mov	r1, r3
 800346e:	f7ff fd23 	bl	8002eb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fcdd 	bl	8002e3a <LL_ADC_SetSamplingTimeCommonConfig>
 8003480:	e00e      	b.n	80034a0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	461a      	mov	r2, r3
 8003490:	f7ff fd12 	bl	8002eb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fccd 	bl	8002e3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	08db      	lsrs	r3, r3, #3
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d022      	beq.n	8003508 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6919      	ldr	r1, [r3, #16]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034d2:	f7ff fc27 	bl	8002d24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6919      	ldr	r1, [r3, #16]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	461a      	mov	r2, r3
 80034e4:	f7ff fc73 	bl	8002dce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6919      	ldr	r1, [r3, #16]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	7f1b      	ldrb	r3, [r3, #28]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d102      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x126>
 80034f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034fc:	e000      	b.n	8003500 <HAL_ADC_ConfigChannel+0x128>
 80034fe:	2300      	movs	r3, #0
 8003500:	461a      	mov	r2, r3
 8003502:	f7ff fc7f 	bl	8002e04 <LL_ADC_SetOffsetSaturation>
 8003506:	e17b      	b.n	8003800 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fc2c 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x15c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fc21 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	f003 021f 	and.w	r2, r3, #31
 8003532:	e01e      	b.n	8003572 <HAL_ADC_ConfigChannel+0x19a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fc16 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800355a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003562:	2320      	movs	r3, #32
 8003564:	e004      	b.n	8003570 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003566:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <HAL_ADC_ConfigChannel+0x1b2>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	0e9b      	lsrs	r3, r3, #26
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	e018      	b.n	80035bc <HAL_ADC_ConfigChannel+0x1e4>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800359e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80035a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80035ae:	2320      	movs	r3, #32
 80035b0:	e004      	b.n	80035bc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80035b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035bc:	429a      	cmp	r2, r3
 80035be:	d106      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fbe5 	bl	8002d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2101      	movs	r1, #1
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fbc9 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x222>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fbbe 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 80035f0:	4603      	mov	r3, r0
 80035f2:	0e9b      	lsrs	r3, r3, #26
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	e01e      	b.n	8003638 <HAL_ADC_ConfigChannel+0x260>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2101      	movs	r1, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fbb3 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003606:	4603      	mov	r3, r0
 8003608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800361c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003620:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e004      	b.n	8003636 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800362c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003630:	fab3 f383 	clz	r3, r3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x278>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	e018      	b.n	8003682 <HAL_ADC_ConfigChannel+0x2aa>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003664:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800366c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003674:	2320      	movs	r3, #32
 8003676:	e004      	b.n	8003682 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003682:	429a      	cmp	r2, r3
 8003684:	d106      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fb82 	bl	8002d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fb66 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x2e8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fb5b 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 80036b6:	4603      	mov	r3, r0
 80036b8:	0e9b      	lsrs	r3, r3, #26
 80036ba:	f003 021f 	and.w	r2, r3, #31
 80036be:	e01e      	b.n	80036fe <HAL_ADC_ConfigChannel+0x326>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2102      	movs	r1, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fb50 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80036de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80036e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80036ee:	2320      	movs	r3, #32
 80036f0:	e004      	b.n	80036fc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80036f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x33e>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	0e9b      	lsrs	r3, r3, #26
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	e016      	b.n	8003744 <HAL_ADC_ConfigChannel+0x36c>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800372a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800372e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003736:	2320      	movs	r3, #32
 8003738:	e004      	b.n	8003744 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800373a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003744:	429a      	cmp	r2, r3
 8003746:	d106      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2200      	movs	r2, #0
 800374e:	2102      	movs	r1, #2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fb21 	bl	8002d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2103      	movs	r1, #3
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fb05 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003762:	4603      	mov	r3, r0
 8003764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x3aa>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2103      	movs	r1, #3
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fafa 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 8003778:	4603      	mov	r3, r0
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	e017      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x3da>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2103      	movs	r1, #3
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff faef 	bl	8002d6c <LL_ADC_GetOffsetChannel>
 800378e:	4603      	mov	r3, r0
 8003790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800379a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800379c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800379e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80037a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x3f2>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0e9b      	lsrs	r3, r3, #26
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	e011      	b.n	80037ee <HAL_ADC_ConfigChannel+0x416>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80037d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80037dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80037e2:	2320      	movs	r3, #32
 80037e4:	e003      	b.n	80037ee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d106      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	2103      	movs	r1, #3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff facc 	bl	8002d98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fbf9 	bl	8002ffc <LL_ADC_IsEnabled>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	f040 813d 	bne.w	8003a8c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	461a      	mov	r2, r3
 8003820:	f7ff fb76 	bl	8002f10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4aa2      	ldr	r2, [pc, #648]	; (8003ab4 <HAL_ADC_ConfigChannel+0x6dc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	f040 812e 	bne.w	8003a8c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10b      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x480>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0e9b      	lsrs	r3, r3, #26
 8003846:	3301      	adds	r3, #1
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	2b09      	cmp	r3, #9
 800384e:	bf94      	ite	ls
 8003850:	2301      	movls	r3, #1
 8003852:	2300      	movhi	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e019      	b.n	800388c <HAL_ADC_ConfigChannel+0x4b4>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003868:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800386a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003870:	2320      	movs	r3, #32
 8003872:	e003      	b.n	800387c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3301      	adds	r3, #1
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	2b09      	cmp	r3, #9
 8003884:	bf94      	ite	ls
 8003886:	2301      	movls	r3, #1
 8003888:	2300      	movhi	r3, #0
 800388a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800388c:	2b00      	cmp	r3, #0
 800388e:	d079      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003898:	2b00      	cmp	r3, #0
 800389a:	d107      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x4d4>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	0e9b      	lsrs	r3, r3, #26
 80038a2:	3301      	adds	r3, #1
 80038a4:	069b      	lsls	r3, r3, #26
 80038a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038aa:	e015      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x500>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80038be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80038c4:	2320      	movs	r3, #32
 80038c6:	e003      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80038c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	069b      	lsls	r3, r3, #26
 80038d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x520>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0e9b      	lsrs	r3, r3, #26
 80038ea:	3301      	adds	r3, #1
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	e017      	b.n	8003928 <HAL_ADC_ConfigChannel+0x550>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003908:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800390a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003910:	2320      	movs	r3, #32
 8003912:	e003      	b.n	800391c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	3301      	adds	r3, #1
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	ea42 0103 	orr.w	r1, r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_ADC_ConfigChannel+0x576>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	0e9b      	lsrs	r3, r3, #26
 800393e:	3301      	adds	r3, #1
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4613      	mov	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	051b      	lsls	r3, r3, #20
 800394c:	e018      	b.n	8003980 <HAL_ADC_ConfigChannel+0x5a8>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003966:	2320      	movs	r3, #32
 8003968:	e003      	b.n	8003972 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	3301      	adds	r3, #1
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003980:	430b      	orrs	r3, r1
 8003982:	e07e      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398c:	2b00      	cmp	r3, #0
 800398e:	d107      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x5c8>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0e9b      	lsrs	r3, r3, #26
 8003996:	3301      	adds	r3, #1
 8003998:	069b      	lsls	r3, r3, #26
 800399a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800399e:	e015      	b.n	80039cc <HAL_ADC_ConfigChannel+0x5f4>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80039b8:	2320      	movs	r3, #32
 80039ba:	e003      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	069b      	lsls	r3, r3, #26
 80039c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x614>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0e9b      	lsrs	r3, r3, #26
 80039de:	3301      	adds	r3, #1
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	e017      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x644>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	61fb      	str	r3, [r7, #28]
  return result;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003a04:	2320      	movs	r3, #32
 8003a06:	e003      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2101      	movs	r1, #1
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	ea42 0103 	orr.w	r1, r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10d      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x670>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	3301      	adds	r3, #1
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3b1e      	subs	r3, #30
 8003a40:	051b      	lsls	r3, r3, #20
 8003a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a46:	e01b      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x6a8>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	613b      	str	r3, [r7, #16]
  return result;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003a60:	2320      	movs	r3, #32
 8003a62:	e003      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f003 021f 	and.w	r2, r3, #31
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	3b1e      	subs	r3, #30
 8003a7a:	051b      	lsls	r3, r3, #20
 8003a7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a80:	430b      	orrs	r3, r1
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	6892      	ldr	r2, [r2, #8]
 8003a86:	4619      	mov	r1, r3
 8003a88:	f7ff fa16 	bl	8002eb8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80af 	beq.w	8003bf8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa2:	d004      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x6d6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a04      	ldr	r2, [pc, #16]	; (8003abc <HAL_ADC_ConfigChannel+0x6e4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d10a      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x6ec>
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <HAL_ADC_ConfigChannel+0x6e8>)
 8003ab0:	e009      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x6ee>
 8003ab2:	bf00      	nop
 8003ab4:	407f0000 	.word	0x407f0000
 8003ab8:	80080000 	.word	0x80080000
 8003abc:	50000100 	.word	0x50000100
 8003ac0:	50000300 	.word	0x50000300
 8003ac4:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <HAL_ADC_ConfigChannel+0x834>)
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff f91e 	bl	8002d08 <LL_ADC_GetCommonPathInternalCh>
 8003acc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a4e      	ldr	r2, [pc, #312]	; (8003c10 <HAL_ADC_ConfigChannel+0x838>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0x70c>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a4d      	ldr	r2, [pc, #308]	; (8003c14 <HAL_ADC_ConfigChannel+0x83c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d134      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d12e      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af8:	d17e      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b02:	d004      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x736>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a43      	ldr	r2, [pc, #268]	; (8003c18 <HAL_ADC_ConfigChannel+0x840>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x73a>
 8003b0e:	4a43      	ldr	r2, [pc, #268]	; (8003c1c <HAL_ADC_ConfigChannel+0x844>)
 8003b10:	e000      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x73c>
 8003b12:	4a3e      	ldr	r2, [pc, #248]	; (8003c0c <HAL_ADC_ConfigChannel+0x834>)
 8003b14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f7ff f8df 	bl	8002ce2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b24:	4b3e      	ldr	r3, [pc, #248]	; (8003c20 <HAL_ADC_ConfigChannel+0x848>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	4a3e      	ldr	r2, [pc, #248]	; (8003c24 <HAL_ADC_ConfigChannel+0x84c>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	4613      	mov	r3, r2
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b3e:	e002      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f9      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b4c:	e054      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a35      	ldr	r2, [pc, #212]	; (8003c28 <HAL_ADC_ConfigChannel+0x850>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d120      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x7c2>
 8003b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11a      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b6c:	d144      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b76:	d004      	beq.n	8003b82 <HAL_ADC_ConfigChannel+0x7aa>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <HAL_ADC_ConfigChannel+0x840>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x7ae>
 8003b82:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <HAL_ADC_ConfigChannel+0x844>)
 8003b84:	e000      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x7b0>
 8003b86:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <HAL_ADC_ConfigChannel+0x834>)
 8003b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7ff f8a5 	bl	8002ce2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b98:	e02e      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <HAL_ADC_ConfigChannel+0x854>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d129      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d123      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <HAL_ADC_ConfigChannel+0x840>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01e      	beq.n	8003bf8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bc2:	d004      	beq.n	8003bce <HAL_ADC_ConfigChannel+0x7f6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <HAL_ADC_ConfigChannel+0x840>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x7fa>
 8003bce:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <HAL_ADC_ConfigChannel+0x844>)
 8003bd0:	e000      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x7fc>
 8003bd2:	4a0e      	ldr	r2, [pc, #56]	; (8003c0c <HAL_ADC_ConfigChannel+0x834>)
 8003bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f7ff f87f 	bl	8002ce2 <LL_ADC_SetCommonPathInternalCh>
 8003be4:	e008      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c00:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	37d8      	adds	r7, #216	; 0xd8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	50000700 	.word	0x50000700
 8003c10:	c3210000 	.word	0xc3210000
 8003c14:	90c00010 	.word	0x90c00010
 8003c18:	50000100 	.word	0x50000100
 8003c1c:	50000300 	.word	0x50000300
 8003c20:	20000000 	.word	0x20000000
 8003c24:	053e2d63 	.word	0x053e2d63
 8003c28:	c7520000 	.word	0xc7520000
 8003c2c:	cb840000 	.word	0xcb840000

08003c30 <LL_ADC_IsEnabled>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <LL_ADC_IsEnabled+0x18>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <LL_ADC_IsEnabled+0x1a>
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d101      	bne.n	8003c6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b0a1      	sub	sp, #132	; 0x84
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e0cb      	b.n	8003e32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb2:	d102      	bne.n	8003cba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cb4:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	e001      	b.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0aa      	b.n	8003e32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff ffb9 	bl	8003c56 <LL_ADC_REG_IsConversionOngoing>
 8003ce4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ffb3 	bl	8003c56 <LL_ADC_REG_IsConversionOngoing>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 808c 	bne.w	8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 8088 	bne.w	8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d08:	d004      	beq.n	8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4b      	ldr	r2, [pc, #300]	; (8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d101      	bne.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003d14:	4b4a      	ldr	r3, [pc, #296]	; (8003e40 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003d16:	e000      	b.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003d18:	4b4a      	ldr	r3, [pc, #296]	; (8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003d1a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d041      	beq.n	8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d36:	035b      	lsls	r3, r3, #13
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d48:	d004      	beq.n	8003d54 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3b      	ldr	r2, [pc, #236]	; (8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d10f      	bne.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003d54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d58:	f7ff ff6a 	bl	8003c30 <LL_ADC_IsEnabled>
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	4837      	ldr	r0, [pc, #220]	; (8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d60:	f7ff ff66 	bl	8003c30 <LL_ADC_IsEnabled>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4323      	orrs	r3, r4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e008      	b.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003d74:	4834      	ldr	r0, [pc, #208]	; (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003d76:	f7ff ff5b 	bl	8003c30 <LL_ADC_IsEnabled>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d04c      	beq.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d92:	f023 030f 	bic.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	6811      	ldr	r1, [r2, #0]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	6892      	ldr	r2, [r2, #8]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	431a      	orrs	r2, r3
 8003da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da6:	e03d      	b.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dbc:	d004      	beq.n	8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10f      	bne.n	8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003dc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003dcc:	f7ff ff30 	bl	8003c30 <LL_ADC_IsEnabled>
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	481a      	ldr	r0, [pc, #104]	; (8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003dd4:	f7ff ff2c 	bl	8003c30 <LL_ADC_IsEnabled>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4323      	orrs	r3, r4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e008      	b.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003de8:	4817      	ldr	r0, [pc, #92]	; (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003dea:	f7ff ff21 	bl	8003c30 <LL_ADC_IsEnabled>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d012      	beq.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e06:	f023 030f 	bic.w	r3, r3, #15
 8003e0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e0c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e0e:	e009      	b.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e22:	e000      	b.n	8003e26 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3784      	adds	r7, #132	; 0x84
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd90      	pop	{r4, r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	50000100 	.word	0x50000100
 8003e40:	50000300 	.word	0x50000300
 8003e44:	50000700 	.word	0x50000700
 8003e48:	50000400 	.word	0x50000400

08003e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <__NVIC_SetPriorityGrouping+0x44>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e7e:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <__NVIC_SetPriorityGrouping+0x44>)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	60d3      	str	r3, [r2, #12]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <__NVIC_GetPriorityGrouping+0x18>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	f003 0307 	and.w	r3, r3, #7
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db0b      	blt.n	8003eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	f003 021f 	and.w	r2, r3, #31
 8003ec8:	4907      	ldr	r1, [pc, #28]	; (8003ee8 <__NVIC_EnableIRQ+0x38>)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	e000e100 	.word	0xe000e100

08003eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	6039      	str	r1, [r7, #0]
 8003ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	db0a      	blt.n	8003f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	490c      	ldr	r1, [pc, #48]	; (8003f38 <__NVIC_SetPriority+0x4c>)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	0112      	lsls	r2, r2, #4
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	440b      	add	r3, r1
 8003f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f14:	e00a      	b.n	8003f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4908      	ldr	r1, [pc, #32]	; (8003f3c <__NVIC_SetPriority+0x50>)
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	3b04      	subs	r3, #4
 8003f24:	0112      	lsls	r2, r2, #4
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	440b      	add	r3, r1
 8003f2a:	761a      	strb	r2, [r3, #24]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000e100 	.word	0xe000e100
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	; 0x24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f1c3 0307 	rsb	r3, r3, #7
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	bf28      	it	cs
 8003f5e:	2304      	movcs	r3, #4
 8003f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3304      	adds	r3, #4
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d902      	bls.n	8003f70 <NVIC_EncodePriority+0x30>
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3b03      	subs	r3, #3
 8003f6e:	e000      	b.n	8003f72 <NVIC_EncodePriority+0x32>
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	401a      	ands	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	43d9      	mvns	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f98:	4313      	orrs	r3, r2
         );
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3724      	adds	r7, #36	; 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb8:	d301      	bcc.n	8003fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e00f      	b.n	8003fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <SysTick_Config+0x40>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fc6:	210f      	movs	r1, #15
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fcc:	f7ff ff8e 	bl	8003eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <SysTick_Config+0x40>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fd6:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <SysTick_Config+0x40>)
 8003fd8:	2207      	movs	r2, #7
 8003fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	e000e010 	.word	0xe000e010

08003fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff29 	bl	8003e4c <__NVIC_SetPriorityGrouping>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	4603      	mov	r3, r0
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004010:	f7ff ff40 	bl	8003e94 <__NVIC_GetPriorityGrouping>
 8004014:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	6978      	ldr	r0, [r7, #20]
 800401c:	f7ff ff90 	bl	8003f40 <NVIC_EncodePriority>
 8004020:	4602      	mov	r2, r0
 8004022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff5f 	bl	8003eec <__NVIC_SetPriority>
}
 800402e:	bf00      	nop
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff33 	bl	8003eb0 <__NVIC_EnableIRQ>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ffa4 	bl	8003fa8 <SysTick_Config>
 8004060:	4603      	mov	r3, r0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e08d      	b.n	800419a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_DMA_Init+0x138>)
 8004086:	429a      	cmp	r2, r3
 8004088:	d80f      	bhi.n	80040aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	4b45      	ldr	r3, [pc, #276]	; (80041a8 <HAL_DMA_Init+0x13c>)
 8004092:	4413      	add	r3, r2
 8004094:	4a45      	ldr	r2, [pc, #276]	; (80041ac <HAL_DMA_Init+0x140>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	009a      	lsls	r2, r3, #2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a42      	ldr	r2, [pc, #264]	; (80041b0 <HAL_DMA_Init+0x144>)
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
 80040a8:	e00e      	b.n	80040c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b40      	ldr	r3, [pc, #256]	; (80041b4 <HAL_DMA_Init+0x148>)
 80040b2:	4413      	add	r3, r2
 80040b4:	4a3d      	ldr	r2, [pc, #244]	; (80041ac <HAL_DMA_Init+0x140>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	009a      	lsls	r2, r3, #2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a3c      	ldr	r2, [pc, #240]	; (80041b8 <HAL_DMA_Init+0x14c>)
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f9be 	bl	800449c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004128:	d102      	bne.n	8004130 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004144:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d010      	beq.n	8004170 <HAL_DMA_Init+0x104>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b04      	cmp	r3, #4
 8004154:	d80c      	bhi.n	8004170 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9de 	bl	8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	e008      	b.n	8004182 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40020407 	.word	0x40020407
 80041a8:	bffdfff8 	.word	0xbffdfff8
 80041ac:	cccccccd 	.word	0xcccccccd
 80041b0:	40020000 	.word	0x40020000
 80041b4:	bffdfbf8 	.word	0xbffdfbf8
 80041b8:	40020400 	.word	0x40020400

080041bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d005      	beq.n	80041e0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2204      	movs	r2, #4
 80041d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
 80041de:	e037      	b.n	8004250 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 020e 	bic.w	r2, r2, #14
 80041ee:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041fe:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	f003 021f 	and.w	r2, r3, #31
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	2101      	movs	r1, #1
 800421e:	fa01 f202 	lsl.w	r2, r1, r2
 8004222:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800422c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00c      	beq.n	8004250 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004244:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800424e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004260:	7bfb      	ldrb	r3, [r7, #15]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d00d      	beq.n	80042a2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2204      	movs	r2, #4
 800428a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
 80042a0:	e047      	b.n	8004332 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 020e 	bic.w	r2, r2, #14
 80042b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	f003 021f 	and.w	r2, r3, #31
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2101      	movs	r1, #1
 80042e0:	fa01 f202 	lsl.w	r2, r1, r2
 80042e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00c      	beq.n	8004312 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004306:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004310:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
    }
  }
  return status;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2204      	movs	r2, #4
 800435e:	409a      	lsls	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d026      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x7a>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d021      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0204 	bic.w	r2, r2, #4
 800438e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004394:	f003 021f 	and.w	r2, r3, #31
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	2104      	movs	r1, #4
 800439e:	fa01 f202 	lsl.w	r2, r1, r2
 80043a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d071      	beq.n	8004490 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043b4:	e06c      	b.n	8004490 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	2202      	movs	r2, #2
 80043c0:	409a      	lsls	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d02e      	beq.n	8004428 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d029      	beq.n	8004428 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 020a 	bic.w	r2, r2, #10
 80043f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f003 021f 	and.w	r2, r3, #31
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2102      	movs	r1, #2
 8004408:	fa01 f202 	lsl.w	r2, r1, r2
 800440c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d038      	beq.n	8004490 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004426:	e033      	b.n	8004490 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2208      	movs	r2, #8
 8004432:	409a      	lsls	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d02a      	beq.n	8004492 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d025      	beq.n	8004492 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 020e 	bic.w	r2, r2, #14
 8004454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f003 021f 	and.w	r2, r3, #31
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2101      	movs	r1, #1
 8004464:	fa01 f202 	lsl.w	r2, r1, r2
 8004468:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004490:	bf00      	nop
 8004492:	bf00      	nop
}
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b16      	ldr	r3, [pc, #88]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d802      	bhi.n	80044b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80044b0:	4b15      	ldr	r3, [pc, #84]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e001      	b.n	80044ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80044b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3b08      	subs	r3, #8
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	009a      	lsls	r2, r3, #2
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	461a      	mov	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2201      	movs	r2, #1
 80044f0:	409a      	lsls	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40020407 	.word	0x40020407
 8004508:	40020800 	.word	0x40020800
 800450c:	40020820 	.word	0x40020820
 8004510:	cccccccd 	.word	0xcccccccd
 8004514:	40020880 	.word	0x40020880

08004518 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a08      	ldr	r2, [pc, #32]	; (800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800453a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3b01      	subs	r3, #1
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	2201      	movs	r2, #1
 8004546:	409a      	lsls	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	1000823f 	.word	0x1000823f
 800455c:	40020940 	.word	0x40020940

08004560 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e147      	b.n	8004802 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fe f900 	bl	800278c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0210 	bic.w	r2, r2, #16
 800459a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800459c:	f7fe fb60 	bl	8002c60 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045a2:	e012      	b.n	80045ca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80045a4:	f7fe fb5c 	bl	8002c60 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b0a      	cmp	r3, #10
 80045b0:	d90b      	bls.n	80045ca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2203      	movs	r2, #3
 80045c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e11b      	b.n	8004802 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d0e5      	beq.n	80045a4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045e8:	f7fe fb3a 	bl	8002c60 <HAL_GetTick>
 80045ec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80045ee:	e012      	b.n	8004616 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80045f0:	f7fe fb36 	bl	8002c60 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b0a      	cmp	r3, #10
 80045fc:	d90b      	bls.n	8004616 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004602:	f043 0201 	orr.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2203      	movs	r2, #3
 800460e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0f5      	b.n	8004802 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0e5      	beq.n	80045f0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0202 	orr.w	r2, r2, #2
 8004632:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a74      	ldr	r2, [pc, #464]	; (800480c <HAL_FDCAN_Init+0x2ac>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d103      	bne.n	8004646 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800463e:	4a74      	ldr	r2, [pc, #464]	; (8004810 <HAL_FDCAN_Init+0x2b0>)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	7c1b      	ldrb	r3, [r3, #16]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d108      	bne.n	8004660 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465c:	619a      	str	r2, [r3, #24]
 800465e:	e007      	b.n	8004670 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	7c5b      	ldrb	r3, [r3, #17]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d108      	bne.n	800468a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004686:	619a      	str	r2, [r3, #24]
 8004688:	e007      	b.n	800469a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004698:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7c9b      	ldrb	r3, [r3, #18]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d108      	bne.n	80046b4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046b0:	619a      	str	r2, [r3, #24]
 80046b2:	e007      	b.n	80046c4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046c2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80046e8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0210 	bic.w	r2, r2, #16
 80046f8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d108      	bne.n	8004714 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0204 	orr.w	r2, r2, #4
 8004710:	619a      	str	r2, [r3, #24]
 8004712:	e02c      	b.n	800476e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d028      	beq.n	800476e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d01c      	beq.n	800475e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004732:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0210 	orr.w	r2, r2, #16
 8004742:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d110      	bne.n	800476e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0220 	orr.w	r2, r2, #32
 800475a:	619a      	str	r2, [r3, #24]
 800475c:	e007      	b.n	800476e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0220 	orr.w	r2, r2, #32
 800476c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	3b01      	subs	r3, #1
 8004774:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	3b01      	subs	r3, #1
 800477c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800477e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004786:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	3b01      	subs	r3, #1
 8004790:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004796:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004798:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a2:	d115      	bne.n	80047d0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	3b01      	subs	r3, #1
 80047b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	3b01      	subs	r3, #1
 80047ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80047bc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	3b01      	subs	r3, #1
 80047c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80047cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80047ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f9c2 	bl	8004b70 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40006400 	.word	0x40006400
 8004810:	40006500 	.word	0x40006500

08004814 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004822:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	4013      	ands	r3, r2
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	6a3a      	ldr	r2, [r7, #32]
 8004848:	4013      	ands	r3, r2
 800484a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004856:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	4013      	ands	r3, r2
 8004862:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800486e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004882:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004886:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4013      	ands	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00d      	beq.n	80048be <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d006      	beq.n	80048be <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2240      	movs	r2, #64	; 0x40
 80048b6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f939 	bl	8004b30 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d014      	beq.n	8004904 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048e2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4013      	ands	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048fa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80048fc:	6939      	ldr	r1, [r7, #16]
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8f7 	bl	8004af2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f8b6 	bl	8004a86 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a3a      	ldr	r2, [r7, #32]
 8004926:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004928:	6a39      	ldr	r1, [r7, #32]
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f8b6 	bl	8004a9c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800493e:	69f9      	ldr	r1, [r7, #28]
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8b6 	bl	8004ab2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00e      	beq.n	8004972 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f8ab 	bl	8004ac8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01a      	beq.n	80049b6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004996:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4013      	ands	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2280      	movs	r2, #128	; 0x80
 80049ac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f893 	bl	8004adc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00e      	beq.n	80049e2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f893 	bl	8004b08 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00e      	beq.n	8004a0e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a06:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f887 	bl	8004b1c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d011      	beq.n	8004a40 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004a4e:	6979      	ldr	r1, [r7, #20]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f881 	bl	8004b58 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f863 	bl	8004b44 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3728      	adds	r7, #40	; 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004b78:	4b2c      	ldr	r3, [pc, #176]	; (8004c2c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004b7a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2b      	ldr	r2, [pc, #172]	; (8004c30 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d103      	bne.n	8004b8e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004b8c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9c:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba4:	041a      	lsls	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc2:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	061a      	lsls	r2, r3, #24
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e005      	b.n	8004c10 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d3f3      	bcc.n	8004c04 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	4000a400 	.word	0x4000a400
 8004c30:	40006800 	.word	0x40006800

08004c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c42:	e15a      	b.n	8004efa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2101      	movs	r1, #1
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	4013      	ands	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 814c 	beq.w	8004ef4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d005      	beq.n	8004c74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d130      	bne.n	8004cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	2203      	movs	r2, #3
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004caa:	2201      	movs	r2, #1
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	f003 0201 	and.w	r2, r3, #1
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d017      	beq.n	8004d12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	2203      	movs	r2, #3
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d123      	bne.n	8004d66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	08da      	lsrs	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3208      	adds	r2, #8
 8004d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	220f      	movs	r2, #15
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	08da      	lsrs	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3208      	adds	r2, #8
 8004d60:	6939      	ldr	r1, [r7, #16]
 8004d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	2203      	movs	r2, #3
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 0203 	and.w	r2, r3, #3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80a6 	beq.w	8004ef4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da8:	4b5b      	ldr	r3, [pc, #364]	; (8004f18 <HAL_GPIO_Init+0x2e4>)
 8004daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dac:	4a5a      	ldr	r2, [pc, #360]	; (8004f18 <HAL_GPIO_Init+0x2e4>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6613      	str	r3, [r2, #96]	; 0x60
 8004db4:	4b58      	ldr	r3, [pc, #352]	; (8004f18 <HAL_GPIO_Init+0x2e4>)
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dc0:	4a56      	ldr	r2, [pc, #344]	; (8004f1c <HAL_GPIO_Init+0x2e8>)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	089b      	lsrs	r3, r3, #2
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	220f      	movs	r2, #15
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dea:	d01f      	beq.n	8004e2c <HAL_GPIO_Init+0x1f8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a4c      	ldr	r2, [pc, #304]	; (8004f20 <HAL_GPIO_Init+0x2ec>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d019      	beq.n	8004e28 <HAL_GPIO_Init+0x1f4>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a4b      	ldr	r2, [pc, #300]	; (8004f24 <HAL_GPIO_Init+0x2f0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_GPIO_Init+0x1f0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	; (8004f28 <HAL_GPIO_Init+0x2f4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00d      	beq.n	8004e20 <HAL_GPIO_Init+0x1ec>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a49      	ldr	r2, [pc, #292]	; (8004f2c <HAL_GPIO_Init+0x2f8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <HAL_GPIO_Init+0x1e8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a48      	ldr	r2, [pc, #288]	; (8004f30 <HAL_GPIO_Init+0x2fc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_GPIO_Init+0x1e4>
 8004e14:	2305      	movs	r3, #5
 8004e16:	e00a      	b.n	8004e2e <HAL_GPIO_Init+0x1fa>
 8004e18:	2306      	movs	r3, #6
 8004e1a:	e008      	b.n	8004e2e <HAL_GPIO_Init+0x1fa>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	e006      	b.n	8004e2e <HAL_GPIO_Init+0x1fa>
 8004e20:	2303      	movs	r3, #3
 8004e22:	e004      	b.n	8004e2e <HAL_GPIO_Init+0x1fa>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e002      	b.n	8004e2e <HAL_GPIO_Init+0x1fa>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <HAL_GPIO_Init+0x1fa>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	f002 0203 	and.w	r2, r2, #3
 8004e34:	0092      	lsls	r2, r2, #2
 8004e36:	4093      	lsls	r3, r2
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e3e:	4937      	ldr	r1, [pc, #220]	; (8004f1c <HAL_GPIO_Init+0x2e8>)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	089b      	lsrs	r3, r3, #2
 8004e44:	3302      	adds	r3, #2
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e4c:	4b39      	ldr	r3, [pc, #228]	; (8004f34 <HAL_GPIO_Init+0x300>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e70:	4a30      	ldr	r2, [pc, #192]	; (8004f34 <HAL_GPIO_Init+0x300>)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <HAL_GPIO_Init+0x300>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4013      	ands	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e9a:	4a26      	ldr	r2, [pc, #152]	; (8004f34 <HAL_GPIO_Init+0x300>)
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ea0:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <HAL_GPIO_Init+0x300>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4013      	ands	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ec4:	4a1b      	ldr	r2, [pc, #108]	; (8004f34 <HAL_GPIO_Init+0x300>)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eca:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <HAL_GPIO_Init+0x300>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004eee:	4a11      	ldr	r2, [pc, #68]	; (8004f34 <HAL_GPIO_Init+0x300>)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f47f ae9d 	bne.w	8004c44 <HAL_GPIO_Init+0x10>
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	48000400 	.word	0x48000400
 8004f24:	48000800 	.word	0x48000800
 8004f28:	48000c00 	.word	0x48000c00
 8004f2c:	48001000 	.word	0x48001000
 8004f30:	48001400 	.word	0x48001400
 8004f34:	40010400 	.word	0x40010400

08004f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	887b      	ldrh	r3, [r7, #2]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
 8004f54:	e001      	b.n	8004f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
 8004f74:	4613      	mov	r3, r2
 8004f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f78:	787b      	ldrb	r3, [r7, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f84:	e002      	b.n	8004f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f86:	887a      	ldrh	r2, [r7, #2]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d141      	bne.n	800502a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fa6:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb2:	d131      	bne.n	8005018 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fb4:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fba:	4a46      	ldr	r2, [pc, #280]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fcc:	4a41      	ldr	r2, [pc, #260]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fd4:	4b40      	ldr	r3, [pc, #256]	; (80050d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2232      	movs	r2, #50	; 0x32
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	4a3f      	ldr	r2, [pc, #252]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	0c9b      	lsrs	r3, r3, #18
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fea:	e002      	b.n	8004ff2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ff2:	4b38      	ldr	r3, [pc, #224]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	d102      	bne.n	8005006 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f2      	bne.n	8004fec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005006:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005012:	d158      	bne.n	80050c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e057      	b.n	80050c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005018:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501e:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005024:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005028:	e04d      	b.n	80050c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005030:	d141      	bne.n	80050b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005032:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800503a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503e:	d131      	bne.n	80050a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005040:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005046:	4a23      	ldr	r2, [pc, #140]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800504c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005050:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005058:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800505e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2232      	movs	r2, #50	; 0x32
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	0c9b      	lsrs	r3, r3, #18
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005076:	e002      	b.n	800507e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3b01      	subs	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508a:	d102      	bne.n	8005092 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f2      	bne.n	8005078 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005092:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509e:	d112      	bne.n	80050c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e011      	b.n	80050c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050a4:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050aa:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050b4:	e007      	b.n	80050c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050b6:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050be:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	40007000 	.word	0x40007000
 80050d8:	20000000 	.word	0x20000000
 80050dc:	431bde83 	.word	0x431bde83

080050e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a04      	ldr	r2, [pc, #16]	; (80050fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050ee:	6093      	str	r3, [r2, #8]
}
 80050f0:	bf00      	nop
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40007000 	.word	0x40007000

08005100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e306      	b.n	8005720 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d075      	beq.n	800520a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511e:	4b97      	ldr	r3, [pc, #604]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005128:	4b94      	ldr	r3, [pc, #592]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d102      	bne.n	800513e <HAL_RCC_OscConfig+0x3e>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d002      	beq.n	8005144 <HAL_RCC_OscConfig+0x44>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d10b      	bne.n	800515c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005144:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d05b      	beq.n	8005208 <HAL_RCC_OscConfig+0x108>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d157      	bne.n	8005208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e2e1      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d106      	bne.n	8005174 <HAL_RCC_OscConfig+0x74>
 8005166:	4b85      	ldr	r3, [pc, #532]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a84      	ldr	r2, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800516c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e01d      	b.n	80051b0 <HAL_RCC_OscConfig+0xb0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x98>
 800517e:	4b7f      	ldr	r3, [pc, #508]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a7e      	ldr	r2, [pc, #504]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4b7c      	ldr	r3, [pc, #496]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a7b      	ldr	r2, [pc, #492]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e00b      	b.n	80051b0 <HAL_RCC_OscConfig+0xb0>
 8005198:	4b78      	ldr	r3, [pc, #480]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a77      	ldr	r2, [pc, #476]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800519e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4b75      	ldr	r3, [pc, #468]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a74      	ldr	r2, [pc, #464]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd fd52 	bl	8002c60 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c0:	f7fd fd4e 	bl	8002c60 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e2a6      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d2:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0xc0>
 80051de:	e014      	b.n	800520a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd fd3e 	bl	8002c60 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e8:	f7fd fd3a 	bl	8002c60 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	; 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e292      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051fa:	4b60      	ldr	r3, [pc, #384]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0xe8>
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d075      	beq.n	8005302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005216:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005220:	4b56      	ldr	r3, [pc, #344]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b0c      	cmp	r3, #12
 800522e:	d102      	bne.n	8005236 <HAL_RCC_OscConfig+0x136>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d002      	beq.n	800523c <HAL_RCC_OscConfig+0x13c>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d11f      	bne.n	800527c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800523c:	4b4f      	ldr	r3, [pc, #316]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_OscConfig+0x154>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e265      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b49      	ldr	r3, [pc, #292]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	4946      	ldr	r1, [pc, #280]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005268:	4b45      	ldr	r3, [pc, #276]	; (8005380 <HAL_RCC_OscConfig+0x280>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7fd fcab 	bl	8002bc8 <HAL_InitTick>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d043      	beq.n	8005300 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e251      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d023      	beq.n	80052cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005284:	4b3d      	ldr	r3, [pc, #244]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3c      	ldr	r2, [pc, #240]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800528a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fd fce6 	bl	8002c60 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005298:	f7fd fce2 	bl	8002c60 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e23a      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052aa:	4b34      	ldr	r3, [pc, #208]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b6:	4b31      	ldr	r3, [pc, #196]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	492d      	ldr	r1, [pc, #180]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	604b      	str	r3, [r1, #4]
 80052ca:	e01a      	b.n	8005302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052cc:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a2a      	ldr	r2, [pc, #168]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fd fcc2 	bl	8002c60 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e0:	f7fd fcbe 	bl	8002c60 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e216      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x1e0>
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005300:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d041      	beq.n	8005392 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01c      	beq.n	8005350 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005316:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531c:	4a17      	ldr	r2, [pc, #92]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005326:	f7fd fc9b 	bl	8002c60 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800532e:	f7fd fc97 	bl	8002c60 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e1ef      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0ef      	beq.n	800532e <HAL_RCC_OscConfig+0x22e>
 800534e:	e020      	b.n	8005392 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005360:	f7fd fc7e 	bl	8002c60 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005366:	e00d      	b.n	8005384 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005368:	f7fd fc7a 	bl	8002c60 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d906      	bls.n	8005384 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e1d2      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
 8005380:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005384:	4b8c      	ldr	r3, [pc, #560]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ea      	bne.n	8005368 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80a6 	beq.w	80054ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053a0:	2300      	movs	r3, #0
 80053a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053a4:	4b84      	ldr	r3, [pc, #528]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_RCC_OscConfig+0x2b4>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <HAL_RCC_OscConfig+0x2b6>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ba:	4b7f      	ldr	r3, [pc, #508]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	4a7e      	ldr	r2, [pc, #504]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c4:	6593      	str	r3, [r2, #88]	; 0x58
 80053c6:	4b7c      	ldr	r3, [pc, #496]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053d2:	2301      	movs	r3, #1
 80053d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053d6:	4b79      	ldr	r3, [pc, #484]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d118      	bne.n	8005414 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053e2:	4b76      	ldr	r3, [pc, #472]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a75      	ldr	r2, [pc, #468]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 80053e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ee:	f7fd fc37 	bl	8002c60 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f6:	f7fd fc33 	bl	8002c60 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e18b      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005408:	4b6c      	ldr	r3, [pc, #432]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d108      	bne.n	800542e <HAL_RCC_OscConfig+0x32e>
 800541c:	4b66      	ldr	r3, [pc, #408]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	4a65      	ldr	r2, [pc, #404]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800542c:	e024      	b.n	8005478 <HAL_RCC_OscConfig+0x378>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b05      	cmp	r3, #5
 8005434:	d110      	bne.n	8005458 <HAL_RCC_OscConfig+0x358>
 8005436:	4b60      	ldr	r3, [pc, #384]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	4a5e      	ldr	r2, [pc, #376]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800543e:	f043 0304 	orr.w	r3, r3, #4
 8005442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005446:	4b5c      	ldr	r3, [pc, #368]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	4a5a      	ldr	r2, [pc, #360]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005456:	e00f      	b.n	8005478 <HAL_RCC_OscConfig+0x378>
 8005458:	4b57      	ldr	r3, [pc, #348]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	4a56      	ldr	r2, [pc, #344]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005468:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d016      	beq.n	80054ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fd fbee 	bl	8002c60 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005486:	e00a      	b.n	800549e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005488:	f7fd fbea 	bl	8002c60 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	; 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e140      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800549e:	4b46      	ldr	r3, [pc, #280]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0ed      	beq.n	8005488 <HAL_RCC_OscConfig+0x388>
 80054ac:	e015      	b.n	80054da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ae:	f7fd fbd7 	bl	8002c60 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054b4:	e00a      	b.n	80054cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b6:	f7fd fbd3 	bl	8002c60 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e129      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054cc:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1ed      	bne.n	80054b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054da:	7ffb      	ldrb	r3, [r7, #31]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d105      	bne.n	80054ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e0:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e4:	4a34      	ldr	r2, [pc, #208]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03c      	beq.n	8005572 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01c      	beq.n	800553a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005500:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005506:	4a2c      	ldr	r2, [pc, #176]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005510:	f7fd fba6 	bl	8002c60 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005518:	f7fd fba2 	bl	8002c60 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0fa      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800552c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ef      	beq.n	8005518 <HAL_RCC_OscConfig+0x418>
 8005538:	e01b      	b.n	8005572 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800553a:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800553c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005540:	4a1d      	ldr	r2, [pc, #116]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554a:	f7fd fb89 	bl	8002c60 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005552:	f7fd fb85 	bl	8002c60 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e0dd      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005564:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ef      	bne.n	8005552 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80d1 	beq.w	800571e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b0c      	cmp	r3, #12
 8005586:	f000 808b 	beq.w	80056a0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d15e      	bne.n	8005650 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005592:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fd fb5f 	bl	8002c60 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055a4:	e00c      	b.n	80055c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fd fb5b 	bl	8002c60 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d905      	bls.n	80055c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e0b3      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c0:	4b59      	ldr	r3, [pc, #356]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ec      	bne.n	80055a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055cc:	4b56      	ldr	r3, [pc, #344]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	4b56      	ldr	r3, [pc, #344]	; (800572c <HAL_RCC_OscConfig+0x62c>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6a11      	ldr	r1, [r2, #32]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055dc:	3a01      	subs	r2, #1
 80055de:	0112      	lsls	r2, r2, #4
 80055e0:	4311      	orrs	r1, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055e6:	0212      	lsls	r2, r2, #8
 80055e8:	4311      	orrs	r1, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055ee:	0852      	lsrs	r2, r2, #1
 80055f0:	3a01      	subs	r2, #1
 80055f2:	0552      	lsls	r2, r2, #21
 80055f4:	4311      	orrs	r1, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055fa:	0852      	lsrs	r2, r2, #1
 80055fc:	3a01      	subs	r2, #1
 80055fe:	0652      	lsls	r2, r2, #25
 8005600:	4311      	orrs	r1, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005606:	06d2      	lsls	r2, r2, #27
 8005608:	430a      	orrs	r2, r1
 800560a:	4947      	ldr	r1, [pc, #284]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800560c:	4313      	orrs	r3, r2
 800560e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005610:	4b45      	ldr	r3, [pc, #276]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a44      	ldr	r2, [pc, #272]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800561a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800561c:	4b42      	ldr	r3, [pc, #264]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a41      	ldr	r2, [pc, #260]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005626:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fd fb1a 	bl	8002c60 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fd fb16 	bl	8002c60 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e06e      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005642:	4b39      	ldr	r3, [pc, #228]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0x530>
 800564e:	e066      	b.n	800571e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005650:	4b35      	ldr	r3, [pc, #212]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a34      	ldr	r2, [pc, #208]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800565a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800565c:	4b32      	ldr	r3, [pc, #200]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a31      	ldr	r2, [pc, #196]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005668:	4b2f      	ldr	r3, [pc, #188]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a2e      	ldr	r2, [pc, #184]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 800566e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005676:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fd faf2 	bl	8002c60 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005680:	f7fd faee 	bl	8002c60 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e046      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005692:	4b25      	ldr	r3, [pc, #148]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <HAL_RCC_OscConfig+0x580>
 800569e:	e03e      	b.n	800571e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e039      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <HAL_RCC_OscConfig+0x628>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f003 0203 	and.w	r2, r3, #3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d12c      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	3b01      	subs	r3, #1
 80056cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d123      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d11b      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d113      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	3b01      	subs	r3, #1
 8005700:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005702:	429a      	cmp	r2, r3
 8005704:	d109      	bne.n	800571a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	3b01      	subs	r3, #1
 8005714:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005716:	429a      	cmp	r2, r3
 8005718:	d001      	beq.n	800571e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	019f800c 	.word	0x019f800c

08005730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e11e      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005748:	4b91      	ldr	r3, [pc, #580]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d910      	bls.n	8005778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005756:	4b8e      	ldr	r3, [pc, #568]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f023 020f 	bic.w	r2, r3, #15
 800575e:	498c      	ldr	r1, [pc, #560]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b8a      	ldr	r3, [pc, #552]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e106      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d073      	beq.n	800586c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d129      	bne.n	80057e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800578c:	4b81      	ldr	r3, [pc, #516]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0f4      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800579c:	f000 f99e 	bl	8005adc <RCC_GetSysClockFreqFromPLLSource>
 80057a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4a7c      	ldr	r2, [pc, #496]	; (8005998 <HAL_RCC_ClockConfig+0x268>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d93f      	bls.n	800582a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057aa:	4b7a      	ldr	r3, [pc, #488]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d033      	beq.n	800582a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d12f      	bne.n	800582a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057ca:	4b72      	ldr	r3, [pc, #456]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057d2:	4a70      	ldr	r2, [pc, #448]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e024      	b.n	800582a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d107      	bne.n	80057f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057e8:	4b6a      	ldr	r3, [pc, #424]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0c6      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057f8:	4b66      	ldr	r3, [pc, #408]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e0be      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005808:	f000 f8ce 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 800580c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4a61      	ldr	r2, [pc, #388]	; (8005998 <HAL_RCC_ClockConfig+0x268>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d909      	bls.n	800582a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005816:	4b5f      	ldr	r3, [pc, #380]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800581e:	4a5d      	ldr	r2, [pc, #372]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005824:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005826:	2380      	movs	r3, #128	; 0x80
 8005828:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800582a:	4b5a      	ldr	r3, [pc, #360]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4957      	ldr	r1, [pc, #348]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005838:	4313      	orrs	r3, r2
 800583a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583c:	f7fd fa10 	bl	8002c60 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005844:	f7fd fa0c 	bl	8002c60 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e095      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b4e      	ldr	r3, [pc, #312]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d023      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005884:	4b43      	ldr	r3, [pc, #268]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4a42      	ldr	r2, [pc, #264]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800588a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800588e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800589c:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058a4:	4a3b      	ldr	r2, [pc, #236]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ac:	4b39      	ldr	r3, [pc, #228]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4936      	ldr	r1, [pc, #216]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
 80058be:	e008      	b.n	80058d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b80      	cmp	r3, #128	; 0x80
 80058c4:	d105      	bne.n	80058d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058c6:	4b33      	ldr	r3, [pc, #204]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4a32      	ldr	r2, [pc, #200]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 80058cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d21d      	bcs.n	800591c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e0:	4b2b      	ldr	r3, [pc, #172]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 020f 	bic.w	r2, r3, #15
 80058e8:	4929      	ldr	r1, [pc, #164]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058f0:	f7fd f9b6 	bl	8002c60 <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	e00a      	b.n	800590e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f8:	f7fd f9b2 	bl	8002c60 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e03b      	b.n	8005986 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800590e:	4b20      	ldr	r3, [pc, #128]	; (8005990 <HAL_RCC_ClockConfig+0x260>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d1ed      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005928:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4917      	ldr	r1, [pc, #92]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005936:	4313      	orrs	r3, r2
 8005938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	490f      	ldr	r1, [pc, #60]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005956:	4313      	orrs	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800595a:	f000 f825 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 800595e:	4602      	mov	r2, r0
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <HAL_RCC_ClockConfig+0x264>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	091b      	lsrs	r3, r3, #4
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	490c      	ldr	r1, [pc, #48]	; (800599c <HAL_RCC_ClockConfig+0x26c>)
 800596c:	5ccb      	ldrb	r3, [r1, r3]
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	fa22 f303 	lsr.w	r3, r2, r3
 8005976:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <HAL_RCC_ClockConfig+0x270>)
 8005978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <HAL_RCC_ClockConfig+0x274>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f7fd f922 	bl	8002bc8 <HAL_InitTick>
 8005984:	4603      	mov	r3, r0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40022000 	.word	0x40022000
 8005994:	40021000 	.word	0x40021000
 8005998:	04c4b400 	.word	0x04c4b400
 800599c:	080099cc 	.word	0x080099cc
 80059a0:	20000000 	.word	0x20000000
 80059a4:	20000004 	.word	0x20000004

080059a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059ae:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d102      	bne.n	80059c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059ba:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	e047      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059c0:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 030c 	and.w	r3, r3, #12
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d102      	bne.n	80059d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059cc:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	e03e      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059d2:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	2b0c      	cmp	r3, #12
 80059dc:	d136      	bne.n	8005a4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059de:	4b20      	ldr	r3, [pc, #128]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059e8:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3301      	adds	r3, #1
 80059f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d10c      	bne.n	8005a16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059fc:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a06:	68d2      	ldr	r2, [r2, #12]
 8005a08:	0a12      	lsrs	r2, r2, #8
 8005a0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	617b      	str	r3, [r7, #20]
      break;
 8005a14:	e00c      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a20:	68d2      	ldr	r2, [r2, #12]
 8005a22:	0a12      	lsrs	r2, r2, #8
 8005a24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]
      break;
 8005a2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	0e5b      	lsrs	r3, r3, #25
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	e001      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a50:	693b      	ldr	r3, [r7, #16]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40021000 	.word	0x40021000
 8005a64:	00f42400 	.word	0x00f42400
 8005a68:	007a1200 	.word	0x007a1200

08005a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000000 	.word	0x20000000

08005a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a88:	f7ff fff0 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	4904      	ldr	r1, [pc, #16]	; (8005aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a9a:	5ccb      	ldrb	r3, [r1, r3]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	080099dc 	.word	0x080099dc

08005ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ab4:	f7ff ffda 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	0adb      	lsrs	r3, r3, #11
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4904      	ldr	r1, [pc, #16]	; (8005ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	080099dc 	.word	0x080099dc

08005adc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ae2:	4b1e      	ldr	r3, [pc, #120]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aec:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	3301      	adds	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d10c      	bne.n	8005b1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b00:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b0a:	68d2      	ldr	r2, [r2, #12]
 8005b0c:	0a12      	lsrs	r2, r2, #8
 8005b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	617b      	str	r3, [r7, #20]
    break;
 8005b18:	e00c      	b.n	8005b34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b1a:	4a12      	ldr	r2, [pc, #72]	; (8005b64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	4a0e      	ldr	r2, [pc, #56]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b24:	68d2      	ldr	r2, [r2, #12]
 8005b26:	0a12      	lsrs	r2, r2, #8
 8005b28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b2c:	fb02 f303 	mul.w	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]
    break;
 8005b32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b34:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	0e5b      	lsrs	r3, r3, #25
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	3301      	adds	r3, #1
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b4e:	687b      	ldr	r3, [r7, #4]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	007a1200 	.word	0x007a1200
 8005b64:	00f42400 	.word	0x00f42400

08005b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b70:	2300      	movs	r3, #0
 8005b72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b74:	2300      	movs	r3, #0
 8005b76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8098 	beq.w	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8a:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10d      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b96:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9a:	4a3f      	ldr	r2, [pc, #252]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ba2:	4b3d      	ldr	r3, [pc, #244]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005baa:	60bb      	str	r3, [r7, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bb2:	4b3a      	ldr	r3, [pc, #232]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a39      	ldr	r2, [pc, #228]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bbe:	f7fd f84f 	bl	8002c60 <HAL_GetTick>
 8005bc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bc4:	e009      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc6:	f7fd f84b 	bl	8002c60 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d902      	bls.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	74fb      	strb	r3, [r7, #19]
        break;
 8005bd8:	e005      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bda:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0ef      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d159      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bec:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01e      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d019      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c08:	4b23      	ldr	r3, [pc, #140]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c14:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c24:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c34:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d016      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c46:	f7fd f80b 	bl	8002c60 <HAL_GetTick>
 8005c4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c4c:	e00b      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f7fd f807 	bl	8002c60 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d902      	bls.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	74fb      	strb	r3, [r7, #19]
            break;
 8005c64:	e006      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0ec      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c88:	4903      	ldr	r1, [pc, #12]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c90:	e008      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c92:	7cfb      	ldrb	r3, [r7, #19]
 8005c94:	74bb      	strb	r3, [r7, #18]
 8005c96:	e005      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
 8005ca2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ca4:	7c7b      	ldrb	r3, [r7, #17]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d105      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005caa:	4ba7      	ldr	r3, [pc, #668]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cae:	4aa6      	ldr	r2, [pc, #664]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cc2:	4ba1      	ldr	r3, [pc, #644]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc8:	f023 0203 	bic.w	r2, r3, #3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	499d      	ldr	r1, [pc, #628]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ce4:	4b98      	ldr	r3, [pc, #608]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f023 020c 	bic.w	r2, r3, #12
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4995      	ldr	r1, [pc, #596]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d06:	4b90      	ldr	r3, [pc, #576]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	498c      	ldr	r1, [pc, #560]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d28:	4b87      	ldr	r3, [pc, #540]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	4984      	ldr	r1, [pc, #528]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d4a:	4b7f      	ldr	r3, [pc, #508]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	497b      	ldr	r1, [pc, #492]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d6c:	4b76      	ldr	r3, [pc, #472]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	4973      	ldr	r1, [pc, #460]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d8e:	4b6e      	ldr	r3, [pc, #440]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	496a      	ldr	r1, [pc, #424]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005db0:	4b65      	ldr	r3, [pc, #404]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	4962      	ldr	r1, [pc, #392]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dd2:	4b5d      	ldr	r3, [pc, #372]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	4959      	ldr	r1, [pc, #356]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005df4:	4b54      	ldr	r3, [pc, #336]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	4951      	ldr	r1, [pc, #324]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d015      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e16:	4b4c      	ldr	r3, [pc, #304]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	4948      	ldr	r1, [pc, #288]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e34:	d105      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e36:	4b44      	ldr	r3, [pc, #272]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4a43      	ldr	r2, [pc, #268]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e40:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d015      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e4e:	4b3e      	ldr	r3, [pc, #248]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	493a      	ldr	r1, [pc, #232]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6c:	d105      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e6e:	4b36      	ldr	r3, [pc, #216]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	4a35      	ldr	r2, [pc, #212]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e78:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d015      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e86:	4b30      	ldr	r3, [pc, #192]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e94:	492c      	ldr	r1, [pc, #176]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ea4:	d105      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea6:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	4a27      	ldr	r2, [pc, #156]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eb0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d015      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	491e      	ldr	r1, [pc, #120]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005edc:	d105      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ede:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d015      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f04:	4910      	ldr	r1, [pc, #64]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f14:	d105      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	4a0b      	ldr	r2, [pc, #44]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f20:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d018      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f2e:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	4902      	ldr	r1, [pc, #8]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	e001      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f52:	d105      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f54:	4b21      	ldr	r3, [pc, #132]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d015      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	4918      	ldr	r1, [pc, #96]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8a:	d105      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f8c:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4a12      	ldr	r2, [pc, #72]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d015      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005fa4:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb2:	490a      	ldr	r1, [pc, #40]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fc2:	d105      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4a04      	ldr	r2, [pc, #16]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005fd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000

08005fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e049      	b.n	8006086 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fc fc22 	bl	8002850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f000 fc60 	bl	80068e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e049      	b.n	8006134 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d106      	bne.n	80060ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f841 	bl	800613c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3304      	adds	r3, #4
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f000 fc09 	bl	80068e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b02      	cmp	r3, #2
 8006164:	d122      	bne.n	80061ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b02      	cmp	r3, #2
 8006172:	d11b      	bne.n	80061ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0202 	mvn.w	r2, #2
 800617c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fb88 	bl	80068a8 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb7a 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fb8b 	bl	80068bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d122      	bne.n	8006200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d11b      	bne.n	8006200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0204 	mvn.w	r2, #4
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fb5e 	bl	80068a8 <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fb50 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fb61 	bl	80068bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b08      	cmp	r3, #8
 800620c:	d122      	bne.n	8006254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d11b      	bne.n	8006254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0208 	mvn.w	r2, #8
 8006224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2204      	movs	r2, #4
 800622a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fb34 	bl	80068a8 <HAL_TIM_IC_CaptureCallback>
 8006240:	e005      	b.n	800624e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fb26 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fb37 	bl	80068bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b10      	cmp	r3, #16
 8006260:	d122      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b10      	cmp	r3, #16
 800626e:	d11b      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0210 	mvn.w	r2, #16
 8006278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2208      	movs	r2, #8
 800627e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fb0a 	bl	80068a8 <HAL_TIM_IC_CaptureCallback>
 8006294:	e005      	b.n	80062a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fafc 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fb0d 	bl	80068bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d10e      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d107      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0201 	mvn.w	r2, #1
 80062cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fad6 	bl	8006880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b80      	cmp	r3, #128	; 0x80
 80062e0:	d10e      	bne.n	8006300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ec:	2b80      	cmp	r3, #128	; 0x80
 80062ee:	d107      	bne.n	8006300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 ffee 	bl	80072dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630e:	d10e      	bne.n	800632e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631a:	2b80      	cmp	r3, #128	; 0x80
 800631c:	d107      	bne.n	800632e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 ffe1 	bl	80072f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d10e      	bne.n	800635a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d107      	bne.n	800635a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fabb 	bl	80068d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b20      	cmp	r3, #32
 8006366:	d10e      	bne.n	8006386 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b20      	cmp	r3, #32
 8006374:	d107      	bne.n	8006386 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f06f 0220 	mvn.w	r2, #32
 800637e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 ffa1 	bl	80072c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006394:	d10f      	bne.n	80063b6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a4:	d107      	bne.n	80063b6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80063ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 ffa7 	bl	8007304 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063c4:	d10f      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80063de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 ff99 	bl	8007318 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063f4:	d10f      	bne.n	8006416 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006404:	d107      	bne.n	8006416 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800640e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 ff8b 	bl	800732c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006420:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006424:	d10f      	bne.n	8006446 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006430:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006434:	d107      	bne.n	8006446 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800643e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 ff7d 	bl	8007340 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800646a:	2302      	movs	r3, #2
 800646c:	e0ff      	b.n	800666e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b14      	cmp	r3, #20
 800647a:	f200 80f0 	bhi.w	800665e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	080064d9 	.word	0x080064d9
 8006488:	0800665f 	.word	0x0800665f
 800648c:	0800665f 	.word	0x0800665f
 8006490:	0800665f 	.word	0x0800665f
 8006494:	08006519 	.word	0x08006519
 8006498:	0800665f 	.word	0x0800665f
 800649c:	0800665f 	.word	0x0800665f
 80064a0:	0800665f 	.word	0x0800665f
 80064a4:	0800655b 	.word	0x0800655b
 80064a8:	0800665f 	.word	0x0800665f
 80064ac:	0800665f 	.word	0x0800665f
 80064b0:	0800665f 	.word	0x0800665f
 80064b4:	0800659b 	.word	0x0800659b
 80064b8:	0800665f 	.word	0x0800665f
 80064bc:	0800665f 	.word	0x0800665f
 80064c0:	0800665f 	.word	0x0800665f
 80064c4:	080065dd 	.word	0x080065dd
 80064c8:	0800665f 	.word	0x0800665f
 80064cc:	0800665f 	.word	0x0800665f
 80064d0:	0800665f 	.word	0x0800665f
 80064d4:	0800661d 	.word	0x0800661d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fa9e 	bl	8006a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0208 	orr.w	r2, r2, #8
 80064f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0204 	bic.w	r2, r2, #4
 8006502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6999      	ldr	r1, [r3, #24]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	619a      	str	r2, [r3, #24]
      break;
 8006516:	e0a5      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fb18 	bl	8006b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6999      	ldr	r1, [r3, #24]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	021a      	lsls	r2, r3, #8
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	619a      	str	r2, [r3, #24]
      break;
 8006558:	e084      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fb8b 	bl	8006c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0208 	orr.w	r2, r2, #8
 8006574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69da      	ldr	r2, [r3, #28]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0204 	bic.w	r2, r2, #4
 8006584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69d9      	ldr	r1, [r3, #28]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	61da      	str	r2, [r3, #28]
      break;
 8006598:	e064      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fbfd 	bl	8006da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69d9      	ldr	r1, [r3, #28]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	021a      	lsls	r2, r3, #8
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	61da      	str	r2, [r3, #28]
      break;
 80065da:	e043      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fc70 	bl	8006ec8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0208 	orr.w	r2, r2, #8
 80065f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0204 	bic.w	r2, r2, #4
 8006606:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800661a:	e023      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68b9      	ldr	r1, [r7, #8]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fcba 	bl	8006f9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006636:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006646:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	021a      	lsls	r2, r3, #8
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800665c:	e002      	b.n	8006664 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
      break;
 8006662:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800666c:	7dfb      	ldrb	r3, [r7, #23]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop

08006678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_TIM_ConfigClockSource+0x1c>
 8006690:	2302      	movs	r3, #2
 8006692:	e0e6      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x1ea>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80066b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a67      	ldr	r2, [pc, #412]	; (800686c <HAL_TIM_ConfigClockSource+0x1f4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	f000 80b1 	beq.w	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 80066d4:	4a65      	ldr	r2, [pc, #404]	; (800686c <HAL_TIM_ConfigClockSource+0x1f4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	f200 80b6 	bhi.w	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 80066dc:	4a64      	ldr	r2, [pc, #400]	; (8006870 <HAL_TIM_ConfigClockSource+0x1f8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	f000 80a9 	beq.w	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 80066e4:	4a62      	ldr	r2, [pc, #392]	; (8006870 <HAL_TIM_ConfigClockSource+0x1f8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	f200 80ae 	bhi.w	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 80066ec:	4a61      	ldr	r2, [pc, #388]	; (8006874 <HAL_TIM_ConfigClockSource+0x1fc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	f000 80a1 	beq.w	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 80066f4:	4a5f      	ldr	r2, [pc, #380]	; (8006874 <HAL_TIM_ConfigClockSource+0x1fc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f200 80a6 	bhi.w	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 80066fc:	4a5e      	ldr	r2, [pc, #376]	; (8006878 <HAL_TIM_ConfigClockSource+0x200>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	f000 8099 	beq.w	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 8006704:	4a5c      	ldr	r2, [pc, #368]	; (8006878 <HAL_TIM_ConfigClockSource+0x200>)
 8006706:	4293      	cmp	r3, r2
 8006708:	f200 809e 	bhi.w	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 800670c:	4a5b      	ldr	r2, [pc, #364]	; (800687c <HAL_TIM_ConfigClockSource+0x204>)
 800670e:	4293      	cmp	r3, r2
 8006710:	f000 8091 	beq.w	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 8006714:	4a59      	ldr	r2, [pc, #356]	; (800687c <HAL_TIM_ConfigClockSource+0x204>)
 8006716:	4293      	cmp	r3, r2
 8006718:	f200 8096 	bhi.w	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 800671c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006720:	f000 8089 	beq.w	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 8006724:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006728:	f200 808e 	bhi.w	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 800672c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006730:	d03e      	beq.n	80067b0 <HAL_TIM_ConfigClockSource+0x138>
 8006732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006736:	f200 8087 	bhi.w	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 800673a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673e:	f000 8086 	beq.w	800684e <HAL_TIM_ConfigClockSource+0x1d6>
 8006742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006746:	d87f      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 8006748:	2b70      	cmp	r3, #112	; 0x70
 800674a:	d01a      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x10a>
 800674c:	2b70      	cmp	r3, #112	; 0x70
 800674e:	d87b      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 8006750:	2b60      	cmp	r3, #96	; 0x60
 8006752:	d050      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x17e>
 8006754:	2b60      	cmp	r3, #96	; 0x60
 8006756:	d877      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 8006758:	2b50      	cmp	r3, #80	; 0x50
 800675a:	d03c      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x15e>
 800675c:	2b50      	cmp	r3, #80	; 0x50
 800675e:	d873      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d058      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x19e>
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d86f      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 8006768:	2b30      	cmp	r3, #48	; 0x30
 800676a:	d064      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 800676c:	2b30      	cmp	r3, #48	; 0x30
 800676e:	d86b      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 8006770:	2b20      	cmp	r3, #32
 8006772:	d060      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 8006774:	2b20      	cmp	r3, #32
 8006776:	d867      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d05c      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 800677c:	2b10      	cmp	r3, #16
 800677e:	d05a      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x1be>
 8006780:	e062      	b.n	8006848 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6899      	ldr	r1, [r3, #8]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f000 fceb 	bl	800716c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	609a      	str	r2, [r3, #8]
      break;
 80067ae:	e04f      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	6899      	ldr	r1, [r3, #8]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f000 fcd4 	bl	800716c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067d2:	609a      	str	r2, [r3, #8]
      break;
 80067d4:	e03c      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f000 fc46 	bl	8007074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2150      	movs	r1, #80	; 0x50
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fc9f 	bl	8007132 <TIM_ITRx_SetConfig>
      break;
 80067f4:	e02c      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6859      	ldr	r1, [r3, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	461a      	mov	r2, r3
 8006804:	f000 fc65 	bl	80070d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2160      	movs	r1, #96	; 0x60
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fc8f 	bl	8007132 <TIM_ITRx_SetConfig>
      break;
 8006814:	e01c      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6859      	ldr	r1, [r3, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	461a      	mov	r2, r3
 8006824:	f000 fc26 	bl	8007074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2140      	movs	r1, #64	; 0x40
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fc7f 	bl	8007132 <TIM_ITRx_SetConfig>
      break;
 8006834:	e00c      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f000 fc76 	bl	8007132 <TIM_ITRx_SetConfig>
      break;
 8006846:	e003      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
      break;
 800684c:	e000      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800684e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	00100070 	.word	0x00100070
 8006870:	00100050 	.word	0x00100050
 8006874:	00100040 	.word	0x00100040
 8006878:	00100030 	.word	0x00100030
 800687c:	00100020 	.word	0x00100020

08006880 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a42      	ldr	r2, [pc, #264]	; (8006a00 <TIM_Base_SetConfig+0x11c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d013      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006902:	d00f      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3f      	ldr	r2, [pc, #252]	; (8006a04 <TIM_Base_SetConfig+0x120>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00b      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a3e      	ldr	r2, [pc, #248]	; (8006a08 <TIM_Base_SetConfig+0x124>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d007      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a3d      	ldr	r2, [pc, #244]	; (8006a0c <TIM_Base_SetConfig+0x128>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3c      	ldr	r2, [pc, #240]	; (8006a10 <TIM_Base_SetConfig+0x12c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d108      	bne.n	8006936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a31      	ldr	r2, [pc, #196]	; (8006a00 <TIM_Base_SetConfig+0x11c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01f      	beq.n	800697e <TIM_Base_SetConfig+0x9a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006944:	d01b      	beq.n	800697e <TIM_Base_SetConfig+0x9a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2e      	ldr	r2, [pc, #184]	; (8006a04 <TIM_Base_SetConfig+0x120>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d017      	beq.n	800697e <TIM_Base_SetConfig+0x9a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2d      	ldr	r2, [pc, #180]	; (8006a08 <TIM_Base_SetConfig+0x124>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <TIM_Base_SetConfig+0x9a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2c      	ldr	r2, [pc, #176]	; (8006a0c <TIM_Base_SetConfig+0x128>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00f      	beq.n	800697e <TIM_Base_SetConfig+0x9a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2c      	ldr	r2, [pc, #176]	; (8006a14 <TIM_Base_SetConfig+0x130>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00b      	beq.n	800697e <TIM_Base_SetConfig+0x9a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2b      	ldr	r2, [pc, #172]	; (8006a18 <TIM_Base_SetConfig+0x134>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d007      	beq.n	800697e <TIM_Base_SetConfig+0x9a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <TIM_Base_SetConfig+0x138>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d003      	beq.n	800697e <TIM_Base_SetConfig+0x9a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a25      	ldr	r2, [pc, #148]	; (8006a10 <TIM_Base_SetConfig+0x12c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d108      	bne.n	8006990 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a12      	ldr	r2, [pc, #72]	; (8006a00 <TIM_Base_SetConfig+0x11c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d013      	beq.n	80069e4 <TIM_Base_SetConfig+0x100>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <TIM_Base_SetConfig+0x128>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00f      	beq.n	80069e4 <TIM_Base_SetConfig+0x100>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <TIM_Base_SetConfig+0x130>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00b      	beq.n	80069e4 <TIM_Base_SetConfig+0x100>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a12      	ldr	r2, [pc, #72]	; (8006a18 <TIM_Base_SetConfig+0x134>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d007      	beq.n	80069e4 <TIM_Base_SetConfig+0x100>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a11      	ldr	r2, [pc, #68]	; (8006a1c <TIM_Base_SetConfig+0x138>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_Base_SetConfig+0x100>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a0c      	ldr	r2, [pc, #48]	; (8006a10 <TIM_Base_SetConfig+0x12c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d103      	bne.n	80069ec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	615a      	str	r2, [r3, #20]
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40013400 	.word	0x40013400
 8006a10:	40015000 	.word	0x40015000
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800

08006a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0303 	bic.w	r3, r3, #3
 8006a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f023 0302 	bic.w	r3, r3, #2
 8006a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a30      	ldr	r2, [pc, #192]	; (8006b3c <TIM_OC1_SetConfig+0x11c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <TIM_OC1_SetConfig+0x88>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a2f      	ldr	r2, [pc, #188]	; (8006b40 <TIM_OC1_SetConfig+0x120>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00f      	beq.n	8006aa8 <TIM_OC1_SetConfig+0x88>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a2e      	ldr	r2, [pc, #184]	; (8006b44 <TIM_OC1_SetConfig+0x124>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00b      	beq.n	8006aa8 <TIM_OC1_SetConfig+0x88>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a2d      	ldr	r2, [pc, #180]	; (8006b48 <TIM_OC1_SetConfig+0x128>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d007      	beq.n	8006aa8 <TIM_OC1_SetConfig+0x88>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a2c      	ldr	r2, [pc, #176]	; (8006b4c <TIM_OC1_SetConfig+0x12c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_OC1_SetConfig+0x88>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a2b      	ldr	r2, [pc, #172]	; (8006b50 <TIM_OC1_SetConfig+0x130>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d10c      	bne.n	8006ac2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f023 0308 	bic.w	r3, r3, #8
 8006aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f023 0304 	bic.w	r3, r3, #4
 8006ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a1d      	ldr	r2, [pc, #116]	; (8006b3c <TIM_OC1_SetConfig+0x11c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d013      	beq.n	8006af2 <TIM_OC1_SetConfig+0xd2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1c      	ldr	r2, [pc, #112]	; (8006b40 <TIM_OC1_SetConfig+0x120>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00f      	beq.n	8006af2 <TIM_OC1_SetConfig+0xd2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1b      	ldr	r2, [pc, #108]	; (8006b44 <TIM_OC1_SetConfig+0x124>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <TIM_OC1_SetConfig+0xd2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <TIM_OC1_SetConfig+0x128>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <TIM_OC1_SetConfig+0xd2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <TIM_OC1_SetConfig+0x12c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_OC1_SetConfig+0xd2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <TIM_OC1_SetConfig+0x130>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d111      	bne.n	8006b16 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40013400 	.word	0x40013400
 8006b44:	40014000 	.word	0x40014000
 8006b48:	40014400 	.word	0x40014400
 8006b4c:	40014800 	.word	0x40014800
 8006b50:	40015000 	.word	0x40015000

08006b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f023 0210 	bic.w	r2, r3, #16
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f023 0320 	bic.w	r3, r3, #32
 8006ba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a2c      	ldr	r2, [pc, #176]	; (8006c64 <TIM_OC2_SetConfig+0x110>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d007      	beq.n	8006bc8 <TIM_OC2_SetConfig+0x74>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a2b      	ldr	r2, [pc, #172]	; (8006c68 <TIM_OC2_SetConfig+0x114>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_OC2_SetConfig+0x74>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a2a      	ldr	r2, [pc, #168]	; (8006c6c <TIM_OC2_SetConfig+0x118>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d10d      	bne.n	8006be4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <TIM_OC2_SetConfig+0x110>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d013      	beq.n	8006c14 <TIM_OC2_SetConfig+0xc0>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <TIM_OC2_SetConfig+0x114>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00f      	beq.n	8006c14 <TIM_OC2_SetConfig+0xc0>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <TIM_OC2_SetConfig+0x11c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00b      	beq.n	8006c14 <TIM_OC2_SetConfig+0xc0>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a1d      	ldr	r2, [pc, #116]	; (8006c74 <TIM_OC2_SetConfig+0x120>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d007      	beq.n	8006c14 <TIM_OC2_SetConfig+0xc0>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a1c      	ldr	r2, [pc, #112]	; (8006c78 <TIM_OC2_SetConfig+0x124>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d003      	beq.n	8006c14 <TIM_OC2_SetConfig+0xc0>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <TIM_OC2_SetConfig+0x118>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d113      	bne.n	8006c3c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	621a      	str	r2, [r3, #32]
}
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40012c00 	.word	0x40012c00
 8006c68:	40013400 	.word	0x40013400
 8006c6c:	40015000 	.word	0x40015000
 8006c70:	40014000 	.word	0x40014000
 8006c74:	40014400 	.word	0x40014400
 8006c78:	40014800 	.word	0x40014800

08006c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a2b      	ldr	r2, [pc, #172]	; (8006d88 <TIM_OC3_SetConfig+0x10c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d007      	beq.n	8006cee <TIM_OC3_SetConfig+0x72>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <TIM_OC3_SetConfig+0x110>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d003      	beq.n	8006cee <TIM_OC3_SetConfig+0x72>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <TIM_OC3_SetConfig+0x114>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d10d      	bne.n	8006d0a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <TIM_OC3_SetConfig+0x10c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <TIM_OC3_SetConfig+0xbe>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <TIM_OC3_SetConfig+0x110>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00f      	beq.n	8006d3a <TIM_OC3_SetConfig+0xbe>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <TIM_OC3_SetConfig+0x118>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_OC3_SetConfig+0xbe>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a1c      	ldr	r2, [pc, #112]	; (8006d98 <TIM_OC3_SetConfig+0x11c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <TIM_OC3_SetConfig+0xbe>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <TIM_OC3_SetConfig+0x120>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_OC3_SetConfig+0xbe>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <TIM_OC3_SetConfig+0x114>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d113      	bne.n	8006d62 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	621a      	str	r2, [r3, #32]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	40013400 	.word	0x40013400
 8006d90:	40015000 	.word	0x40015000
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400
 8006d9c:	40014800 	.word	0x40014800

08006da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	031b      	lsls	r3, r3, #12
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a2c      	ldr	r2, [pc, #176]	; (8006eb0 <TIM_OC4_SetConfig+0x110>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d007      	beq.n	8006e14 <TIM_OC4_SetConfig+0x74>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a2b      	ldr	r2, [pc, #172]	; (8006eb4 <TIM_OC4_SetConfig+0x114>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d003      	beq.n	8006e14 <TIM_OC4_SetConfig+0x74>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <TIM_OC4_SetConfig+0x118>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d10d      	bne.n	8006e30 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	031b      	lsls	r3, r3, #12
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <TIM_OC4_SetConfig+0x110>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <TIM_OC4_SetConfig+0xc0>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a1e      	ldr	r2, [pc, #120]	; (8006eb4 <TIM_OC4_SetConfig+0x114>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00f      	beq.n	8006e60 <TIM_OC4_SetConfig+0xc0>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a1e      	ldr	r2, [pc, #120]	; (8006ebc <TIM_OC4_SetConfig+0x11c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00b      	beq.n	8006e60 <TIM_OC4_SetConfig+0xc0>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a1d      	ldr	r2, [pc, #116]	; (8006ec0 <TIM_OC4_SetConfig+0x120>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d007      	beq.n	8006e60 <TIM_OC4_SetConfig+0xc0>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a1c      	ldr	r2, [pc, #112]	; (8006ec4 <TIM_OC4_SetConfig+0x124>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC4_SetConfig+0xc0>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <TIM_OC4_SetConfig+0x118>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d113      	bne.n	8006e88 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	019b      	lsls	r3, r3, #6
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	019b      	lsls	r3, r3, #6
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40012c00 	.word	0x40012c00
 8006eb4:	40013400 	.word	0x40013400
 8006eb8:	40015000 	.word	0x40015000
 8006ebc:	40014000 	.word	0x40014000
 8006ec0:	40014400 	.word	0x40014400
 8006ec4:	40014800 	.word	0x40014800

08006ec8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	041b      	lsls	r3, r3, #16
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a19      	ldr	r2, [pc, #100]	; (8006f84 <TIM_OC5_SetConfig+0xbc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <TIM_OC5_SetConfig+0x82>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a18      	ldr	r2, [pc, #96]	; (8006f88 <TIM_OC5_SetConfig+0xc0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00f      	beq.n	8006f4a <TIM_OC5_SetConfig+0x82>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a17      	ldr	r2, [pc, #92]	; (8006f8c <TIM_OC5_SetConfig+0xc4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00b      	beq.n	8006f4a <TIM_OC5_SetConfig+0x82>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a16      	ldr	r2, [pc, #88]	; (8006f90 <TIM_OC5_SetConfig+0xc8>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d007      	beq.n	8006f4a <TIM_OC5_SetConfig+0x82>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <TIM_OC5_SetConfig+0xcc>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d003      	beq.n	8006f4a <TIM_OC5_SetConfig+0x82>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a14      	ldr	r2, [pc, #80]	; (8006f98 <TIM_OC5_SetConfig+0xd0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d109      	bne.n	8006f5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	621a      	str	r2, [r3, #32]
}
 8006f78:	bf00      	nop
 8006f7a:	371c      	adds	r7, #28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	40012c00 	.word	0x40012c00
 8006f88:	40013400 	.word	0x40013400
 8006f8c:	40014000 	.word	0x40014000
 8006f90:	40014400 	.word	0x40014400
 8006f94:	40014800 	.word	0x40014800
 8006f98:	40015000 	.word	0x40015000

08006f9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	021b      	lsls	r3, r3, #8
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	051b      	lsls	r3, r3, #20
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a1a      	ldr	r2, [pc, #104]	; (800705c <TIM_OC6_SetConfig+0xc0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d013      	beq.n	8007020 <TIM_OC6_SetConfig+0x84>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a19      	ldr	r2, [pc, #100]	; (8007060 <TIM_OC6_SetConfig+0xc4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00f      	beq.n	8007020 <TIM_OC6_SetConfig+0x84>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a18      	ldr	r2, [pc, #96]	; (8007064 <TIM_OC6_SetConfig+0xc8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00b      	beq.n	8007020 <TIM_OC6_SetConfig+0x84>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a17      	ldr	r2, [pc, #92]	; (8007068 <TIM_OC6_SetConfig+0xcc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_OC6_SetConfig+0x84>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a16      	ldr	r2, [pc, #88]	; (800706c <TIM_OC6_SetConfig+0xd0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_OC6_SetConfig+0x84>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a15      	ldr	r2, [pc, #84]	; (8007070 <TIM_OC6_SetConfig+0xd4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d109      	bne.n	8007034 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	029b      	lsls	r3, r3, #10
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40012c00 	.word	0x40012c00
 8007060:	40013400 	.word	0x40013400
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800
 8007070:	40015000 	.word	0x40015000

08007074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f023 0201 	bic.w	r2, r3, #1
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800709e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f023 030a 	bic.w	r3, r3, #10
 80070b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	621a      	str	r2, [r3, #32]
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b087      	sub	sp, #28
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f023 0210 	bic.w	r2, r3, #16
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	031b      	lsls	r3, r3, #12
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800710e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	621a      	str	r2, [r3, #32]
}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	f043 0307 	orr.w	r3, r3, #7
 8007158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	609a      	str	r2, [r3, #8]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	021a      	lsls	r2, r3, #8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	431a      	orrs	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	609a      	str	r2, [r3, #8]
}
 80071a0:	bf00      	nop
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e06f      	b.n	80072a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a31      	ldr	r2, [pc, #196]	; (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a30      	ldr	r2, [pc, #192]	; (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2e      	ldr	r2, [pc, #184]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d108      	bne.n	8007214 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007208:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800721a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	4313      	orrs	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1e      	ldr	r2, [pc, #120]	; (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d01d      	beq.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007244:	d018      	beq.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1c      	ldr	r2, [pc, #112]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1a      	ldr	r2, [pc, #104]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a15      	ldr	r2, [pc, #84]	; (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a11      	ldr	r2, [pc, #68]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d10c      	bne.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	4313      	orrs	r3, r2
 8007288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	40012c00 	.word	0x40012c00
 80072b4:	40013400 	.word	0x40013400
 80072b8:	40015000 	.word	0x40015000
 80072bc:	40000400 	.word	0x40000400
 80072c0:	40000800 	.word	0x40000800
 80072c4:	40014000 	.word	0x40014000

080072c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e042      	b.n	80073ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7fb fae3 	bl	8002944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2224      	movs	r2, #36	; 0x24
 8007382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fc62 	bl	8007c60 <UART_SetConfig>
 800739c:	4603      	mov	r3, r0
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e022      	b.n	80073ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 ff52 	bl	8008258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 ffd9 	bl	800839c <UART_CheckIdleState>
 80073ea:	4603      	mov	r3, r0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b091      	sub	sp, #68	; 0x44
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007408:	2b20      	cmp	r3, #32
 800740a:	f040 808c 	bne.w	8007526 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <HAL_UART_Transmit_IT+0x26>
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e084      	b.n	8007528 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_UART_Transmit_IT+0x38>
 8007428:	2302      	movs	r3, #2
 800742a:	e07d      	b.n	8007528 <HAL_UART_Transmit_IT+0x134>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	88fa      	ldrh	r2, [r7, #6]
 800743e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	88fa      	ldrh	r2, [r7, #6]
 8007446:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2221      	movs	r2, #33	; 0x21
 800745c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007468:	d12e      	bne.n	80074c8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007472:	d107      	bne.n	8007484 <HAL_UART_Transmit_IT+0x90>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4a2d      	ldr	r2, [pc, #180]	; (8007534 <HAL_UART_Transmit_IT+0x140>)
 8007480:	675a      	str	r2, [r3, #116]	; 0x74
 8007482:	e002      	b.n	800748a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4a2c      	ldr	r2, [pc, #176]	; (8007538 <HAL_UART_Transmit_IT+0x144>)
 8007488:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3308      	adds	r3, #8
 8007498:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3308      	adds	r3, #8
 80074b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074b2:	637a      	str	r2, [r7, #52]	; 0x34
 80074b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e5      	bne.n	8007492 <HAL_UART_Transmit_IT+0x9e>
 80074c6:	e02c      	b.n	8007522 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d0:	d107      	bne.n	80074e2 <HAL_UART_Transmit_IT+0xee>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d103      	bne.n	80074e2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4a17      	ldr	r2, [pc, #92]	; (800753c <HAL_UART_Transmit_IT+0x148>)
 80074de:	675a      	str	r2, [r3, #116]	; 0x74
 80074e0:	e002      	b.n	80074e8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4a16      	ldr	r2, [pc, #88]	; (8007540 <HAL_UART_Transmit_IT+0x14c>)
 80074e6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	613b      	str	r3, [r7, #16]
   return(result);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750e:	623b      	str	r3, [r7, #32]
 8007510:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	69f9      	ldr	r1, [r7, #28]
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	61bb      	str	r3, [r7, #24]
   return(result);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e6      	bne.n	80074f0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e000      	b.n	8007528 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007526:	2302      	movs	r3, #2
  }
}
 8007528:	4618      	mov	r0, r3
 800752a:	3744      	adds	r7, #68	; 0x44
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	08008b6b 	.word	0x08008b6b
 8007538:	08008a8b 	.word	0x08008a8b
 800753c:	080089c9 	.word	0x080089c9
 8007540:	08008911 	.word	0x08008911

08007544 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	; 0x28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007558:	2b20      	cmp	r3, #32
 800755a:	d142      	bne.n	80075e2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <HAL_UART_Receive_IT+0x24>
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e03b      	b.n	80075e4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_UART_Receive_IT+0x36>
 8007576:	2302      	movs	r3, #2
 8007578:	e034      	b.n	80075e4 <HAL_UART_Receive_IT+0xa0>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a17      	ldr	r2, [pc, #92]	; (80075ec <HAL_UART_Receive_IT+0xa8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01f      	beq.n	80075d2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d018      	beq.n	80075d2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	613b      	str	r3, [r7, #16]
   return(result);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	6a3a      	ldr	r2, [r7, #32]
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e6      	bne.n	80075a0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	461a      	mov	r2, r3
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 fff3 	bl	80085c4 <UART_Start_Receive_IT>
 80075de:	4603      	mov	r3, r0
 80075e0:	e000      	b.n	80075e4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80075e2:	2302      	movs	r3, #2
  }
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3728      	adds	r7, #40	; 0x28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40008000 	.word	0x40008000

080075f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b0ba      	sub	sp, #232	; 0xe8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800761a:	f640 030f 	movw	r3, #2063	; 0x80f
 800761e:	4013      	ands	r3, r2
 8007620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11b      	bne.n	8007664 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b00      	cmp	r3, #0
 8007636:	d015      	beq.n	8007664 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 82d6 	beq.w	8007c06 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
      }
      return;
 8007662:	e2d0      	b.n	8007c06 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 811f 	beq.w	80078ac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800766e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007672:	4b8b      	ldr	r3, [pc, #556]	; (80078a0 <HAL_UART_IRQHandler+0x2b0>)
 8007674:	4013      	ands	r3, r2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800767a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800767e:	4b89      	ldr	r3, [pc, #548]	; (80078a4 <HAL_UART_IRQHandler+0x2b4>)
 8007680:	4013      	ands	r3, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 8112 	beq.w	80078ac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d011      	beq.n	80076b8 <HAL_UART_IRQHandler+0xc8>
 8007694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2201      	movs	r2, #1
 80076a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ae:	f043 0201 	orr.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d011      	beq.n	80076e8 <HAL_UART_IRQHandler+0xf8>
 80076c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2202      	movs	r2, #2
 80076d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076de:	f043 0204 	orr.w	r2, r3, #4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d011      	beq.n	8007718 <HAL_UART_IRQHandler+0x128>
 80076f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2204      	movs	r2, #4
 8007706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770e:	f043 0202 	orr.w	r2, r3, #2
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d017      	beq.n	8007754 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d105      	bne.n	800773c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007730:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007734:	4b5a      	ldr	r3, [pc, #360]	; (80078a0 <HAL_UART_IRQHandler+0x2b0>)
 8007736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2208      	movs	r2, #8
 8007742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800774a:	f043 0208 	orr.w	r2, r3, #8
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800775c:	2b00      	cmp	r3, #0
 800775e:	d012      	beq.n	8007786 <HAL_UART_IRQHandler+0x196>
 8007760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00c      	beq.n	8007786 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800777c:	f043 0220 	orr.w	r2, r3, #32
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 823c 	beq.w	8007c0a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b00      	cmp	r3, #0
 800779c:	d013      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800779e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d105      	bne.n	80077b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d007      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b40      	cmp	r3, #64	; 0x40
 80077dc:	d005      	beq.n	80077ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d04f      	beq.n	800788a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 f814 	bl	8008818 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d141      	bne.n	8007882 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800781c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3308      	adds	r3, #8
 8007826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800782a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800782e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1d9      	bne.n	80077fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d013      	beq.n	800787a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007856:	4a14      	ldr	r2, [pc, #80]	; (80078a8 <HAL_UART_IRQHandler+0x2b8>)
 8007858:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800785e:	4618      	mov	r0, r3
 8007860:	f7fc fd05 	bl	800426e <HAL_DMA_Abort_IT>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d017      	beq.n	800789a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007874:	4610      	mov	r0, r2
 8007876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007878:	e00f      	b.n	800789a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f9da 	bl	8007c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007880:	e00b      	b.n	800789a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f9d6 	bl	8007c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007888:	e007      	b.n	800789a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9d2 	bl	8007c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007898:	e1b7      	b.n	8007c0a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800789a:	bf00      	nop
    return;
 800789c:	e1b5      	b.n	8007c0a <HAL_UART_IRQHandler+0x61a>
 800789e:	bf00      	nop
 80078a0:	10000001 	.word	0x10000001
 80078a4:	04000120 	.word	0x04000120
 80078a8:	080088e5 	.word	0x080088e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	f040 814a 	bne.w	8007b4a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 8143 	beq.w	8007b4a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 813c 	beq.w	8007b4a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2210      	movs	r2, #16
 80078d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	f040 80b5 	bne.w	8007a54 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8187 	beq.w	8007c0e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800790a:	429a      	cmp	r2, r3
 800790c:	f080 817f 	bcs.w	8007c0e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007916:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0320 	and.w	r3, r3, #32
 8007926:	2b00      	cmp	r3, #0
 8007928:	f040 8086 	bne.w	8007a38 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	461a      	mov	r2, r3
 8007952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800795a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800796e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1da      	bne.n	800792c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007988:	f023 0301 	bic.w	r3, r3, #1
 800798c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800799a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800799e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e1      	bne.n	8007976 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3308      	adds	r3, #8
 80079b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e3      	bne.n	80079b2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a08:	f023 0310 	bic.w	r3, r3, #16
 8007a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e4      	bne.n	80079f8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fc fbc2 	bl	80041bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f8fb 	bl	8007c48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a52:	e0dc      	b.n	8007c0e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 80ce 	beq.w	8007c12 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80c9 	beq.w	8007c12 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e4      	bne.n	8007a80 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ade:	633a      	str	r2, [r7, #48]	; 0x30
 8007ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e1      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0310 	bic.w	r3, r3, #16
 8007b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b28:	61fb      	str	r3, [r7, #28]
 8007b2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	69b9      	ldr	r1, [r7, #24]
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	617b      	str	r3, [r7, #20]
   return(result);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e4      	bne.n	8007b06 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f880 	bl	8007c48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b48:	e063      	b.n	8007c12 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00e      	beq.n	8007b74 <HAL_UART_IRQHandler+0x584>
 8007b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d008      	beq.n	8007b74 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 fcf9 	bl	8009564 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b72:	e051      	b.n	8007c18 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d014      	beq.n	8007baa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d105      	bne.n	8007b98 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d008      	beq.n	8007baa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d03a      	beq.n	8007c16 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
    }
    return;
 8007ba8:	e035      	b.n	8007c16 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <HAL_UART_IRQHandler+0x5da>
 8007bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 f846 	bl	8008c54 <UART_EndTransmit_IT>
    return;
 8007bc8:	e026      	b.n	8007c18 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d009      	beq.n	8007bea <HAL_UART_IRQHandler+0x5fa>
 8007bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 fcd2 	bl	800958c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007be8:	e016      	b.n	8007c18 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d010      	beq.n	8007c18 <HAL_UART_IRQHandler+0x628>
 8007bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da0c      	bge.n	8007c18 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fcba 	bl	8009578 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c04:	e008      	b.n	8007c18 <HAL_UART_IRQHandler+0x628>
      return;
 8007c06:	bf00      	nop
 8007c08:	e006      	b.n	8007c18 <HAL_UART_IRQHandler+0x628>
    return;
 8007c0a:	bf00      	nop
 8007c0c:	e004      	b.n	8007c18 <HAL_UART_IRQHandler+0x628>
      return;
 8007c0e:	bf00      	nop
 8007c10:	e002      	b.n	8007c18 <HAL_UART_IRQHandler+0x628>
      return;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <HAL_UART_IRQHandler+0x628>
    return;
 8007c16:	bf00      	nop
  }
}
 8007c18:	37e8      	adds	r7, #232	; 0xe8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop

08007c20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c64:	b08c      	sub	sp, #48	; 0x30
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	4baa      	ldr	r3, [pc, #680]	; (8007f38 <UART_SetConfig+0x2d8>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a9f      	ldr	r2, [pc, #636]	; (8007f3c <UART_SetConfig+0x2dc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007cd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	6812      	ldr	r2, [r2, #0]
 8007cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce0:	430b      	orrs	r3, r1
 8007ce2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	f023 010f 	bic.w	r1, r3, #15
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a90      	ldr	r2, [pc, #576]	; (8007f40 <UART_SetConfig+0x2e0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d125      	bne.n	8007d50 <UART_SetConfig+0xf0>
 8007d04:	4b8f      	ldr	r3, [pc, #572]	; (8007f44 <UART_SetConfig+0x2e4>)
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d81a      	bhi.n	8007d48 <UART_SetConfig+0xe8>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <UART_SetConfig+0xb8>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d29 	.word	0x08007d29
 8007d1c:	08007d39 	.word	0x08007d39
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d41 	.word	0x08007d41
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d2e:	e116      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007d30:	2302      	movs	r3, #2
 8007d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d36:	e112      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d3e:	e10e      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d46:	e10a      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4e:	e106      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a7c      	ldr	r2, [pc, #496]	; (8007f48 <UART_SetConfig+0x2e8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d138      	bne.n	8007dcc <UART_SetConfig+0x16c>
 8007d5a:	4b7a      	ldr	r3, [pc, #488]	; (8007f44 <UART_SetConfig+0x2e4>)
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d60:	f003 030c 	and.w	r3, r3, #12
 8007d64:	2b0c      	cmp	r3, #12
 8007d66:	d82d      	bhi.n	8007dc4 <UART_SetConfig+0x164>
 8007d68:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <UART_SetConfig+0x110>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007da5 	.word	0x08007da5
 8007d74:	08007dc5 	.word	0x08007dc5
 8007d78:	08007dc5 	.word	0x08007dc5
 8007d7c:	08007dc5 	.word	0x08007dc5
 8007d80:	08007db5 	.word	0x08007db5
 8007d84:	08007dc5 	.word	0x08007dc5
 8007d88:	08007dc5 	.word	0x08007dc5
 8007d8c:	08007dc5 	.word	0x08007dc5
 8007d90:	08007dad 	.word	0x08007dad
 8007d94:	08007dc5 	.word	0x08007dc5
 8007d98:	08007dc5 	.word	0x08007dc5
 8007d9c:	08007dc5 	.word	0x08007dc5
 8007da0:	08007dbd 	.word	0x08007dbd
 8007da4:	2300      	movs	r3, #0
 8007da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007daa:	e0d8      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007dac:	2302      	movs	r3, #2
 8007dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007db2:	e0d4      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007db4:	2304      	movs	r3, #4
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dba:	e0d0      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc2:	e0cc      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007dc4:	2310      	movs	r3, #16
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dca:	e0c8      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a5e      	ldr	r2, [pc, #376]	; (8007f4c <UART_SetConfig+0x2ec>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d125      	bne.n	8007e22 <UART_SetConfig+0x1c2>
 8007dd6:	4b5b      	ldr	r3, [pc, #364]	; (8007f44 <UART_SetConfig+0x2e4>)
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ddc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007de0:	2b30      	cmp	r3, #48	; 0x30
 8007de2:	d016      	beq.n	8007e12 <UART_SetConfig+0x1b2>
 8007de4:	2b30      	cmp	r3, #48	; 0x30
 8007de6:	d818      	bhi.n	8007e1a <UART_SetConfig+0x1ba>
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	d00a      	beq.n	8007e02 <UART_SetConfig+0x1a2>
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d814      	bhi.n	8007e1a <UART_SetConfig+0x1ba>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <UART_SetConfig+0x19a>
 8007df4:	2b10      	cmp	r3, #16
 8007df6:	d008      	beq.n	8007e0a <UART_SetConfig+0x1aa>
 8007df8:	e00f      	b.n	8007e1a <UART_SetConfig+0x1ba>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e00:	e0ad      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e02:	2302      	movs	r3, #2
 8007e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e08:	e0a9      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e0a:	2304      	movs	r3, #4
 8007e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e10:	e0a5      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e12:	2308      	movs	r3, #8
 8007e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e18:	e0a1      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e1a:	2310      	movs	r3, #16
 8007e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e20:	e09d      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a4a      	ldr	r2, [pc, #296]	; (8007f50 <UART_SetConfig+0x2f0>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d125      	bne.n	8007e78 <UART_SetConfig+0x218>
 8007e2c:	4b45      	ldr	r3, [pc, #276]	; (8007f44 <UART_SetConfig+0x2e4>)
 8007e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e36:	2bc0      	cmp	r3, #192	; 0xc0
 8007e38:	d016      	beq.n	8007e68 <UART_SetConfig+0x208>
 8007e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e3c:	d818      	bhi.n	8007e70 <UART_SetConfig+0x210>
 8007e3e:	2b80      	cmp	r3, #128	; 0x80
 8007e40:	d00a      	beq.n	8007e58 <UART_SetConfig+0x1f8>
 8007e42:	2b80      	cmp	r3, #128	; 0x80
 8007e44:	d814      	bhi.n	8007e70 <UART_SetConfig+0x210>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <UART_SetConfig+0x1f0>
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d008      	beq.n	8007e60 <UART_SetConfig+0x200>
 8007e4e:	e00f      	b.n	8007e70 <UART_SetConfig+0x210>
 8007e50:	2300      	movs	r3, #0
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e56:	e082      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e5e:	e07e      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e60:	2304      	movs	r3, #4
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e66:	e07a      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e68:	2308      	movs	r3, #8
 8007e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e6e:	e076      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e70:	2310      	movs	r3, #16
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e76:	e072      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a35      	ldr	r2, [pc, #212]	; (8007f54 <UART_SetConfig+0x2f4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d12a      	bne.n	8007ed8 <UART_SetConfig+0x278>
 8007e82:	4b30      	ldr	r3, [pc, #192]	; (8007f44 <UART_SetConfig+0x2e4>)
 8007e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e90:	d01a      	beq.n	8007ec8 <UART_SetConfig+0x268>
 8007e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e96:	d81b      	bhi.n	8007ed0 <UART_SetConfig+0x270>
 8007e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e9c:	d00c      	beq.n	8007eb8 <UART_SetConfig+0x258>
 8007e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea2:	d815      	bhi.n	8007ed0 <UART_SetConfig+0x270>
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <UART_SetConfig+0x250>
 8007ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eac:	d008      	beq.n	8007ec0 <UART_SetConfig+0x260>
 8007eae:	e00f      	b.n	8007ed0 <UART_SetConfig+0x270>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb6:	e052      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ebe:	e04e      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ec6:	e04a      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007ec8:	2308      	movs	r3, #8
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ece:	e046      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ed6:	e042      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a17      	ldr	r2, [pc, #92]	; (8007f3c <UART_SetConfig+0x2dc>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d13a      	bne.n	8007f58 <UART_SetConfig+0x2f8>
 8007ee2:	4b18      	ldr	r3, [pc, #96]	; (8007f44 <UART_SetConfig+0x2e4>)
 8007ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ef0:	d01a      	beq.n	8007f28 <UART_SetConfig+0x2c8>
 8007ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ef6:	d81b      	bhi.n	8007f30 <UART_SetConfig+0x2d0>
 8007ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007efc:	d00c      	beq.n	8007f18 <UART_SetConfig+0x2b8>
 8007efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f02:	d815      	bhi.n	8007f30 <UART_SetConfig+0x2d0>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <UART_SetConfig+0x2b0>
 8007f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f0c:	d008      	beq.n	8007f20 <UART_SetConfig+0x2c0>
 8007f0e:	e00f      	b.n	8007f30 <UART_SetConfig+0x2d0>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f16:	e022      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f1e:	e01e      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007f20:	2304      	movs	r3, #4
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f26:	e01a      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007f28:	2308      	movs	r3, #8
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f2e:	e016      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007f30:	2310      	movs	r3, #16
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f36:	e012      	b.n	8007f5e <UART_SetConfig+0x2fe>
 8007f38:	cfff69f3 	.word	0xcfff69f3
 8007f3c:	40008000 	.word	0x40008000
 8007f40:	40013800 	.word	0x40013800
 8007f44:	40021000 	.word	0x40021000
 8007f48:	40004400 	.word	0x40004400
 8007f4c:	40004800 	.word	0x40004800
 8007f50:	40004c00 	.word	0x40004c00
 8007f54:	40005000 	.word	0x40005000
 8007f58:	2310      	movs	r3, #16
 8007f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4aae      	ldr	r2, [pc, #696]	; (800821c <UART_SetConfig+0x5bc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	f040 8097 	bne.w	8008098 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f6e:	2b08      	cmp	r3, #8
 8007f70:	d823      	bhi.n	8007fba <UART_SetConfig+0x35a>
 8007f72:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <UART_SetConfig+0x318>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007fbb 	.word	0x08007fbb
 8007f80:	08007fa5 	.word	0x08007fa5
 8007f84:	08007fbb 	.word	0x08007fbb
 8007f88:	08007fab 	.word	0x08007fab
 8007f8c:	08007fbb 	.word	0x08007fbb
 8007f90:	08007fbb 	.word	0x08007fbb
 8007f94:	08007fbb 	.word	0x08007fbb
 8007f98:	08007fb3 	.word	0x08007fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f9c:	f7fd fd72 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 8007fa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fa2:	e010      	b.n	8007fc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fa4:	4b9e      	ldr	r3, [pc, #632]	; (8008220 <UART_SetConfig+0x5c0>)
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fa8:	e00d      	b.n	8007fc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007faa:	f7fd fcfd 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8007fae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fb0:	e009      	b.n	8007fc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fb8:	e005      	b.n	8007fc6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8130 	beq.w	800822e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	4a94      	ldr	r2, [pc, #592]	; (8008224 <UART_SetConfig+0x5c4>)
 8007fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	4413      	add	r3, r2
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d305      	bcc.n	8007ffe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d903      	bls.n	8008006 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008004:	e113      	b.n	800822e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	2200      	movs	r2, #0
 800800a:	60bb      	str	r3, [r7, #8]
 800800c:	60fa      	str	r2, [r7, #12]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	4a84      	ldr	r2, [pc, #528]	; (8008224 <UART_SetConfig+0x5c4>)
 8008014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008018:	b29b      	uxth	r3, r3
 800801a:	2200      	movs	r2, #0
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008024:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008028:	f7f8 f8f6 	bl	8000218 <__aeabi_uldivmod>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4610      	mov	r0, r2
 8008032:	4619      	mov	r1, r3
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	020b      	lsls	r3, r1, #8
 800803e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008042:	0202      	lsls	r2, r0, #8
 8008044:	6979      	ldr	r1, [r7, #20]
 8008046:	6849      	ldr	r1, [r1, #4]
 8008048:	0849      	lsrs	r1, r1, #1
 800804a:	2000      	movs	r0, #0
 800804c:	460c      	mov	r4, r1
 800804e:	4605      	mov	r5, r0
 8008050:	eb12 0804 	adds.w	r8, r2, r4
 8008054:	eb43 0905 	adc.w	r9, r3, r5
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	469a      	mov	sl, r3
 8008060:	4693      	mov	fp, r2
 8008062:	4652      	mov	r2, sl
 8008064:	465b      	mov	r3, fp
 8008066:	4640      	mov	r0, r8
 8008068:	4649      	mov	r1, r9
 800806a:	f7f8 f8d5 	bl	8000218 <__aeabi_uldivmod>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	4613      	mov	r3, r2
 8008074:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800807c:	d308      	bcc.n	8008090 <UART_SetConfig+0x430>
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008084:	d204      	bcs.n	8008090 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6a3a      	ldr	r2, [r7, #32]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	e0ce      	b.n	800822e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008096:	e0ca      	b.n	800822e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a0:	d166      	bne.n	8008170 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80080a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080a6:	2b08      	cmp	r3, #8
 80080a8:	d827      	bhi.n	80080fa <UART_SetConfig+0x49a>
 80080aa:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <UART_SetConfig+0x450>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080d5 	.word	0x080080d5
 80080b4:	080080dd 	.word	0x080080dd
 80080b8:	080080e5 	.word	0x080080e5
 80080bc:	080080fb 	.word	0x080080fb
 80080c0:	080080eb 	.word	0x080080eb
 80080c4:	080080fb 	.word	0x080080fb
 80080c8:	080080fb 	.word	0x080080fb
 80080cc:	080080fb 	.word	0x080080fb
 80080d0:	080080f3 	.word	0x080080f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d4:	f7fd fcd6 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 80080d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080da:	e014      	b.n	8008106 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080dc:	f7fd fce8 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 80080e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080e2:	e010      	b.n	8008106 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080e4:	4b4e      	ldr	r3, [pc, #312]	; (8008220 <UART_SetConfig+0x5c0>)
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080e8:	e00d      	b.n	8008106 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ea:	f7fd fc5d 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 80080ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080f0:	e009      	b.n	8008106 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080f8:	e005      	b.n	8008106 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 8090 	beq.w	800822e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	4a44      	ldr	r2, [pc, #272]	; (8008224 <UART_SetConfig+0x5c4>)
 8008114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008118:	461a      	mov	r2, r3
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008120:	005a      	lsls	r2, r3, #1
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	085b      	lsrs	r3, r3, #1
 8008128:	441a      	add	r2, r3
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008132:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	2b0f      	cmp	r3, #15
 8008138:	d916      	bls.n	8008168 <UART_SetConfig+0x508>
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008140:	d212      	bcs.n	8008168 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	b29b      	uxth	r3, r3
 8008146:	f023 030f 	bic.w	r3, r3, #15
 800814a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	085b      	lsrs	r3, r3, #1
 8008150:	b29b      	uxth	r3, r3
 8008152:	f003 0307 	and.w	r3, r3, #7
 8008156:	b29a      	uxth	r2, r3
 8008158:	8bfb      	ldrh	r3, [r7, #30]
 800815a:	4313      	orrs	r3, r2
 800815c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	8bfa      	ldrh	r2, [r7, #30]
 8008164:	60da      	str	r2, [r3, #12]
 8008166:	e062      	b.n	800822e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800816e:	e05e      	b.n	800822e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008170:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008174:	2b08      	cmp	r3, #8
 8008176:	d828      	bhi.n	80081ca <UART_SetConfig+0x56a>
 8008178:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <UART_SetConfig+0x520>)
 800817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817e:	bf00      	nop
 8008180:	080081a5 	.word	0x080081a5
 8008184:	080081ad 	.word	0x080081ad
 8008188:	080081b5 	.word	0x080081b5
 800818c:	080081cb 	.word	0x080081cb
 8008190:	080081bb 	.word	0x080081bb
 8008194:	080081cb 	.word	0x080081cb
 8008198:	080081cb 	.word	0x080081cb
 800819c:	080081cb 	.word	0x080081cb
 80081a0:	080081c3 	.word	0x080081c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a4:	f7fd fc6e 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 80081a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081aa:	e014      	b.n	80081d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081ac:	f7fd fc80 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 80081b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081b2:	e010      	b.n	80081d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081b4:	4b1a      	ldr	r3, [pc, #104]	; (8008220 <UART_SetConfig+0x5c0>)
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081b8:	e00d      	b.n	80081d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ba:	f7fd fbf5 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 80081be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081c0:	e009      	b.n	80081d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081c8:	e005      	b.n	80081d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081d4:	bf00      	nop
    }

    if (pclk != 0U)
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d028      	beq.n	800822e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	4a10      	ldr	r2, [pc, #64]	; (8008224 <UART_SetConfig+0x5c4>)
 80081e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e6:	461a      	mov	r2, r3
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	085b      	lsrs	r3, r3, #1
 80081f4:	441a      	add	r2, r3
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	2b0f      	cmp	r3, #15
 8008204:	d910      	bls.n	8008228 <UART_SetConfig+0x5c8>
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800820c:	d20c      	bcs.n	8008228 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	b29a      	uxth	r2, r3
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60da      	str	r2, [r3, #12]
 8008218:	e009      	b.n	800822e <UART_SetConfig+0x5ce>
 800821a:	bf00      	nop
 800821c:	40008000 	.word	0x40008000
 8008220:	00f42400 	.word	0x00f42400
 8008224:	080099e4 	.word	0x080099e4
      }
      else
      {
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2201      	movs	r2, #1
 8008232:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2201      	movs	r2, #1
 800823a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2200      	movs	r2, #0
 8008242:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2200      	movs	r2, #0
 8008248:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800824a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800824e:	4618      	mov	r0, r3
 8008250:	3730      	adds	r7, #48	; 0x30
 8008252:	46bd      	mov	sp, r7
 8008254:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00a      	beq.n	8008282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	430a      	orrs	r2, r1
 80082e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00a      	beq.n	800830a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01a      	beq.n	800836e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008356:	d10a      	bne.n	800836e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	605a      	str	r2, [r3, #4]
  }
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083ac:	f7fa fc58 	bl	8002c60 <HAL_GetTick>
 80083b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d10e      	bne.n	80083de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f82f 	bl	8008432 <UART_WaitOnFlagUntilTimeout>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e025      	b.n	800842a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d10e      	bne.n	800840a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f819 	bl	8008432 <UART_WaitOnFlagUntilTimeout>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e00f      	b.n	800842a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b09c      	sub	sp, #112	; 0x70
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	603b      	str	r3, [r7, #0]
 800843e:	4613      	mov	r3, r2
 8008440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008442:	e0a9      	b.n	8008598 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800844a:	f000 80a5 	beq.w	8008598 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800844e:	f7fa fc07 	bl	8002c60 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800845a:	429a      	cmp	r2, r3
 800845c:	d302      	bcc.n	8008464 <UART_WaitOnFlagUntilTimeout+0x32>
 800845e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008460:	2b00      	cmp	r3, #0
 8008462:	d140      	bne.n	80084e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008478:	667b      	str	r3, [r7, #100]	; 0x64
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008484:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e6      	bne.n	8008464 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	663b      	str	r3, [r7, #96]	; 0x60
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80084b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e5      	bne.n	8008496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e069      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d051      	beq.n	8008598 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008502:	d149      	bne.n	8008598 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800850c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800852c:	637b      	str	r3, [r7, #52]	; 0x34
 800852e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e6      	bne.n	800850e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3308      	adds	r3, #8
 8008546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	613b      	str	r3, [r7, #16]
   return(result);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f023 0301 	bic.w	r3, r3, #1
 8008556:	66bb      	str	r3, [r7, #104]	; 0x68
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3308      	adds	r3, #8
 800855e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008560:	623a      	str	r2, [r7, #32]
 8008562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	69f9      	ldr	r1, [r7, #28]
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	e841 2300 	strex	r3, r2, [r1]
 800856c:	61bb      	str	r3, [r7, #24]
   return(result);
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e5      	bne.n	8008540 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2220      	movs	r2, #32
 8008578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2220      	movs	r2, #32
 8008588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e010      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69da      	ldr	r2, [r3, #28]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4013      	ands	r3, r2
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	bf0c      	ite	eq
 80085a8:	2301      	moveq	r3, #1
 80085aa:	2300      	movne	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	f43f af46 	beq.w	8008444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3770      	adds	r7, #112	; 0x70
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b0a3      	sub	sp, #140	; 0x8c
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	4613      	mov	r3, r2
 80085d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	88fa      	ldrh	r2, [r7, #6]
 80085dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	88fa      	ldrh	r2, [r7, #6]
 80085e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f6:	d10e      	bne.n	8008616 <UART_Start_Receive_IT+0x52>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d105      	bne.n	800860c <UART_Start_Receive_IT+0x48>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008606:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800860a:	e02d      	b.n	8008668 <UART_Start_Receive_IT+0xa4>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	22ff      	movs	r2, #255	; 0xff
 8008610:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008614:	e028      	b.n	8008668 <UART_Start_Receive_IT+0xa4>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10d      	bne.n	800863a <UART_Start_Receive_IT+0x76>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <UART_Start_Receive_IT+0x6c>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	22ff      	movs	r2, #255	; 0xff
 800862a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800862e:	e01b      	b.n	8008668 <UART_Start_Receive_IT+0xa4>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	227f      	movs	r2, #127	; 0x7f
 8008634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008638:	e016      	b.n	8008668 <UART_Start_Receive_IT+0xa4>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008642:	d10d      	bne.n	8008660 <UART_Start_Receive_IT+0x9c>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <UART_Start_Receive_IT+0x92>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	227f      	movs	r2, #127	; 0x7f
 8008650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008654:	e008      	b.n	8008668 <UART_Start_Receive_IT+0xa4>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	223f      	movs	r2, #63	; 0x3f
 800865a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800865e:	e003      	b.n	8008668 <UART_Start_Receive_IT+0xa4>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2222      	movs	r2, #34	; 0x22
 8008674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800869c:	673a      	str	r2, [r7, #112]	; 0x70
 800869e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80086a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80086a4:	e841 2300 	strex	r3, r2, [r1]
 80086a8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80086aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e3      	bne.n	8008678 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086b8:	d153      	bne.n	8008762 <UART_Start_Receive_IT+0x19e>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086c0:	88fa      	ldrh	r2, [r7, #6]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d34d      	bcc.n	8008762 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ce:	d107      	bne.n	80086e0 <UART_Start_Receive_IT+0x11c>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4a4b      	ldr	r2, [pc, #300]	; (8008808 <UART_Start_Receive_IT+0x244>)
 80086dc:	671a      	str	r2, [r3, #112]	; 0x70
 80086de:	e002      	b.n	80086e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4a4a      	ldr	r2, [pc, #296]	; (800880c <UART_Start_Receive_IT+0x248>)
 80086e4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d01a      	beq.n	800872c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086fe:	e853 3f00 	ldrex	r3, [r3]
 8008702:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800870a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800871a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800871e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e4      	bne.n	80086f6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3308      	adds	r3, #8
 8008732:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008742:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3308      	adds	r3, #8
 800874a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800874c:	64ba      	str	r2, [r7, #72]	; 0x48
 800874e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800875a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e5      	bne.n	800872c <UART_Start_Receive_IT+0x168>
 8008760:	e04a      	b.n	80087f8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876a:	d107      	bne.n	800877c <UART_Start_Receive_IT+0x1b8>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d103      	bne.n	800877c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4a26      	ldr	r2, [pc, #152]	; (8008810 <UART_Start_Receive_IT+0x24c>)
 8008778:	671a      	str	r2, [r3, #112]	; 0x70
 800877a:	e002      	b.n	8008782 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a25      	ldr	r2, [pc, #148]	; (8008814 <UART_Start_Receive_IT+0x250>)
 8008780:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d019      	beq.n	80087c6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	e853 3f00 	ldrex	r3, [r3]
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80087a6:	677b      	str	r3, [r7, #116]	; 0x74
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
 80087b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e6      	bne.n	8008792 <UART_Start_Receive_IT+0x1ce>
 80087c4:	e018      	b.n	80087f8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	613b      	str	r3, [r7, #16]
   return(result);
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f043 0320 	orr.w	r3, r3, #32
 80087da:	67bb      	str	r3, [r7, #120]	; 0x78
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087e4:	623b      	str	r3, [r7, #32]
 80087e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e8:	69f9      	ldr	r1, [r7, #28]
 80087ea:	6a3a      	ldr	r2, [r7, #32]
 80087ec:	e841 2300 	strex	r3, r2, [r1]
 80087f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e6      	bne.n	80087c6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	378c      	adds	r7, #140	; 0x8c
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	08009265 	.word	0x08009265
 800880c:	08008f6d 	.word	0x08008f6d
 8008810:	08008e0b 	.word	0x08008e0b
 8008814:	08008cab 	.word	0x08008cab

08008818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008818:	b480      	push	{r7}
 800881a:	b095      	sub	sp, #84	; 0x54
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008834:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800883e:	643b      	str	r3, [r7, #64]	; 0x40
 8008840:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e6      	bne.n	8008820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3308      	adds	r3, #8
 8008858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	e853 3f00 	ldrex	r3, [r3]
 8008860:	61fb      	str	r3, [r7, #28]
   return(result);
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008868:	f023 0301 	bic.w	r3, r3, #1
 800886c:	64bb      	str	r3, [r7, #72]	; 0x48
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3308      	adds	r3, #8
 8008874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008878:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800887c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e3      	bne.n	8008852 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800888e:	2b01      	cmp	r3, #1
 8008890:	d118      	bne.n	80088c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	e853 3f00 	ldrex	r3, [r3]
 800889e:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f023 0310 	bic.w	r3, r3, #16
 80088a6:	647b      	str	r3, [r7, #68]	; 0x44
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b0:	61bb      	str	r3, [r7, #24]
 80088b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6979      	ldr	r1, [r7, #20]
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	613b      	str	r3, [r7, #16]
   return(result);
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e6      	bne.n	8008892 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80088d8:	bf00      	nop
 80088da:	3754      	adds	r7, #84	; 0x54
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff f996 	bl	8007c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b08f      	sub	sp, #60	; 0x3c
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891e:	2b21      	cmp	r3, #33	; 0x21
 8008920:	d14c      	bne.n	80089bc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008928:	b29b      	uxth	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d132      	bne.n	8008994 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	61fb      	str	r3, [r7, #28]
   return(result);
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008942:	637b      	str	r3, [r7, #52]	; 0x34
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800894e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e6      	bne.n	800892e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	60bb      	str	r3, [r7, #8]
   return(result);
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008974:	633b      	str	r3, [r7, #48]	; 0x30
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	61bb      	str	r3, [r7, #24]
 8008980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6979      	ldr	r1, [r7, #20]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	613b      	str	r3, [r7, #16]
   return(result);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e6      	bne.n	8008960 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008992:	e013      	b.n	80089bc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008998:	781a      	ldrb	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80089bc:	bf00      	nop
 80089be:	373c      	adds	r7, #60	; 0x3c
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b091      	sub	sp, #68	; 0x44
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d6:	2b21      	cmp	r3, #33	; 0x21
 80089d8:	d151      	bne.n	8008a7e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d132      	bne.n	8008a4c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	623b      	str	r3, [r7, #32]
   return(result);
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	633b      	str	r3, [r7, #48]	; 0x30
 8008a06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e6      	bne.n	80089e6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	69b9      	ldr	r1, [r7, #24]
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	617b      	str	r3, [r7, #20]
   return(result);
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e6      	bne.n	8008a18 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008a4a:	e018      	b.n	8008a7e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a50:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a60:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a66:	1c9a      	adds	r2, r3, #2
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008a7e:	bf00      	nop
 8008a80:	3744      	adds	r7, #68	; 0x44
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b091      	sub	sp, #68	; 0x44
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a98:	2b21      	cmp	r3, #33	; 0x21
 8008a9a:	d160      	bne.n	8008b5e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008aa2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008aa4:	e057      	b.n	8008b56 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d133      	bne.n	8008b1a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ad2:	633a      	str	r2, [r7, #48]	; 0x30
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e5      	bne.n	8008ab2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afa:	637b      	str	r3, [r7, #52]	; 0x34
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	461a      	mov	r2, r3
 8008b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b04:	61fb      	str	r3, [r7, #28]
 8008b06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b08:	69b9      	ldr	r1, [r7, #24]
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	e841 2300 	strex	r3, r2, [r1]
 8008b10:	617b      	str	r3, [r7, #20]
   return(result);
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1e6      	bne.n	8008ae6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008b18:	e021      	b.n	8008b5e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d013      	beq.n	8008b50 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2c:	781a      	ldrb	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008b50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008b52:	3b01      	subs	r3, #1
 8008b54:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008b56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1a4      	bne.n	8008aa6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008b5c:	e7ff      	b.n	8008b5e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008b5e:	bf00      	nop
 8008b60:	3744      	adds	r7, #68	; 0x44
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b091      	sub	sp, #68	; 0x44
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b78:	2b21      	cmp	r3, #33	; 0x21
 8008b7a:	d165      	bne.n	8008c48 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b82:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008b84:	e05c      	b.n	8008c40 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d133      	bne.n	8008bfa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3308      	adds	r3, #8
 8008bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e5      	bne.n	8008b92 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bda:	633b      	str	r3, [r7, #48]	; 0x30
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	461a      	mov	r2, r3
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	61bb      	str	r3, [r7, #24]
 8008be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6979      	ldr	r1, [r7, #20]
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e6      	bne.n	8008bc6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008bf8:	e026      	b.n	8008c48 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d018      	beq.n	8008c3a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c0c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c1c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c22:	1c9a      	adds	r2, r3, #2
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008c3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d19f      	bne.n	8008b86 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008c46:	e7ff      	b.n	8008c48 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008c48:	bf00      	nop
 8008c4a:	3744      	adds	r7, #68	; 0x44
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c70:	61fb      	str	r3, [r7, #28]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	6979      	ldr	r1, [r7, #20]
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	613b      	str	r3, [r7, #16]
   return(result);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e6      	bne.n	8008c5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2220      	movs	r2, #32
 8008c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7fe ffbf 	bl	8007c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ca2:	bf00      	nop
 8008ca4:	3720      	adds	r7, #32
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b096      	sub	sp, #88	; 0x58
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cb8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc2:	2b22      	cmp	r3, #34	; 0x22
 8008cc4:	f040 8095 	bne.w	8008df2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cd2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008cd6:	b2d9      	uxtb	r1, r3
 8008cd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce2:	400a      	ands	r2, r1
 8008ce4:	b2d2      	uxtb	r2, r2
 8008ce6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d178      	bne.n	8008e02 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d24:	653b      	str	r3, [r7, #80]	; 0x50
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e6      	bne.n	8008d10 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3308      	adds	r3, #8
 8008d48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	623b      	str	r3, [r7, #32]
   return(result);
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d62:	633a      	str	r2, [r7, #48]	; 0x30
 8008d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e5      	bne.n	8008d42 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d12e      	bne.n	8008dea <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f023 0310 	bic.w	r3, r3, #16
 8008da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db0:	61fb      	str	r3, [r7, #28]
 8008db2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db4:	69b9      	ldr	r1, [r7, #24]
 8008db6:	69fa      	ldr	r2, [r7, #28]
 8008db8:	e841 2300 	strex	r3, r2, [r1]
 8008dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e6      	bne.n	8008d92 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	f003 0310 	and.w	r3, r3, #16
 8008dce:	2b10      	cmp	r3, #16
 8008dd0:	d103      	bne.n	8008dda <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2210      	movs	r2, #16
 8008dd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7fe ff30 	bl	8007c48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008de8:	e00b      	b.n	8008e02 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7f9 fbfa 	bl	80025e4 <HAL_UART_RxCpltCallback>
}
 8008df0:	e007      	b.n	8008e02 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	699a      	ldr	r2, [r3, #24]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f042 0208 	orr.w	r2, r2, #8
 8008e00:	619a      	str	r2, [r3, #24]
}
 8008e02:	bf00      	nop
 8008e04:	3758      	adds	r7, #88	; 0x58
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b096      	sub	sp, #88	; 0x58
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e22:	2b22      	cmp	r3, #34	; 0x22
 8008e24:	f040 8095 	bne.w	8008f52 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e36:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e38:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008e3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e40:	4013      	ands	r3, r2
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e46:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e4c:	1c9a      	adds	r2, r3, #2
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d178      	bne.n	8008f62 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8008e90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e6      	bne.n	8008e70 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e5      	bne.n	8008ea2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d12e      	bne.n	8008f4a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f023 0310 	bic.w	r3, r3, #16
 8008f06:	647b      	str	r3, [r7, #68]	; 0x44
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6979      	ldr	r1, [r7, #20]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e6      	bne.n	8008ef2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	f003 0310 	and.w	r3, r3, #16
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d103      	bne.n	8008f3a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2210      	movs	r2, #16
 8008f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7fe fe80 	bl	8007c48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f48:	e00b      	b.n	8008f62 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7f9 fb4a 	bl	80025e4 <HAL_UART_RxCpltCallback>
}
 8008f50:	e007      	b.n	8008f62 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	699a      	ldr	r2, [r3, #24]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f042 0208 	orr.w	r2, r2, #8
 8008f60:	619a      	str	r2, [r3, #24]
}
 8008f62:	bf00      	nop
 8008f64:	3758      	adds	r7, #88	; 0x58
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b0a6      	sub	sp, #152	; 0x98
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f7a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa2:	2b22      	cmp	r3, #34	; 0x22
 8008fa4:	f040 814f 	bne.w	8009246 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fb2:	e0f6      	b.n	80091a2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fbe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008fc2:	b2d9      	uxtb	r1, r3
 8008fc4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fce:	400a      	ands	r2, r1
 8008fd0:	b2d2      	uxtb	r2, r2
 8008fd2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	2b00      	cmp	r3, #0
 8009004:	d053      	beq.n	80090ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009006:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d011      	beq.n	8009036 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00b      	beq.n	8009036 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2201      	movs	r2, #1
 8009024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800902c:	f043 0201 	orr.w	r2, r3, #1
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b00      	cmp	r3, #0
 8009040:	d011      	beq.n	8009066 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009042:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00b      	beq.n	8009066 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2202      	movs	r2, #2
 8009054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800905c:	f043 0204 	orr.w	r2, r3, #4
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009066:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800906a:	f003 0304 	and.w	r3, r3, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	d011      	beq.n	8009096 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009072:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00b      	beq.n	8009096 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2204      	movs	r2, #4
 8009084:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800908c:	f043 0202 	orr.w	r2, r3, #2
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909c:	2b00      	cmp	r3, #0
 800909e:	d006      	beq.n	80090ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fe fdc7 	bl	8007c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d173      	bne.n	80091a2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80090c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80090de:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80090e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80090ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e4      	bne.n	80090ba <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3308      	adds	r3, #8
 80090f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009106:	f023 0301 	bic.w	r3, r3, #1
 800910a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3308      	adds	r3, #8
 8009112:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009114:	657a      	str	r2, [r7, #84]	; 0x54
 8009116:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800911a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e3      	bne.n	80090f0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2220      	movs	r2, #32
 800912c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913a:	2b01      	cmp	r3, #1
 800913c:	d12e      	bne.n	800919c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	f023 0310 	bic.w	r3, r3, #16
 8009158:	67bb      	str	r3, [r7, #120]	; 0x78
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009162:	643b      	str	r3, [r7, #64]	; 0x40
 8009164:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e6      	bne.n	8009144 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	f003 0310 	and.w	r3, r3, #16
 8009180:	2b10      	cmp	r3, #16
 8009182:	d103      	bne.n	800918c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2210      	movs	r2, #16
 800918a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7fe fd57 	bl	8007c48 <HAL_UARTEx_RxEventCallback>
 800919a:	e002      	b.n	80091a2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7f9 fa21 	bl	80025e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d006      	beq.n	80091b8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80091aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f47f aefe 	bne.w	8008fb4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091c2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d045      	beq.n	8009256 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d23e      	bcs.n	8009256 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3308      	adds	r3, #8
 80091de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091ee:	673b      	str	r3, [r7, #112]	; 0x70
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3308      	adds	r3, #8
 80091f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e5      	bne.n	80091d8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a14      	ldr	r2, [pc, #80]	; (8009260 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009210:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f043 0320 	orr.w	r3, r3, #32
 8009226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009230:	61bb      	str	r3, [r7, #24]
 8009232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6979      	ldr	r1, [r7, #20]
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	613b      	str	r3, [r7, #16]
   return(result);
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e6      	bne.n	8009212 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009244:	e007      	b.n	8009256 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	699a      	ldr	r2, [r3, #24]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0208 	orr.w	r2, r2, #8
 8009254:	619a      	str	r2, [r3, #24]
}
 8009256:	bf00      	nop
 8009258:	3798      	adds	r7, #152	; 0x98
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	08008cab 	.word	0x08008cab

08009264 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b0a8      	sub	sp, #160	; 0xa0
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009272:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929a:	2b22      	cmp	r3, #34	; 0x22
 800929c:	f040 8153 	bne.w	8009546 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092aa:	e0fa      	b.n	80094a2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80092be:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80092c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80092c6:	4013      	ands	r3, r2
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d4:	1c9a      	adds	r2, r3, #2
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092fa:	f003 0307 	and.w	r3, r3, #7
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d053      	beq.n	80093aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	d011      	beq.n	8009332 <UART_RxISR_16BIT_FIFOEN+0xce>
 800930e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00b      	beq.n	8009332 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2201      	movs	r2, #1
 8009320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009328:	f043 0201 	orr.w	r2, r3, #1
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d011      	beq.n	8009362 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800933e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00b      	beq.n	8009362 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2202      	movs	r2, #2
 8009350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009358:	f043 0204 	orr.w	r2, r3, #4
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	2b00      	cmp	r3, #0
 800936c:	d011      	beq.n	8009392 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800936e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00b      	beq.n	8009392 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2204      	movs	r2, #4
 8009380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009388:	f043 0202 	orr.w	r2, r3, #2
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d006      	beq.n	80093aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7fe fc49 	bl	8007c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d175      	bne.n	80094a2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093da:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e4      	bne.n	80093b6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3308      	adds	r3, #8
 80093f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f6:	e853 3f00 	ldrex	r3, [r3]
 80093fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3308      	adds	r3, #8
 8009410:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009414:	65ba      	str	r2, [r7, #88]	; 0x58
 8009416:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800941a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800941c:	e841 2300 	strex	r3, r2, [r1]
 8009420:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e1      	bne.n	80093ec <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2220      	movs	r2, #32
 800942c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800943a:	2b01      	cmp	r3, #1
 800943c:	d12e      	bne.n	800949c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009454:	f023 0310 	bic.w	r3, r3, #16
 8009458:	67fb      	str	r3, [r7, #124]	; 0x7c
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009462:	647b      	str	r3, [r7, #68]	; 0x44
 8009464:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e6      	bne.n	8009444 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b10      	cmp	r3, #16
 8009482:	d103      	bne.n	800948c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2210      	movs	r2, #16
 800948a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7fe fbd7 	bl	8007c48 <HAL_UARTEx_RxEventCallback>
 800949a:	e002      	b.n	80094a2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7f9 f8a1 	bl	80025e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d006      	beq.n	80094b8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80094aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094ae:	f003 0320 	and.w	r3, r3, #32
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f47f aefa 	bne.w	80092ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094be:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d045      	beq.n	8009556 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094d0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d23e      	bcs.n	8009556 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3308      	adds	r3, #8
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	e853 3f00 	ldrex	r3, [r3]
 80094e6:	623b      	str	r3, [r7, #32]
   return(result);
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094ee:	677b      	str	r3, [r7, #116]	; 0x74
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3308      	adds	r3, #8
 80094f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80094f8:	633a      	str	r2, [r7, #48]	; 0x30
 80094fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e5      	bne.n	80094d8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a14      	ldr	r2, [pc, #80]	; (8009560 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009510:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f043 0320 	orr.w	r3, r3, #32
 8009526:	673b      	str	r3, [r7, #112]	; 0x70
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	461a      	mov	r2, r3
 800952e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009530:	61fb      	str	r3, [r7, #28]
 8009532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009534:	69b9      	ldr	r1, [r7, #24]
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	e841 2300 	strex	r3, r2, [r1]
 800953c:	617b      	str	r3, [r7, #20]
   return(result);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e6      	bne.n	8009512 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009544:	e007      	b.n	8009556 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	699a      	ldr	r2, [r3, #24]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 0208 	orr.w	r2, r2, #8
 8009554:	619a      	str	r2, [r3, #24]
}
 8009556:	bf00      	nop
 8009558:	37a0      	adds	r7, #160	; 0xa0
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	08008e0b 	.word	0x08008e0b

08009564 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e027      	b.n	8009606 <HAL_UARTEx_DisableFifoMode+0x66>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2224      	movs	r2, #36	; 0x24
 80095c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0201 	bic.w	r2, r2, #1
 80095dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009622:	2b01      	cmp	r3, #1
 8009624:	d101      	bne.n	800962a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009626:	2302      	movs	r3, #2
 8009628:	e02d      	b.n	8009686 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2224      	movs	r2, #36	; 0x24
 8009636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f850 	bl	800970c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2220      	movs	r2, #32
 8009678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e02d      	b.n	8009702 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2224      	movs	r2, #36	; 0x24
 80096b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0201 	bic.w	r2, r2, #1
 80096cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f812 	bl	800970c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009718:	2b00      	cmp	r3, #0
 800971a:	d108      	bne.n	800972e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800972c:	e031      	b.n	8009792 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800972e:	2308      	movs	r3, #8
 8009730:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009732:	2308      	movs	r3, #8
 8009734:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	0e5b      	lsrs	r3, r3, #25
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	0f5b      	lsrs	r3, r3, #29
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f003 0307 	and.w	r3, r3, #7
 8009754:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	7b3a      	ldrb	r2, [r7, #12]
 800975a:	4911      	ldr	r1, [pc, #68]	; (80097a0 <UARTEx_SetNbDataToProcess+0x94>)
 800975c:	5c8a      	ldrb	r2, [r1, r2]
 800975e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009762:	7b3a      	ldrb	r2, [r7, #12]
 8009764:	490f      	ldr	r1, [pc, #60]	; (80097a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009766:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009768:	fb93 f3f2 	sdiv	r3, r3, r2
 800976c:	b29a      	uxth	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	7b7a      	ldrb	r2, [r7, #13]
 8009778:	4909      	ldr	r1, [pc, #36]	; (80097a0 <UARTEx_SetNbDataToProcess+0x94>)
 800977a:	5c8a      	ldrb	r2, [r1, r2]
 800977c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009780:	7b7a      	ldrb	r2, [r7, #13]
 8009782:	4908      	ldr	r1, [pc, #32]	; (80097a4 <UARTEx_SetNbDataToProcess+0x98>)
 8009784:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009786:	fb93 f3f2 	sdiv	r3, r3, r2
 800978a:	b29a      	uxth	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009792:	bf00      	nop
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	080099fc 	.word	0x080099fc
 80097a4:	08009a04 	.word	0x08009a04

080097a8 <memcmp>:
 80097a8:	b510      	push	{r4, lr}
 80097aa:	3901      	subs	r1, #1
 80097ac:	4402      	add	r2, r0
 80097ae:	4290      	cmp	r0, r2
 80097b0:	d101      	bne.n	80097b6 <memcmp+0xe>
 80097b2:	2000      	movs	r0, #0
 80097b4:	e005      	b.n	80097c2 <memcmp+0x1a>
 80097b6:	7803      	ldrb	r3, [r0, #0]
 80097b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80097bc:	42a3      	cmp	r3, r4
 80097be:	d001      	beq.n	80097c4 <memcmp+0x1c>
 80097c0:	1b18      	subs	r0, r3, r4
 80097c2:	bd10      	pop	{r4, pc}
 80097c4:	3001      	adds	r0, #1
 80097c6:	e7f2      	b.n	80097ae <memcmp+0x6>

080097c8 <memset>:
 80097c8:	4402      	add	r2, r0
 80097ca:	4603      	mov	r3, r0
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d100      	bne.n	80097d2 <memset+0xa>
 80097d0:	4770      	bx	lr
 80097d2:	f803 1b01 	strb.w	r1, [r3], #1
 80097d6:	e7f9      	b.n	80097cc <memset+0x4>

080097d8 <__libc_init_array>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	4d0d      	ldr	r5, [pc, #52]	; (8009810 <__libc_init_array+0x38>)
 80097dc:	4c0d      	ldr	r4, [pc, #52]	; (8009814 <__libc_init_array+0x3c>)
 80097de:	1b64      	subs	r4, r4, r5
 80097e0:	10a4      	asrs	r4, r4, #2
 80097e2:	2600      	movs	r6, #0
 80097e4:	42a6      	cmp	r6, r4
 80097e6:	d109      	bne.n	80097fc <__libc_init_array+0x24>
 80097e8:	4d0b      	ldr	r5, [pc, #44]	; (8009818 <__libc_init_array+0x40>)
 80097ea:	4c0c      	ldr	r4, [pc, #48]	; (800981c <__libc_init_array+0x44>)
 80097ec:	f000 f826 	bl	800983c <_init>
 80097f0:	1b64      	subs	r4, r4, r5
 80097f2:	10a4      	asrs	r4, r4, #2
 80097f4:	2600      	movs	r6, #0
 80097f6:	42a6      	cmp	r6, r4
 80097f8:	d105      	bne.n	8009806 <__libc_init_array+0x2e>
 80097fa:	bd70      	pop	{r4, r5, r6, pc}
 80097fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009800:	4798      	blx	r3
 8009802:	3601      	adds	r6, #1
 8009804:	e7ee      	b.n	80097e4 <__libc_init_array+0xc>
 8009806:	f855 3b04 	ldr.w	r3, [r5], #4
 800980a:	4798      	blx	r3
 800980c:	3601      	adds	r6, #1
 800980e:	e7f2      	b.n	80097f6 <__libc_init_array+0x1e>
 8009810:	08009a14 	.word	0x08009a14
 8009814:	08009a14 	.word	0x08009a14
 8009818:	08009a14 	.word	0x08009a14
 800981c:	08009a18 	.word	0x08009a18

08009820 <memcpy>:
 8009820:	440a      	add	r2, r1
 8009822:	4291      	cmp	r1, r2
 8009824:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009828:	d100      	bne.n	800982c <memcpy+0xc>
 800982a:	4770      	bx	lr
 800982c:	b510      	push	{r4, lr}
 800982e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009836:	4291      	cmp	r1, r2
 8009838:	d1f9      	bne.n	800982e <memcpy+0xe>
 800983a:	bd10      	pop	{r4, pc}

0800983c <_init>:
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983e:	bf00      	nop
 8009840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009842:	bc08      	pop	{r3}
 8009844:	469e      	mov	lr, r3
 8009846:	4770      	bx	lr

08009848 <_fini>:
 8009848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984a:	bf00      	nop
 800984c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984e:	bc08      	pop	{r3}
 8009850:	469e      	mov	lr, r3
 8009852:	4770      	bx	lr
