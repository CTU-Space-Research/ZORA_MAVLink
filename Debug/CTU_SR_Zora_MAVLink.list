
CTU_SR_Zora_MAVLink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ac0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08009c98  08009c98  00019c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e44  08009e44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e44  08009e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e4c  08009e4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e50  08009e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  2000000c  08009e60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ac  08009e60  000209ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f23e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000332a  00000000  00000000  0003f2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a88  00000000  00000000  000425e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014e4  00000000  00000000  00044070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022710  00000000  00000000  00045554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c5d0  00000000  00000000  00067c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecf5f  00000000  00000000  00084234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000761c  00000000  00000000  00171194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001787b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009c80 	.word	0x08009c80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08009c80 	.word	0x08009c80

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <mavlink_comm_send_bytes>:

//required define for the protocol to use "mavlink_comm_send_bytes" function
#define MAVLINK_SEND_UART_BYTES
//convenience function for sending whole data block at once through a channel
//even though it has UART in its name, it has nothing to do with uart itself
static void mavlink_comm_send_bytes(mavlink_channel_t chan, const char *buf, uint16_t len){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]
    if(chan == MAVLINK_COMM_0){
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d105      	bne.n	8000536 <mavlink_comm_send_bytes+0x22>
        HAL_UART_Transmit_IT(&huart1, (uint8_t *)buf, len);
 800052a:	88bb      	ldrh	r3, [r7, #4]
 800052c:	461a      	mov	r2, r3
 800052e:	6839      	ldr	r1, [r7, #0]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <mavlink_comm_send_bytes+0x2c>)
 8000532:	f007 f981 	bl	8007838 <HAL_UART_Transmit_IT>
    }
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200001f4 	.word	0x200001f4

08000544 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4053      	eors	r3, r2
 800055a:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	b25a      	sxtb	r2, r3
 8000562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000566:	4053      	eors	r3, r2
 8000568:	b25b      	sxtb	r3, r3
 800056a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	b29b      	uxth	r3, r3
 8000574:	b21a      	sxth	r2, r3
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21b      	sxth	r3, r3
 800057c:	4053      	eors	r3, r2
 800057e:	b21a      	sxth	r2, r3
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	b21b      	sxth	r3, r3
 8000586:	4053      	eors	r3, r2
 8000588:	b21a      	sxth	r2, r3
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	091b      	lsrs	r3, r3, #4
 800058e:	b2db      	uxtb	r3, r3
 8000590:	b21b      	sxth	r3, r3
 8000592:	4053      	eors	r3, r2
 8000594:	b21b      	sxth	r3, r3
 8000596:	b29a      	uxth	r2, r3
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	801a      	strh	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b6:	801a      	strh	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80005d0:	f107 030e 	add.w	r3, r7, #14
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffe7 	bl	80005a8 <crc_init>
	while (length--) {
 80005da:	e009      	b.n	80005f0 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	f107 020e 	add.w	r2, r7, #14
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ffaa 	bl	8000544 <crc_accumulate>
	while (length--) {
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	1e5a      	subs	r2, r3, #1
 80005f4:	807a      	strh	r2, [r7, #2]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f0      	bne.n	80005dc <crc_calculate+0x18>
        }
        return crcTmp;
 80005fa:	89fb      	ldrh	r3, [r7, #14]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	617b      	str	r3, [r7, #20]
	while (length--) {
 8000616:	e007      	b.n	8000628 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	617a      	str	r2, [r7, #20]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	68f9      	ldr	r1, [r7, #12]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff8e 	bl	8000544 <crc_accumulate>
	while (length--) {
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	1e5a      	subs	r2, r3, #1
 800062c:	80fa      	strh	r2, [r7, #6]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f2      	bne.n	8000618 <crc_accumulate_buffer+0x14>
        }
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <mavlink_sha256_init+0x50>)
 8000654:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <mavlink_sha256_init+0x54>)
 800065a:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <mavlink_sha256_init+0x58>)
 8000660:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <mavlink_sha256_init+0x5c>)
 8000666:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <mavlink_sha256_init+0x60>)
 800066c:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <mavlink_sha256_init+0x64>)
 8000672:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <mavlink_sha256_init+0x68>)
 8000678:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <mavlink_sha256_init+0x6c>)
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	6a09e667 	.word	0x6a09e667
 8000690:	bb67ae85 	.word	0xbb67ae85
 8000694:	3c6ef372 	.word	0x3c6ef372
 8000698:	a54ff53a 	.word	0xa54ff53a
 800069c:	510e527f 	.word	0x510e527f
 80006a0:	9b05688c 	.word	0x9b05688c
 80006a4:	1f83d9ab 	.word	0x1f83d9ab
 80006a8:	5be0cd19 	.word	0x5be0cd19

080006ac <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b0cf      	sub	sp, #316	; 0x13c
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ba:	6018      	str	r0, [r3, #0]
 80006bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006c0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80006c4:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 80006c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 80006d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 80006e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 80006f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8000706:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800070a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8000716:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800071a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8000726:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800072a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6a1b      	ldr	r3, [r3, #32]
 8000732:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8000736:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800073a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800074c:	e016      	b.n	800077c <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 800074e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000758:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	4413      	add	r3, r2
 8000760:	6819      	ldr	r1, [r3, #0]
 8000762:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800076a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800076e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000776:	3301      	adds	r3, #1
 8000778:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800077c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000780:	2b0f      	cmp	r3, #15
 8000782:	dde4      	ble.n	800074e <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000784:	2310      	movs	r3, #16
 8000786:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800078a:	e069      	b.n	8000860 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800078c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000790:	1e9a      	subs	r2, r3, #2
 8000792:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800079a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800079e:	ea4f 4273 	mov.w	r2, r3, ror #17
 80007a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007a6:	1e99      	subs	r1, r3, #2
 80007a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007b4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80007b8:	405a      	eors	r2, r3
 80007ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007be:	1e99      	subs	r1, r3, #2
 80007c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007cc:	0a9b      	lsrs	r3, r3, #10
 80007ce:	405a      	eors	r2, r3
 80007d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007d4:	1fd9      	subs	r1, r3, #7
 80007d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007e2:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80007e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007e8:	f1a3 010f 	sub.w	r1, r3, #15
 80007ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007f8:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80007fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000800:	f1a3 000f 	sub.w	r0, r3, #15
 8000804:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800080c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000810:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000814:	4059      	eors	r1, r3
 8000816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800081a:	f1a3 000f 	sub.w	r0, r3, #15
 800081e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000822:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000826:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800082e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000834:	f1a3 0110 	sub.w	r1, r3, #16
 8000838:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800083c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000840:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000844:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000846:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800084a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800084e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800085a:	3301      	adds	r3, #1
 800085c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000864:	2b3f      	cmp	r3, #63	; 0x3f
 8000866:	dd91      	ble.n	800078c <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800086e:	e078      	b.n	8000962 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000870:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000874:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000878:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800087c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000880:	405a      	eors	r2, r3
 8000882:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000886:	ea4f 6373 	mov.w	r3, r3, ror #25
 800088a:	405a      	eors	r2, r3
 800088c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000890:	441a      	add	r2, r3
 8000892:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000896:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800089a:	4019      	ands	r1, r3
 800089c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008a0:	43d8      	mvns	r0, r3
 80008a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008a6:	4003      	ands	r3, r0
 80008a8:	404b      	eors	r3, r1
 80008aa:	441a      	add	r2, r3
 80008ac:	496e      	ldr	r1, [pc, #440]	; (8000a68 <mavlink_sha256_calc+0x3bc>)
 80008ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008b6:	441a      	add	r2, r3
 80008b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80008bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80008c0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80008c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008c8:	4413      	add	r3, r2
 80008ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80008ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008d2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80008d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008da:	ea4f 3373 	mov.w	r3, r3, ror #13
 80008de:	405a      	eors	r2, r3
 80008e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008e4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80008e8:	405a      	eors	r2, r3
 80008ea:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80008ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008f2:	4059      	eors	r1, r3
 80008f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008f8:	4019      	ands	r1, r3
 80008fa:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80008fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000902:	4003      	ands	r3, r0
 8000904:	404b      	eors	r3, r1
 8000906:	4413      	add	r3, r2
 8000908:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 800090c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000910:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8000914:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000918:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 800091c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000920:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8000924:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000928:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800092c:	4413      	add	r3, r2
 800092e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 800093a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800093e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000942:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000946:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 800094a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800094e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000952:	4413      	add	r3, r2
 8000954:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8000958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800095c:	3301      	adds	r3, #1
 800095e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000966:	2b3f      	cmp	r3, #63	; 0x3f
 8000968:	dd82      	ble.n	8000870 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 800096a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800096e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800097a:	441a      	add	r2, r3
 800097c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000980:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000988:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800098c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000998:	441a      	add	r2, r3
 800099a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800099e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 80009a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	691a      	ldr	r2, [r3, #16]
 80009b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80009b6:	441a      	add	r2, r3
 80009b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 80009c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80009d4:	441a      	add	r2, r3
 80009d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 80009e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009f2:	441a      	add	r2, r3
 80009f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8000a00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a10:	441a      	add	r2, r3
 8000a12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8000a1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6a1a      	ldr	r2, [r3, #32]
 8000a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a2e:	441a      	add	r2, r3
 8000a30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8000a3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a4c:	441a      	add	r2, r3
 8000a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a5a:	bf00      	nop
 8000a5c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	08009cb0 	.word	0x08009cb0

08000a6c <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	; 0x70
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d904      	bls.n	8000aa4 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aac:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000aae:	e057      	b.n	8000b60 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8000ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ab2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ab6:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d201      	bcs.n	8000ac4 <mavlink_sha256_update+0x58>
            l = len;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000acc:	4413      	add	r3, r2
 8000ace:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ad0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f009 f8c6 	bl	8009c64 <memcpy>
	offset += l;
 8000ad8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000adc:	4413      	add	r3, r2
 8000ade:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ae4:	4413      	add	r3, r2
 8000ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000af2:	2b40      	cmp	r3, #64	; 0x40
 8000af4:	d134      	bne.n	8000b60 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3328      	adds	r3, #40	; 0x28
 8000afa:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8000afc:	2300      	movs	r3, #0
 8000afe:	663b      	str	r3, [r7, #96]	; 0x60
 8000b00:	e023      	b.n	8000b4a <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b08:	4413      	add	r3, r2
 8000b0a:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000b0c:	f107 0210 	add.w	r2, r7, #16
 8000b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b1a:	3303      	adds	r3, #3
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b20:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b24:	1c9a      	adds	r2, r3, #2
 8000b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b28:	3301      	adds	r3, #1
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b34:	3302      	adds	r3, #2
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b3c:	3303      	adds	r3, #3
 8000b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b40:	7812      	ldrb	r2, [r2, #0]
 8000b42:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b46:	3301      	adds	r3, #1
 8000b48:	663b      	str	r3, [r7, #96]	; 0x60
 8000b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	ddd8      	ble.n	8000b02 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4619      	mov	r1, r3
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff fda8 	bl	80006ac <mavlink_sha256_calc>
	    offset = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1a4      	bne.n	8000ab0 <mavlink_sha256_update+0x44>
	}
    }
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	3770      	adds	r7, #112	; 0x70
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b098      	sub	sp, #96	; 0x60
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	08db      	lsrs	r3, r3, #3
 8000b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b88:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b90:	3301      	adds	r3, #1
 8000b92:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3308      	adds	r3, #8
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	2247      	movs	r2, #71	; 0x47
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f009 f82f 	bl	8009c0c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bb4:	3307      	adds	r3, #7
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	3360      	adds	r3, #96	; 0x60
 8000bba:	443b      	add	r3, r7
 8000bbc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	0a1a      	lsrs	r2, r3, #8
 8000bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bc8:	3306      	adds	r3, #6
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	3360      	adds	r3, #96	; 0x60
 8000bce:	443b      	add	r3, r7
 8000bd0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	0c1a      	lsrs	r2, r3, #16
 8000bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bdc:	3305      	adds	r3, #5
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	3360      	adds	r3, #96	; 0x60
 8000be2:	443b      	add	r3, r7
 8000be4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	0e1a      	lsrs	r2, r3, #24
 8000bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	3360      	adds	r3, #96	; 0x60
 8000bf6:	443b      	add	r3, r7
 8000bf8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c02:	3303      	adds	r3, #3
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	3360      	adds	r3, #96	; 0x60
 8000c08:	443b      	add	r3, r7
 8000c0a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	0a1a      	lsrs	r2, r3, #8
 8000c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c16:	3302      	adds	r3, #2
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	3360      	adds	r3, #96	; 0x60
 8000c1c:	443b      	add	r3, r7
 8000c1e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	0c1a      	lsrs	r2, r3, #16
 8000c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	3360      	adds	r3, #96	; 0x60
 8000c30:	443b      	add	r3, r7
 8000c32:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	0e1b      	lsrs	r3, r3, #24
 8000c3c:	b2d9      	uxtb	r1, r3
 8000c3e:	f107 020c 	add.w	r2, r7, #12
 8000c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c44:	4413      	add	r3, r2
 8000c46:	460a      	mov	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c4c:	f103 0208 	add.w	r2, r3, #8
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4619      	mov	r1, r3
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ff08 	bl	8000a6c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c5e:	78da      	ldrb	r2, [r3, #3]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c6a:	7892      	ldrb	r2, [r2, #2]
 8000c6c:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3302      	adds	r3, #2
 8000c72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c74:	7852      	ldrb	r2, [r2, #1]
 8000c76:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	3303      	adds	r3, #3
 8000c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	3304      	adds	r3, #4
 8000c86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c88:	79d2      	ldrb	r2, [r2, #7]
 8000c8a:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	3305      	adds	r3, #5
 8000c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c92:	7992      	ldrb	r2, [r2, #6]
 8000c94:	701a      	strb	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	3760      	adds	r7, #96	; 0x60
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000caa:	79fa      	ldrb	r2, [r7, #7]
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <mavlink_get_channel_status+0x24>)
 8000cb6:	4413      	add	r3, r2
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	200004bc 	.word	0x200004bc

08000cc8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f240 1223 	movw	r2, #291	; 0x123
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <mavlink_get_channel_buffer+0x24>)
 8000cde:	4413      	add	r3, r2
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	2000051c 	.word	0x2000051c

08000cf0 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b0a0      	sub	sp, #128	; 0x80
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <mavlink_sign_packet+0x20>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <mavlink_sign_packet+0x24>
	    return 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	e04f      	b.n	8000db4 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	785a      	ldrb	r2, [r3, #1]
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d22:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f107 0110 	add.w	r1, r7, #16
 8000d2e:	2206      	movs	r2, #6
 8000d30:	4618      	mov	r0, r3
 8000d32:	f008 ff97 	bl	8009c64 <memcpy>
	signing->timestamp++;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d3c:	1c54      	adds	r4, r2, #1
 8000d3e:	f143 0500 	adc.w	r5, r3, #0
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fc75 	bl	800063c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f103 0110 	add.w	r1, r3, #16
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe84 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe7d 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000d72:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fe74 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	2202      	movs	r2, #2
 8000d8a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fe6c 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	2207      	movs	r2, #7
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fe65 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1dda      	adds	r2, r3, #7
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fedf 	bl	8000b70 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000db2:	230d      	movs	r3, #13
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3780      	adds	r7, #128	; 0x80
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bdb0      	pop	{r4, r5, r7, pc}

08000dbc <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000dc8:	e002      	b.n	8000dd0 <_mav_trim_payload+0x14>
		length--;
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d906      	bls.n	8000de4 <_mav_trim_payload+0x28>
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f2      	beq.n	8000dca <_mav_trim_payload+0xe>
	}
	return length;
 8000de4:	78fb      	ldrb	r3, [r7, #3]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b0aa      	sub	sp, #168	; 0xa8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <mavlink_signature_check+0x16>
		return true;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e13e      	b.n	8001088 <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8000e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e20:	3307      	adds	r3, #7
 8000e22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fc06 	bl	800063c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f103 0110 	add.w	r1, r3, #16
 8000e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe15 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8000e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e46:	220a      	movs	r2, #10
 8000e48:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe0d 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f103 010c 	add.w	r1, r3, #12
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe02 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	2202      	movs	r2, #2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fdf9 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8000e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7e:	2207      	movs	r2, #7
 8000e80:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fdf1 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8000e8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fe6b 	bl	8000b70 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	2206      	movs	r2, #6
 8000ea0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f008 fea1 	bl	8009bec <memcmp>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d005      	beq.n	8000ebc <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return false;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e0e5      	b.n	8001088 <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8000ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8000ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ed6:	1c59      	adds	r1, r3, #1
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	2206      	movs	r2, #6
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f008 fec0 	bl	8009c64 <memcpy>

	if (signing_streams == NULL) {
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d105      	bne.n	8000ef6 <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2203      	movs	r2, #3
 8000eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                return false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e0c8      	b.n	8001088 <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000efc:	e02b      	b.n	8000f56 <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	79d9      	ldrb	r1, [r3, #7]
 8000f02:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f06:	68b8      	ldr	r0, [r7, #8]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4403      	add	r3, r0
 8000f10:	3303      	adds	r3, #3
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4299      	cmp	r1, r3
 8000f16:	d119      	bne.n	8000f4c <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7a19      	ldrb	r1, [r3, #8]
 8000f1c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f20:	68b8      	ldr	r0, [r7, #8]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4413      	add	r3, r2
 8000f28:	4403      	add	r3, r0
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d10c      	bne.n	8000f4c <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8000f32:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3302      	adds	r3, #2
 8000f42:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8000f44:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d00b      	beq.n	8000f64 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000f4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000f50:	3301      	adds	r3, #1
 8000f52:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d3cd      	bcc.n	8000efe <mavlink_signature_check+0x10a>
 8000f62:	e000      	b.n	8000f66 <mavlink_signature_check+0x172>
			break;
 8000f64:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d146      	bne.n	8001000 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	d905      	bls.n	8000f86 <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e080      	b.n	8001088 <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8000f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f8a:	4941      	ldr	r1, [pc, #260]	; (8001090 <mavlink_signature_check+0x29c>)
 8000f8c:	1854      	adds	r4, r2, r1
 8000f8e:	f143 0500 	adc.w	r5, r3, #0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f98:	4294      	cmp	r4, r2
 8000f9a:	eb75 0303 	sbcs.w	r3, r5, r3
 8000f9e:	d205      	bcs.n	8000fac <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e06d      	b.n	8001088 <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8000fac:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	79d8      	ldrb	r0, [r3, #7]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	4413      	add	r3, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3303      	adds	r3, #3
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8000fc4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7a18      	ldrb	r0, [r3, #8]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	4602      	mov	r2, r0
 8000fda:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8000fdc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3302      	adds	r3, #2
 8000fec:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000ff0:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	801a      	strh	r2, [r3, #0]
 8000ffe:	e021      	b.n	8001044 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800100c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	4413      	add	r3, r2
 800101a:	1d59      	adds	r1, r3, #5
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	2206      	movs	r2, #6
 8001022:	4618      	mov	r0, r3
 8001024:	f008 fe1e 	bl	8009c64 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800102c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001030:	4290      	cmp	r0, r2
 8001032:	eb71 0303 	sbcs.w	r3, r1, r3
 8001036:	d305      	bcc.n	8001044 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2206      	movs	r2, #6
 800103c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8001040:	2300      	movs	r3, #0
 8001042:	e021      	b.n	8001088 <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001044:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	1d58      	adds	r0, r3, #5
 8001054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001058:	3301      	adds	r3, #1
 800105a:	2206      	movs	r2, #6
 800105c:	4619      	mov	r1, r3
 800105e:	f008 fe01 	bl	8009c64 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800106c:	4290      	cmp	r0, r2
 800106e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001072:	d204      	bcs.n	800107e <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8001074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return true;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	37a8      	adds	r7, #168	; 0xa8
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	005b8d80 	.word	0x005b8d80

08001094 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	b08f      	sub	sp, #60	; 0x3c
 8001098:	af04      	add	r7, sp, #16
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	72fb      	strb	r3, [r7, #11]
 80010a2:	4613      	mov	r3, r2
 80010a4:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7b1b      	ldrb	r3, [r3, #12]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf14      	ite	ne
 80010b2:	2301      	movne	r3, #1
 80010b4:	2300      	moveq	r3, #0
 80010b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80010ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00c      	beq.n	80010e2 <mavlink_finalize_message_buffer+0x4e>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <mavlink_finalize_message_buffer+0x4e>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <mavlink_finalize_message_buffer+0x4e>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <mavlink_finalize_message_buffer+0x50>
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80010e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 80010f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <mavlink_finalize_message_buffer+0x6c>
 80010fc:	230d      	movs	r3, #13
 80010fe:	e000      	b.n	8001102 <mavlink_finalize_message_buffer+0x6e>
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001106:	230a      	movs	r3, #10
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 800110c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	22fe      	movs	r2, #254	; 0xfe
 8001118:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800111a:	2306      	movs	r3, #6
 800111c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001120:	e002      	b.n	8001128 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	22fd      	movs	r2, #253	; 0xfd
 8001126:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10a      	bne.n	8001146 <mavlink_finalize_message_buffer+0xb2>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	330c      	adds	r3, #12
 8001134:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fe3e 	bl	8000dbc <_mav_trim_payload>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	e001      	b.n	800114a <mavlink_finalize_message_buffer+0xb6>
 8001146:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	7afa      	ldrb	r2, [r7, #11]
 8001152:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	7aba      	ldrb	r2, [r7, #10]
 8001158:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001160:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	791b      	ldrb	r3, [r3, #4]
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	b2da      	uxtb	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	799a      	ldrb	r2, [r3, #6]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	799b      	ldrb	r3, [r3, #6]
 8001188:	3301      	adds	r3, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	789b      	ldrb	r3, [r3, #2]
 8001194:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	78db      	ldrb	r3, [r3, #3]
 800119a:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 800119c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	799b      	ldrb	r3, [r3, #6]
 80011a8:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	79db      	ldrb	r3, [r3, #7]
 80011ae:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	7a1b      	ldrb	r3, [r3, #8]
 80011b4:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	7a5a      	ldrb	r2, [r3, #9]
 80011ba:	7a99      	ldrb	r1, [r3, #10]
 80011bc:	0209      	lsls	r1, r1, #8
 80011be:	430a      	orrs	r2, r1
 80011c0:	7adb      	ldrb	r3, [r3, #11]
 80011c2:	041b      	lsls	r3, r3, #16
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	777b      	strb	r3, [r7, #29]
 80011ca:	e030      	b.n	800122e <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	791b      	ldrb	r3, [r3, #4]
 80011d0:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	799b      	ldrb	r3, [r3, #6]
 80011dc:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	79db      	ldrb	r3, [r3, #7]
 80011e2:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	7a1b      	ldrb	r3, [r3, #8]
 80011e8:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	7a5a      	ldrb	r2, [r3, #9]
 80011ee:	7a99      	ldrb	r1, [r3, #10]
 80011f0:	0209      	lsls	r1, r1, #8
 80011f2:	430a      	orrs	r2, r1
 80011f4:	7adb      	ldrb	r3, [r3, #11]
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	7a5a      	ldrb	r2, [r3, #9]
 8001202:	7a99      	ldrb	r1, [r3, #10]
 8001204:	0209      	lsls	r1, r1, #8
 8001206:	430a      	orrs	r2, r1
 8001208:	7adb      	ldrb	r3, [r3, #11]
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	4313      	orrs	r3, r2
 800120e:	121b      	asrs	r3, r3, #8
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	7a5a      	ldrb	r2, [r3, #9]
 800121a:	7a99      	ldrb	r1, [r3, #10]
 800121c:	0209      	lsls	r1, r1, #8
 800121e:	430a      	orrs	r2, r1
 8001220:	7adb      	ldrb	r3, [r3, #11]
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	4313      	orrs	r3, r2
 8001226:	141b      	asrs	r3, r3, #16
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 800122e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001232:	b29b      	uxth	r3, r3
 8001234:	3b01      	subs	r3, #1
 8001236:	b29a      	uxth	r2, r3
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	3301      	adds	r3, #1
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f9bf 	bl	80005c4 <crc_calculate>
 8001246:	4603      	mov	r3, r0
 8001248:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f103 010c 	add.w	r1, r3, #12
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	78db      	ldrb	r3, [r3, #3]
 8001254:	b29a      	uxth	r2, r3
 8001256:	f107 0316 	add.w	r3, r7, #22
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f9d2 	bl	8000604 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001260:	f107 0216 	add.w	r2, r7, #22
 8001264:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f96a 	bl	8000544 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001270:	8af9      	ldrh	r1, [r7, #22]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	330c      	adds	r3, #12
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	78d2      	ldrb	r2, [r2, #3]
 800127a:	4413      	add	r3, r2
 800127c:	b2ca      	uxtb	r2, r1
 800127e:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001280:	8afb      	ldrh	r3, [r7, #22]
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	b299      	uxth	r1, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f103 020c 	add.w	r2, r3, #12
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	78db      	ldrb	r3, [r3, #3]
 8001290:	3301      	adds	r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	b2ca      	uxtb	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8001298:	8afa      	ldrh	r2, [r7, #22]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 800129e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d01a      	beq.n	80012dc <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	310c      	adds	r1, #12
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80012c0:	4401      	add	r1, r0
 80012c2:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80012c6:	f107 0018 	add.w	r0, r7, #24
 80012ca:	9102      	str	r1, [sp, #8]
 80012cc:	9201      	str	r2, [sp, #4]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4633      	mov	r3, r6
 80012d2:	4602      	mov	r2, r0
 80012d4:	4629      	mov	r1, r5
 80012d6:	4620      	mov	r0, r4
 80012d8:	f7ff fd0a 	bl	8000cf0 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3302      	adds	r3, #2
 80012f8:	b29b      	uxth	r3, r3
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	372c      	adds	r7, #44	; 0x2c
 80012fe:	46bd      	mov	sp, r7
 8001300:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001302 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b088      	sub	sp, #32
 8001306:	af04      	add	r7, sp, #16
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	4608      	mov	r0, r1
 800130c:	4611      	mov	r1, r2
 800130e:	461a      	mov	r2, r3
 8001310:	4603      	mov	r3, r0
 8001312:	70fb      	strb	r3, [r7, #3]
 8001314:	460b      	mov	r3, r1
 8001316:	70bb      	strb	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fcbe 	bl	8000ca0 <mavlink_get_channel_status>
 8001324:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8001326:	78ba      	ldrb	r2, [r7, #2]
 8001328:	78f9      	ldrb	r1, [r7, #3]
 800132a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	7f3b      	ldrb	r3, [r7, #28]
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	7e3b      	ldrb	r3, [r7, #24]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff feaa 	bl	8001094 <mavlink_finalize_message_buffer>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af04      	add	r7, sp, #16
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	4608      	mov	r0, r1
 8001354:	4611      	mov	r1, r2
 8001356:	461a      	mov	r2, r3
 8001358:	4603      	mov	r3, r0
 800135a:	70fb      	strb	r3, [r7, #3]
 800135c:	460b      	mov	r3, r1
 800135e:	70bb      	strb	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001364:	78ba      	ldrb	r2, [r7, #2]
 8001366:	78f9      	ldrb	r1, [r7, #3]
 8001368:	7d3b      	ldrb	r3, [r7, #20]
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	7c3b      	ldrb	r3, [r7, #16]
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	787b      	ldrb	r3, [r7, #1]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffc3 	bl	8001302 <mavlink_finalize_message_chan>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	709a      	strb	r2, [r3, #2]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <_mav_finalize_message_chan_send>:
 * @brief Finalize a MAVLink message with channel assignment and send
 */
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint32_t msgid,
                                                    const char *packet, 
						    uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b095      	sub	sp, #84	; 0x54
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	4613      	mov	r3, r2
 80013ba:	73bb      	strb	r3, [r7, #14]
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fc6e 	bl	8000ca0 <mavlink_get_channel_status>
 80013c4:	63b8      	str	r0, [r7, #56]	; 0x38
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN;
 80013c6:	2309      	movs	r3, #9
 80013c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t signature_len = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN];
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80013d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d4:	7b1b      	ldrb	r3, [r3, #12]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80013e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013ea:	f083 0301 	eor.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00c      	beq.n	800140e <_mav_finalize_message_chan_send+0x66>
 80013f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <_mav_finalize_message_chan_send+0x66>
 80013fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <_mav_finalize_message_chan_send+0x66>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <_mav_finalize_message_chan_send+0x68>
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001414:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        if (mavlink1) {
 8001420:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001424:	2b00      	cmp	r3, #0
 8001426:	d024      	beq.n	8001472 <_mav_finalize_message_chan_send+0xca>
            length = min_length;
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            if (msgid > 255) {
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2bff      	cmp	r3, #255	; 0xff
 8001432:	d903      	bls.n	800143c <_mav_finalize_message_chan_send+0x94>
                // can't send 16 bit messages
                _mav_parse_error(status);
 8001434:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001436:	f7ff ffa6 	bl	8001386 <_mav_parse_error>
 800143a:	e0c8      	b.n	80015ce <_mav_finalize_message_chan_send+0x226>
                return;
            }
            header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800143c:	2305      	movs	r3, #5
 800143e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            buf[0] = MAVLINK_STX_MAVLINK1;
 8001442:	23fe      	movs	r3, #254	; 0xfe
 8001444:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            buf[1] = length;
 8001448:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800144c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            buf[2] = status->current_tx_seq;
 8001450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001452:	799b      	ldrb	r3, [r3, #6]
 8001454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            buf[3] = mavlink_system.sysid;
 8001458:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <_mav_finalize_message_chan_send+0x22c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            buf[4] = mavlink_system.compid;
 8001460:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <_mav_finalize_message_chan_send+0x22c>)
 8001462:	785b      	ldrb	r3, [r3, #1]
 8001464:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            buf[5] = msgid & 0xFF;
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001470:	e03d      	b.n	80014ee <_mav_finalize_message_chan_send+0x146>
        } else {
	    uint8_t incompat_flags = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	    if (signing) {
 8001478:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <_mav_finalize_message_chan_send+0xe4>
		incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001480:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	    }
            length = _mav_trim_payload(packet, length);
 800148c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fc92 	bl	8000dbc <_mav_trim_payload>
 8001498:	4603      	mov	r3, r0
 800149a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            buf[0] = MAVLINK_STX;
 800149e:	23fd      	movs	r3, #253	; 0xfd
 80014a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            buf[1] = length;
 80014a4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80014a8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            buf[2] = incompat_flags;
 80014ac:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            buf[3] = 0; // compat_flags
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            buf[4] = status->current_tx_seq;
 80014ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014bc:	799b      	ldrb	r3, [r3, #6]
 80014be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            buf[5] = mavlink_system.sysid;
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <_mav_finalize_message_chan_send+0x22c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            buf[6] = mavlink_system.compid;
 80014ca:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <_mav_finalize_message_chan_send+0x22c>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            buf[7] = msgid & 0xFF;
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            buf[8] = (msgid >> 8) & 0xFF;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            buf[9] = (msgid >> 16) & 0xFF;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        }
	status->current_tx_seq++;
 80014ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f0:	799b      	ldrb	r3, [r3, #6]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f8:	719a      	strb	r2, [r3, #6]
	checksum = crc_calculate((const uint8_t*)&buf[1], header_len);
 80014fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001504:	3301      	adds	r3, #1
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f85b 	bl	80005c4 <crc_calculate>
 800150e:	4603      	mov	r3, r0
 8001510:	86bb      	strh	r3, [r7, #52]	; 0x34
	crc_accumulate_buffer(&checksum, packet, length);
 8001512:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001516:	b29a      	uxth	r2, r3
 8001518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f870 	bl	8000604 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001524:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001528:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f808 	bl	8000544 <crc_accumulate>
	ck[0] = (uint8_t)(checksum & 0xFF);
 8001534:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	ck[1] = (uint8_t)(checksum >> 8);
 800153c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	b29b      	uxth	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8001548:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800154c:	2b00      	cmp	r3, #0
 800154e:	d017      	beq.n	8001580 <_mav_finalize_message_chan_send+0x1d8>
		// possibly add a signature
		signature_len = mavlink_sign_packet(status->signing, signature, buf, header_len+1,
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	6918      	ldr	r0, [r3, #16]
 8001554:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001558:	3301      	adds	r3, #1
 800155a:	b2dc      	uxtb	r4, r3
 800155c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001560:	f107 0114 	add.w	r1, r7, #20
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	9302      	str	r3, [sp, #8]
 800156a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4623      	mov	r3, r4
 8001576:	f7ff fbbb 	bl	8000cf0 <mavlink_sign_packet>
 800157a:	4603      	mov	r3, r0
 800157c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						    (const uint8_t *)packet, length, ck);
	}
#endif

	MAVLINK_START_UART_SEND(chan, header_len + 3 + (uint16_t)length + (uint16_t)signature_len);
	_mavlink_send_uart(chan, (const char *)buf, header_len+1);
 8001580:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001584:	b29b      	uxth	r3, r3
 8001586:	3301      	adds	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fcad 	bl	8001ef0 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
 8001596:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800159a:	b29a      	uxth	r2, r3
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fca5 	bl	8001ef0 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
 80015a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	2202      	movs	r2, #2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fc9e 	bl	8001ef0 <_mavlink_send_uart>
	if (signature_len != 0) {
 80015b4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <_mav_finalize_message_chan_send+0x226>
		_mavlink_send_uart(chan, (const char *)signature, signature_len);
 80015bc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	f107 0114 	add.w	r1, r7, #20
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 fc91 	bl	8001ef0 <_mavlink_send_uart>
	}
	MAVLINK_END_UART_SEND(chan, header_len + 3 + (uint16_t)length + (uint16_t)signature_len);
}
 80015ce:	3744      	adds	r7, #68	; 0x44
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	20000028 	.word	0x20000028

080015d8 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	78db      	ldrb	r3, [r3, #3]
 80015e6:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	789b      	ldrb	r3, [r3, #2]
 80015ec:	2bfe      	cmp	r3, #254	; 0xfe
 80015ee:	d13a      	bne.n	8001666 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80015f4:	2305      	movs	r3, #5
 80015f6:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	789a      	ldrb	r2, [r3, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3301      	adds	r3, #1
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3302      	adds	r3, #2
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	7992      	ldrb	r2, [r2, #6]
 8001610:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3303      	adds	r3, #3
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	79d2      	ldrb	r2, [r2, #7]
 800161a:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3304      	adds	r3, #4
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	7a12      	ldrb	r2, [r2, #8]
 8001624:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	7a5a      	ldrb	r2, [r3, #9]
 800162a:	7a99      	ldrb	r1, [r3, #10]
 800162c:	0209      	lsls	r1, r1, #8
 800162e:	430a      	orrs	r2, r1
 8001630:	7adb      	ldrb	r3, [r3, #11]
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	4313      	orrs	r3, r2
 8001636:	461a      	mov	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3305      	adds	r3, #5
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	1d98      	adds	r0, r3, #6
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f103 010c 	add.w	r1, r3, #12
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	78db      	ldrb	r3, [r3, #3]
 800164e:	461a      	mov	r2, r3
 8001650:	f008 fb08 	bl	8009c64 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001654:	7dbb      	ldrb	r3, [r7, #22]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	78d2      	ldrb	r2, [r2, #3]
 800165a:	4413      	add	r3, r2
 800165c:	3301      	adds	r3, #1
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	e06c      	b.n	8001740 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	330c      	adds	r3, #12
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fba4 	bl	8000dbc <_mav_trim_payload>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001678:	2309      	movs	r3, #9
 800167a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	789a      	ldrb	r2, [r3, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3301      	adds	r3, #1
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3302      	adds	r3, #2
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	7912      	ldrb	r2, [r2, #4]
 8001694:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3303      	adds	r3, #3
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	7952      	ldrb	r2, [r2, #5]
 800169e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3304      	adds	r3, #4
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	7992      	ldrb	r2, [r2, #6]
 80016a8:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3305      	adds	r3, #5
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	79d2      	ldrb	r2, [r2, #7]
 80016b2:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3306      	adds	r3, #6
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	7a12      	ldrb	r2, [r2, #8]
 80016bc:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	7a5a      	ldrb	r2, [r3, #9]
 80016c2:	7a99      	ldrb	r1, [r3, #10]
 80016c4:	0209      	lsls	r1, r1, #8
 80016c6:	430a      	orrs	r2, r1
 80016c8:	7adb      	ldrb	r3, [r3, #11]
 80016ca:	041b      	lsls	r3, r3, #16
 80016cc:	4313      	orrs	r3, r2
 80016ce:	461a      	mov	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3307      	adds	r3, #7
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	7a5a      	ldrb	r2, [r3, #9]
 80016dc:	7a99      	ldrb	r1, [r3, #10]
 80016de:	0209      	lsls	r1, r1, #8
 80016e0:	430a      	orrs	r2, r1
 80016e2:	7adb      	ldrb	r3, [r3, #11]
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	4313      	orrs	r3, r2
 80016e8:	0a1a      	lsrs	r2, r3, #8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3308      	adds	r3, #8
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7a5a      	ldrb	r2, [r3, #9]
 80016f6:	7a99      	ldrb	r1, [r3, #10]
 80016f8:	0209      	lsls	r1, r1, #8
 80016fa:	430a      	orrs	r2, r1
 80016fc:	7adb      	ldrb	r3, [r3, #11]
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	4313      	orrs	r3, r2
 8001702:	0c1a      	lsrs	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3309      	adds	r3, #9
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f103 000a 	add.w	r0, r3, #10
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	330c      	adds	r3, #12
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	4619      	mov	r1, r3
 800171a:	f008 faa3 	bl	8009c64 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 800171e:	7dba      	ldrb	r2, [r7, #22]
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	4413      	add	r3, r2
 8001724:	3301      	adds	r3, #1
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <mavlink_msg_to_send_buffer+0x164>
 8001738:	230d      	movs	r3, #13
 800173a:	e000      	b.n	800173e <mavlink_msg_to_send_buffer+0x166>
 800173c:	2300      	movs	r3, #0
 800173e:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	b2da      	uxtb	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b29a      	uxth	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	3301      	adds	r3, #1
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1c98      	adds	r0, r3, #2
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800176e:	7dfa      	ldrb	r2, [r7, #23]
 8001770:	4619      	mov	r1, r3
 8001772:	f008 fa77 	bl	8009c64 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001776:	7dbb      	ldrb	r3, [r7, #22]
 8001778:	b29a      	uxth	r2, r3
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4413      	add	r3, r2
 8001780:	b29a      	uxth	r2, r3
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4413      	add	r3, r2
 8001788:	b29b      	uxth	r3, r3
 800178a:	3303      	adds	r3, #3
 800178c:	b29b      	uxth	r3, r3
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 80017a2:	f107 030e 	add.w	r3, r7, #14
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fefe 	bl	80005a8 <crc_init>
	msg->checksum = crcTmp;
 80017ac:	89fa      	ldrh	r2, [r7, #14]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	801a      	strh	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 80017ce:	f107 020e 	add.w	r2, r7, #14
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe feb4 	bl	8000544 <crc_accumulate>
	msg->checksum = checksum;
 80017dc:	89fa      	ldrh	r2, [r7, #14]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	801a      	strh	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	2306      	movs	r3, #6
 80017fa:	613b      	str	r3, [r7, #16]
        while (low < high) {
 80017fc:	e025      	b.n	800184a <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4413      	add	r3, r2
 8001804:	3301      	adds	r3, #1
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800180a:	491f      	ldr	r1, [pc, #124]	; (8001888 <mavlink_get_msg_entry+0x9c>)
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d203      	bcs.n	8001828 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3b01      	subs	r3, #1
 8001824:	613b      	str	r3, [r7, #16]
                continue;
 8001826:	e010      	b.n	800184a <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001828:	4917      	ldr	r1, [pc, #92]	; (8001888 <mavlink_get_msg_entry+0x9c>)
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d902      	bls.n	8001844 <mavlink_get_msg_entry+0x58>
                low = mid;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	617b      	str	r3, [r7, #20]
                continue;
 8001842:	e002      	b.n	800184a <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	617b      	str	r3, [r7, #20]
            break;
 8001848:	e003      	b.n	8001852 <mavlink_get_msg_entry+0x66>
        while (low < high) {
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3d5      	bcc.n	80017fe <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001852:	490d      	ldr	r1, [pc, #52]	; (8001888 <mavlink_get_msg_entry+0x9c>)
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8001868:	2300      	movs	r3, #0
 800186a:	e006      	b.n	800187a <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <mavlink_get_msg_entry+0x9c>)
 8001878:	4413      	add	r3, r2
}
 800187a:	4618      	mov	r0, r3
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	08009db0 	.word	0x08009db0

0800188c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	f200 826e 	bhi.w	8001d88 <mavlink_frame_char_buffer+0x4fc>
 80018ac:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <mavlink_frame_char_buffer+0x28>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018f5 	.word	0x080018f5
 80018b8:	080018f5 	.word	0x080018f5
 80018bc:	08001953 	.word	0x08001953
 80018c0:	080019b9 	.word	0x080019b9
 80018c4:	080019f1 	.word	0x080019f1
 80018c8:	08001a09 	.word	0x08001a09
 80018cc:	08001a21 	.word	0x08001a21
 80018d0:	08001a39 	.word	0x08001a39
 80018d4:	08001a51 	.word	0x08001a51
 80018d8:	08001aab 	.word	0x08001aab
 80018dc:	08001af7 	.word	0x08001af7
 80018e0:	08001b53 	.word	0x08001b53
 80018e4:	08001b8b 	.word	0x08001b8b
 80018e8:	08001c17 	.word	0x08001c17
 80018ec:	08001c17 	.word	0x08001c17
 80018f0:	08001cd3 	.word	0x08001cd3
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	2bfd      	cmp	r3, #253	; 0xfd
 80018f8:	d113      	bne.n	8001922 <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2202      	movs	r2, #2
 80018fe:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	79fa      	ldrb	r2, [r7, #7]
 800190a:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	7b1b      	ldrb	r3, [r3, #12]
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff ff3b 	bl	8001796 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001920:	e229      	b.n	8001d76 <mavlink_frame_char_buffer+0x4ea>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2bfe      	cmp	r3, #254	; 0xfe
 8001926:	f040 8226 	bne.w	8001d76 <mavlink_frame_char_buffer+0x4ea>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2202      	movs	r2, #2
 800192e:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	79fa      	ldrb	r2, [r7, #7]
 800193a:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	7b1b      	ldrb	r3, [r3, #12]
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff ff23 	bl	8001796 <mavlink_start_checksum>
		break;
 8001950:	e211      	b.n	8001d76 <mavlink_frame_char_buffer+0x4ea>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00f      	beq.n	800197a <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	3301      	adds	r3, #1
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001966:	68b8      	ldr	r0, [r7, #8]
 8001968:	f7ff fd0d 	bl	8001386 <_mav_parse_error>
			status->msg_received = 0;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2201      	movs	r2, #1
 8001976:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001978:	e206      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
			rxmsg->len = c;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2200      	movs	r2, #0
 8001984:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4619      	mov	r1, r3
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff ff15 	bl	80017ba <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	7b1b      	ldrb	r3, [r3, #12]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2205      	movs	r2, #5
 80019ac:	70da      	strb	r2, [r3, #3]
		break;
 80019ae:	e1eb      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2203      	movs	r2, #3
 80019b4:	70da      	strb	r2, [r3, #3]
		break;
 80019b6:	e1e7      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	791b      	ldrb	r3, [r3, #4]
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <mavlink_frame_char_buffer+0x152>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 80019ca:	68b8      	ldr	r0, [r7, #8]
 80019cc:	f7ff fcdb 	bl	8001386 <_mav_parse_error>
			status->msg_received = 0;
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2201      	movs	r2, #1
 80019da:	70da      	strb	r2, [r3, #3]
			break;
 80019dc:	e1d4      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
		}
		mavlink_update_checksum(rxmsg, c);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	4619      	mov	r1, r3
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7ff fee9 	bl	80017ba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2204      	movs	r2, #4
 80019ec:	70da      	strb	r2, [r3, #3]
		break;
 80019ee:	e1cb      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	79fa      	ldrb	r2, [r7, #7]
 80019f4:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4619      	mov	r1, r3
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fedd 	bl	80017ba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2205      	movs	r2, #5
 8001a04:	70da      	strb	r2, [r3, #3]
		break;
 8001a06:	e1bf      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	4619      	mov	r1, r3
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7ff fed1 	bl	80017ba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2206      	movs	r2, #6
 8001a1c:	70da      	strb	r2, [r3, #3]
		break;
 8001a1e:	e1b3      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	79fa      	ldrb	r2, [r7, #7]
 8001a24:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff fec5 	bl	80017ba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2207      	movs	r2, #7
 8001a34:	70da      	strb	r2, [r3, #3]
		break;
 8001a36:	e1a7      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	79fa      	ldrb	r2, [r7, #7]
 8001a3c:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4619      	mov	r1, r3
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7ff feb9 	bl	80017ba <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	70da      	strb	r2, [r3, #3]
		break;
 8001a4e:	e19b      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	b2d9      	uxtb	r1, r3
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	4301      	orrs	r1, r0
 8001a5e:	7251      	strb	r1, [r2, #9]
 8001a60:	0a19      	lsrs	r1, r3, #8
 8001a62:	b2c9      	uxtb	r1, r1
 8001a64:	2000      	movs	r0, #0
 8001a66:	4301      	orrs	r1, r0
 8001a68:	7291      	strb	r1, [r2, #10]
 8001a6a:	0c1b      	lsrs	r3, r3, #16
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2100      	movs	r1, #0
 8001a70:	430b      	orrs	r3, r1
 8001a72:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4619      	mov	r1, r3
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f7ff fe9e 	bl	80017ba <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	7b1b      	ldrb	r3, [r3, #12]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <mavlink_frame_char_buffer+0x216>
			if(rxmsg->len > 0) {
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	78db      	ldrb	r3, [r3, #3]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <mavlink_frame_char_buffer+0x20e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	220b      	movs	r2, #11
 8001a96:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001a98:	e176      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	70da      	strb	r2, [r3, #3]
		break;
 8001aa0:	e172      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2209      	movs	r2, #9
 8001aa6:	70da      	strb	r2, [r3, #3]
		break;
 8001aa8:	e16e      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	7a5a      	ldrb	r2, [r3, #9]
 8001aae:	7a99      	ldrb	r1, [r3, #10]
 8001ab0:	0209      	lsls	r1, r1, #8
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	7adb      	ldrb	r3, [r3, #11]
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	461a      	mov	r2, r3
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	b2d1      	uxtb	r1, r2
 8001aca:	2000      	movs	r0, #0
 8001acc:	4301      	orrs	r1, r0
 8001ace:	7259      	strb	r1, [r3, #9]
 8001ad0:	0a11      	lsrs	r1, r2, #8
 8001ad2:	b2c9      	uxtb	r1, r1
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	4301      	orrs	r1, r0
 8001ad8:	7299      	strb	r1, [r3, #10]
 8001ada:	0c12      	lsrs	r2, r2, #16
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	2100      	movs	r1, #0
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fe66 	bl	80017ba <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	220a      	movs	r2, #10
 8001af2:	70da      	strb	r2, [r3, #3]
		break;
 8001af4:	e148      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	7a5a      	ldrb	r2, [r3, #9]
 8001afa:	7a99      	ldrb	r1, [r3, #10]
 8001afc:	0209      	lsls	r1, r1, #8
 8001afe:	430a      	orrs	r2, r1
 8001b00:	7adb      	ldrb	r3, [r3, #11]
 8001b02:	041b      	lsls	r3, r3, #16
 8001b04:	4313      	orrs	r3, r2
 8001b06:	461a      	mov	r2, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	b2d1      	uxtb	r1, r2
 8001b16:	2000      	movs	r0, #0
 8001b18:	4301      	orrs	r1, r0
 8001b1a:	7259      	strb	r1, [r3, #9]
 8001b1c:	0a11      	lsrs	r1, r2, #8
 8001b1e:	b2c9      	uxtb	r1, r1
 8001b20:	2000      	movs	r0, #0
 8001b22:	4301      	orrs	r1, r0
 8001b24:	7299      	strb	r1, [r3, #10]
 8001b26:	0c12      	lsrs	r2, r2, #16
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4619      	mov	r1, r3
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fe40 	bl	80017ba <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	78db      	ldrb	r3, [r3, #3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <mavlink_frame_char_buffer+0x2be>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	220b      	movs	r2, #11
 8001b46:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001b48:	e11e      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	220c      	movs	r2, #12
 8001b4e:	70da      	strb	r2, [r3, #3]
		break;
 8001b50:	e11a      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f103 020c 	add.w	r2, r3, #12
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	791b      	ldrb	r3, [r3, #4]
 8001b5c:	1c59      	adds	r1, r3, #1
 8001b5e:	b2c8      	uxtb	r0, r1
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	7108      	strb	r0, [r1, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	79fa      	ldrb	r2, [r7, #7]
 8001b68:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff fe23 	bl	80017ba <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	791a      	ldrb	r2, [r3, #4]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	78db      	ldrb	r3, [r3, #3]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 80fc 	bne.w	8001d7a <mavlink_frame_char_buffer+0x4ee>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	220c      	movs	r2, #12
 8001b86:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001b88:	e0f7      	b.n	8001d7a <mavlink_frame_char_buffer+0x4ee>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	7a5a      	ldrb	r2, [r3, #9]
 8001b8e:	7a99      	ldrb	r1, [r3, #10]
 8001b90:	0209      	lsls	r1, r1, #8
 8001b92:	430a      	orrs	r2, r1
 8001b94:	7adb      	ldrb	r3, [r3, #11]
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fe26 	bl	80017ec <mavlink_get_msg_entry>
 8001ba0:	61b8      	str	r0, [r7, #24]
		uint8_t crc_extra = e?e->crc_extra:0;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <mavlink_frame_char_buffer+0x322>
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	791b      	ldrb	r3, [r3, #4]
 8001bac:	e000      	b.n	8001bb0 <mavlink_frame_char_buffer+0x324>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]
		mavlink_update_checksum(rxmsg, crc_extra);
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fdff 	bl	80017ba <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d003      	beq.n	8001bd2 <mavlink_frame_char_buffer+0x346>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	220e      	movs	r2, #14
 8001bce:	70da      	strb	r2, [r3, #3]
 8001bd0:	e002      	b.n	8001bd8 <mavlink_frame_char_buffer+0x34c>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	220d      	movs	r2, #13
 8001bd6:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80cb 	beq.w	8001d7e <mavlink_frame_char_buffer+0x4f2>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	791a      	ldrb	r2, [r3, #4]
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	799b      	ldrb	r3, [r3, #6]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f080 80c4 	bcs.w	8001d7e <mavlink_frame_char_buffer+0x4f2>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	7912      	ldrb	r2, [r2, #4]
 8001bfe:	1898      	adds	r0, r3, r2
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	799b      	ldrb	r3, [r3, #6]
 8001c04:	461a      	mov	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	791b      	ldrb	r3, [r3, #4]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2100      	movs	r1, #0
 8001c10:	f007 fffc 	bl	8009c0c <memset>
		}
		break;
 8001c14:	e0b3      	b.n	8001d7e <mavlink_frame_char_buffer+0x4f2>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	78db      	ldrb	r3, [r3, #3]
 8001c1a:	2b0e      	cmp	r3, #14
 8001c1c:	d008      	beq.n	8001c30 <mavlink_frame_char_buffer+0x3a4>
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d003      	beq.n	8001c38 <mavlink_frame_char_buffer+0x3ac>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2202      	movs	r2, #2
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e002      	b.n	8001c3e <mavlink_frame_char_buffer+0x3b2>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	79fa      	ldrb	r2, [r7, #7]
 8001c42:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	791b      	ldrb	r3, [r3, #4]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00e      	beq.n	8001c70 <mavlink_frame_char_buffer+0x3e4>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	220f      	movs	r2, #15
 8001c56:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	220d      	movs	r2, #13
 8001c5c:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	f000 808d 	beq.w	8001d82 <mavlink_frame_char_buffer+0x4f6>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8001c6e:	e088      	b.n	8001d82 <mavlink_frame_char_buffer+0x4f6>
			if (status->signing &&
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01f      	beq.n	8001cb8 <mavlink_frame_char_buffer+0x42c>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d013      	beq.n	8001caa <mavlink_frame_char_buffer+0x41e>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	7a59      	ldrb	r1, [r3, #9]
 8001c8c:	7a98      	ldrb	r0, [r3, #10]
 8001c8e:	0200      	lsls	r0, r0, #8
 8001c90:	4301      	orrs	r1, r0
 8001c92:	7adb      	ldrb	r3, [r3, #11]
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	430b      	orrs	r3, r1
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	4790      	blx	r2
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <mavlink_frame_char_buffer+0x42c>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d002      	beq.n	8001cb8 <mavlink_frame_char_buffer+0x42c>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d05e      	beq.n	8001d82 <mavlink_frame_char_buffer+0x4f6>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001cc4:	f240 1223 	movw	r2, #291	; 0x123
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f007 ffca 	bl	8009c64 <memcpy>
		break;
 8001cd0:	e057      	b.n	8001d82 <mavlink_frame_char_buffer+0x4f6>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	7b5b      	ldrb	r3, [r3, #13]
 8001cd6:	f1c3 030d 	rsb	r3, r3, #13
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	79fa      	ldrb	r2, [r7, #7]
 8001ce0:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	7b5b      	ldrb	r3, [r3, #13]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	7b5b      	ldrb	r3, [r3, #13]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d146      	bne.n	8001d86 <mavlink_frame_char_buffer+0x4fa>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6918      	ldr	r0, [r3, #16]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7ff f876 	bl	8000df4 <mavlink_signature_check>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
 8001d0e:	f083 0301 	eor.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d017      	beq.n	8001d48 <mavlink_frame_char_buffer+0x4bc>
			   	(status->signing->accept_unsigned_callback &&
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d012      	beq.n	8001d48 <mavlink_frame_char_buffer+0x4bc>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	7a59      	ldrb	r1, [r3, #9]
 8001d2c:	7a98      	ldrb	r0, [r3, #10]
 8001d2e:	0200      	lsls	r0, r0, #8
 8001d30:	4301      	orrs	r1, r0
 8001d32:	7adb      	ldrb	r3, [r3, #11]
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	430b      	orrs	r3, r1
 8001d38:	4619      	mov	r1, r3
 8001d3a:	68b8      	ldr	r0, [r7, #8]
 8001d3c:	4790      	blx	r2
 8001d3e:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <mavlink_frame_char_buffer+0x4bc>
				// accepted via application level override
				sig_ok = true;
 8001d44:	2301      	movs	r3, #1
 8001d46:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8001d48:	7ffb      	ldrb	r3, [r7, #31]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <mavlink_frame_char_buffer+0x4ca>
				status->msg_received = MAVLINK_FRAMING_OK;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	e002      	b.n	8001d5c <mavlink_frame_char_buffer+0x4d0>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00e      	beq.n	8001d86 <mavlink_frame_char_buffer+0x4fa>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001d68:	f240 1223 	movw	r2, #291	; 0x123
 8001d6c:	68f9      	ldr	r1, [r7, #12]
 8001d6e:	6838      	ldr	r0, [r7, #0]
 8001d70:	f007 ff78 	bl	8009c64 <memcpy>
			}
		}
		break;
 8001d74:	e007      	b.n	8001d86 <mavlink_frame_char_buffer+0x4fa>
		break;
 8001d76:	bf00      	nop
 8001d78:	e006      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
		break;
 8001d7a:	bf00      	nop
 8001d7c:	e004      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
		break;
 8001d7e:	bf00      	nop
 8001d80:	e002      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
		break;
 8001d82:	bf00      	nop
 8001d84:	e000      	b.n	8001d88 <mavlink_frame_char_buffer+0x4fc>
		break;
 8001d86:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d110      	bne.n	8001db2 <mavlink_frame_char_buffer+0x526>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	799a      	ldrb	r2, [r3, #6]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	891b      	ldrh	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <mavlink_frame_char_buffer+0x51a>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2200      	movs	r2, #0
 8001da4:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	891b      	ldrh	r3, [r3, #8]
 8001daa:	3301      	adds	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <mavlink_frame_char_buffer+0x534>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	78da      	ldrb	r2, [r3, #3]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d01a      	beq.n	8001dfc <mavlink_frame_char_buffer+0x570>
           r_mavlink_status->parse_state = status->parse_state;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	78da      	ldrb	r2, [r3, #3]
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	791a      	ldrb	r2, [r3, #4]
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd4:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	795b      	ldrb	r3, [r3, #5]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	891a      	ldrh	r2, [r3, #8]
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	789b      	ldrb	r3, [r3, #2]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	7b1a      	ldrb	r2, [r3, #12]
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d110      	bne.n	8001e2c <mavlink_frame_char_buffer+0x5a0>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00d      	beq.n	8001e2c <mavlink_frame_char_buffer+0x5a0>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	460b      	mov	r3, r1
 8001e48:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ff3b 	bl	8000cc8 <mavlink_get_channel_buffer>
 8001e52:	4604      	mov	r4, r0
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff22 	bl	8000ca0 <mavlink_get_channel_status>
 8001e5c:	4601      	mov	r1, r0
 8001e5e:	7bba      	ldrb	r2, [r7, #14]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4620      	mov	r0, r4
 8001e68:	f7ff fd10 	bl	800188c <mavlink_frame_char_buffer>
 8001e6c:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}

08001e76 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b088      	sub	sp, #32
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60ba      	str	r2, [r7, #8]
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	460b      	mov	r3, r1
 8001e86:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8001e88:	7bb9      	ldrb	r1, [r7, #14]
 8001e8a:	7bf8      	ldrb	r0, [r7, #15]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f7ff ffd2 	bl	8001e38 <mavlink_frame_char>
 8001e94:	4603      	mov	r3, r0
 8001e96:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001e98:	7ffb      	ldrb	r3, [r7, #31]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d002      	beq.n	8001ea4 <mavlink_parse_char+0x2e>
 8001e9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d120      	bne.n	8001ee6 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe ff0e 	bl	8000cc8 <mavlink_get_channel_buffer>
 8001eac:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fef5 	bl	8000ca0 <mavlink_get_channel_status>
 8001eb6:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f7ff fa64 	bl	8001386 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	2bfd      	cmp	r3, #253	; 0xfd
 8001ece:	d108      	bne.n	8001ee2 <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8001edc:	69b8      	ldr	r0, [r7, #24]
 8001ede:	f7ff fc5a 	bl	8001796 <mavlink_start_checksum>
	    }
	    return 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
 8001efc:	4613      	mov	r3, r2
 8001efe:	80bb      	strh	r3, [r7, #4]
#ifdef MAVLINK_SEND_UART_BYTES
	/* this is the more efficient approach, if the platform
	   defines it */
    mavlink_comm_send_bytes(chan, (const uint8_t *)buf, len);
 8001f00:	88ba      	ldrh	r2, [r7, #4]
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb04 	bl	8000514 <mavlink_comm_send_bytes>
	uint16_t i;
	for (i = 0; i < len; i++) {
		mavlink_comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	603a      	str	r2, [r7, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	460b      	mov	r3, r1
 8001f24:	71bb      	strb	r3, [r7, #6]
 8001f26:	4613      	mov	r3, r2
 8001f28:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2c:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 8001f2e:	797b      	ldrb	r3, [r7, #5]
 8001f30:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8001f32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f36:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8001f38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f3c:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 8001f3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f42:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8001f44:	2303      	movs	r3, #3
 8001f46:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	330c      	adds	r3, #12
 8001f4c:	f107 010c 	add.w	r1, r7, #12
 8001f50:	2209      	movs	r2, #9
 8001f52:	4618      	mov	r0, r3
 8001f54:	f007 fe86 	bl	8009c64 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	725a      	strb	r2, [r3, #9]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	729a      	strb	r2, [r3, #10]
 8001f62:	2200      	movs	r2, #0
 8001f64:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8001f66:	79ba      	ldrb	r2, [r7, #6]
 8001f68:	79f9      	ldrb	r1, [r7, #7]
 8001f6a:	2332      	movs	r3, #50	; 0x32
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2309      	movs	r3, #9
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2309      	movs	r3, #9
 8001f74:	6838      	ldr	r0, [r7, #0]
 8001f76:	f7ff f9e8 	bl	800134a <mavlink_finalize_message>
 8001f7a:	4603      	mov	r3, r0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	78db      	ldrb	r3, [r3, #3]
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	bf28      	it	cs
 8001f96:	2309      	movcs	r3, #9
 8001f98:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001f9a:	2209      	movs	r2, #9
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	6838      	ldr	r0, [r7, #0]
 8001fa0:	f007 fe34 	bl	8009c0c <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	4619      	mov	r1, r3
 8001fac:	6838      	ldr	r0, [r7, #0]
 8001fae:	f007 fe59 	bl	8009c64 <memcpy>
#endif
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <mavlink_msg_zora_led_status_send_struct>:
 * @brief Send a zora_led_status message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_zora_led_status_send_struct(mavlink_channel_t chan, const mavlink_zora_led_status_t* zora_led_status)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af02      	add	r7, sp, #8
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	6039      	str	r1, [r7, #0]
 8001fc4:	71fb      	strb	r3, [r7, #7]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_zora_led_status_send(chan, zora_led_status->LED_GREEN_STATUS, zora_led_status->LED_ORANGE_STATUS, zora_led_status->LED_RED_STATUS);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ZORA_LED_STATUS, (const char *)zora_led_status, MAVLINK_MSG_ID_ZORA_LED_STATUS_MIN_LEN, MAVLINK_MSG_ID_ZORA_LED_STATUS_LEN, MAVLINK_MSG_ID_ZORA_LED_STATUS_CRC);
 8001fc6:	79f8      	ldrb	r0, [r7, #7]
 8001fc8:	2335      	movs	r3, #53	; 0x35
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	2303      	movs	r3, #3
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	f7ff f9e7 	bl	80013a8 <_mav_finalize_message_chan_send>
#endif
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
    command_long->command = mavlink_msg_command_long_get_command(msg);
    command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
    command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
    command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_LONG_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_LONG_LEN;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	78db      	ldrb	r3, [r3, #3]
 8001ff0:	2b21      	cmp	r3, #33	; 0x21
 8001ff2:	bf28      	it	cs
 8001ff4:	2321      	movcs	r3, #33	; 0x21
 8001ff6:	73fb      	strb	r3, [r7, #15]
        memset(command_long, 0, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 8001ff8:	2221      	movs	r2, #33	; 0x21
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	6838      	ldr	r0, [r7, #0]
 8001ffe:	f007 fe05 	bl	8009c0c <memset>
    memcpy(command_long, _MAV_PAYLOAD(msg), len);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	330c      	adds	r3, #12
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	4619      	mov	r1, r3
 800200a:	6838      	ldr	r0, [r7, #0]
 800200c:	f007 fe2a 	bl	8009c64 <memcpy>
#endif
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <mavlink_msg_protocol_version_send_struct>:
 * @brief Send a protocol_version message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_protocol_version_send_struct(mavlink_channel_t chan, const mavlink_protocol_version_t* protocol_version)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af02      	add	r7, sp, #8
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_protocol_version_send(chan, protocol_version->version, protocol_version->min_version, protocol_version->max_version, protocol_version->spec_version_hash, protocol_version->library_version_hash);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PROTOCOL_VERSION, (const char *)protocol_version, MAVLINK_MSG_ID_PROTOCOL_VERSION_MIN_LEN, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN, MAVLINK_MSG_ID_PROTOCOL_VERSION_CRC);
 8002024:	79f8      	ldrb	r0, [r7, #7]
 8002026:	23d9      	movs	r3, #217	; 0xd9
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	2316      	movs	r3, #22
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2316      	movs	r3, #22
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002036:	f7ff f9b7 	bl	80013a8 <_mav_finalize_message_chan_send>
#endif
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <mavlink_msg_protocol_version_decode>:
 *
 * @param msg The message to decode
 * @param protocol_version C-struct to decode the message contents into
 */
static inline void mavlink_msg_protocol_version_decode(const mavlink_message_t* msg, mavlink_protocol_version_t* protocol_version)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
    protocol_version->min_version = mavlink_msg_protocol_version_get_min_version(msg);
    protocol_version->max_version = mavlink_msg_protocol_version_get_max_version(msg);
    mavlink_msg_protocol_version_get_spec_version_hash(msg, protocol_version->spec_version_hash);
    mavlink_msg_protocol_version_get_library_version_hash(msg, protocol_version->library_version_hash);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN? msg->len : MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	78db      	ldrb	r3, [r3, #3]
 8002050:	2b16      	cmp	r3, #22
 8002052:	bf28      	it	cs
 8002054:	2316      	movcs	r3, #22
 8002056:	73fb      	strb	r3, [r7, #15]
        memset(protocol_version, 0, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN);
 8002058:	2216      	movs	r2, #22
 800205a:	2100      	movs	r1, #0
 800205c:	6838      	ldr	r0, [r7, #0]
 800205e:	f007 fdd5 	bl	8009c0c <memset>
    memcpy(protocol_version, _MAV_PAYLOAD(msg), len);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	330c      	adds	r3, #12
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	4619      	mov	r1, r3
 800206a:	6838      	ldr	r0, [r7, #0]
 800206c:	f007 fdfa 	bl	8009c64 <memcpy>
#endif
}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <setLEDs>:
#pragma once

#ifndef CTU_SR_ZORA_MAVLINK_MAVLINKCOMMANDS_HPP
#define CTU_SR_ZORA_MAVLINK_MAVLINKCOMMANDS_HPP

static void setLEDs(bool green, bool orange, bool red){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	460b      	mov	r3, r1
 8002084:	71bb      	strb	r3, [r7, #6]
 8002086:	4613      	mov	r3, r2
 8002088:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, green);
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	461a      	mov	r2, r3
 800208e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002092:	480a      	ldr	r0, [pc, #40]	; (80020bc <setLEDs+0x44>)
 8002094:	f003 f970 	bl	8005378 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, orange);
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	461a      	mov	r2, r3
 800209c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <setLEDs+0x44>)
 80020a2:	f003 f969 	bl	8005378 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, red);
 80020a6:	797b      	ldrb	r3, [r7, #5]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020ae:	4803      	ldr	r0, [pc, #12]	; (80020bc <setLEDs+0x44>)
 80020b0:	f003 f962 	bl	8005378 <HAL_GPIO_WritePin>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	48000800 	.word	0x48000800

080020c0 <MAVlinkSetLEDs>:

static void MAVlinkSetLEDs(const mavlink_command_long_t * const command){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    setLEDs((bool)command->param1, (bool)command->param2, (bool)command->param3);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	edd3 7a00 	vldr	s15, [r3]
 80020ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2d8      	uxtb	r0, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80020e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2d9      	uxtb	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80020fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	f7ff ffb4 	bl	8002078 <setLEDs>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <MAVlinkWriteLEDstatus>:
#ifndef CTU_SR_ZORA_MAVLINK_MAVLINKMESSAGES_H
#define CTU_SR_ZORA_MAVLINK_MAVLINKMESSAGES_H

#include <string.h>

static void MAVlinkWriteLEDstatus(){
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

    GPIO_PinState G = HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800211e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002122:	4811      	ldr	r0, [pc, #68]	; (8002168 <MAVlinkWriteLEDstatus+0x50>)
 8002124:	f003 f910 	bl	8005348 <HAL_GPIO_ReadPin>
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState O = HAL_GPIO_ReadPin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 800212c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <MAVlinkWriteLEDstatus+0x50>)
 8002132:	f003 f909 	bl	8005348 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	71bb      	strb	r3, [r7, #6]
    GPIO_PinState R = HAL_GPIO_ReadPin(LED_RED_GPIO_Port, LED_RED_Pin);
 800213a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800213e:	480a      	ldr	r0, [pc, #40]	; (8002168 <MAVlinkWriteLEDstatus+0x50>)
 8002140:	f003 f902 	bl	8005348 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	717b      	strb	r3, [r7, #5]

    mavlink_zora_led_status_t ledStatus = {
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	703b      	strb	r3, [r7, #0]
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	707b      	strb	r3, [r7, #1]
 8002150:	797b      	ldrb	r3, [r7, #5]
 8002152:	70bb      	strb	r3, [r7, #2]
            .LED_GREEN_STATUS = G,
            .LED_ORANGE_STATUS = O,
            .LED_RED_STATUS = R
    };

    mavlink_msg_zora_led_status_send_struct(MAVLINK_COMM_0,&ledStatus);
 8002154:	463b      	mov	r3, r7
 8002156:	4619      	mov	r1, r3
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff ff2e 	bl	8001fba <mavlink_msg_zora_led_status_send_struct>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	48000800 	.word	0x48000800

0800216c <MAVLinkSetCurrentSystem>:

//-------------
// USE THIS FUNCTION TO SET THE MAVLINK SYSTEM PARAMETRS
//-------------
//system = mavlink_system defined in MAVLinkSetup.h
static void MAVLinkSetCurrentSystem(mavlink_system_t * system, uint8_t SysId, uint8_t CompId){
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
 8002178:	4613      	mov	r3, r2
 800217a:	70bb      	strb	r3, [r7, #2]
    system->sysid = SysId;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	701a      	strb	r2, [r3, #0]
    system->compid = CompId;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	78ba      	ldrb	r2, [r7, #2]
 8002186:	705a      	strb	r2, [r3, #1]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <MAVlinkWriteHearbeat>:

static void MAVlinkWriteHearbeat(){
 8002194:	b580      	push	{r7, lr}
 8002196:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 800219a:	af04      	add	r7, sp, #16

	mavlink_message_t message;

	    char buf[300];

	    unsigned len = mavlink_msg_heartbeat_pack( MAVlinkSystemID,MAVlinkComponentID, &message,MAV_TYPE_ROCKET,MAV_AUTOPILOT_INVALID,MAV_MODE_FLAG_DECODE_POSITION_SAFETY, 0,MAV_STATE_STANDBY);
 800219c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80021a0:	2303      	movs	r3, #3
 80021a2:	9303      	str	r3, [sp, #12]
 80021a4:	2300      	movs	r3, #0
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2308      	movs	r3, #8
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2309      	movs	r3, #9
 80021b2:	210c      	movs	r1, #12
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7ff fead 	bl	8001f14 <mavlink_msg_heartbeat_pack>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264

	    // Translate message to buffer
	    len = mavlink_msg_to_send_buffer((uint8_t*)buf, &message);
 80021c0:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fa04 	bl	80015d8 <mavlink_msg_to_send_buffer>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264

	    // Write buffer to serial port, locks port while writing
	    int bytesWritten = HAL_UART_Transmit_IT(&huart1,(uint8_t *)&buf,len);
 80021d6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80021da:	b29a      	uxth	r2, r3
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MAVlinkWriteHearbeat+0x64>)
 80021e4:	f005 fb28 	bl	8007838 <HAL_UART_Transmit_IT>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

	    return;
 80021ee:	bf00      	nop
	    return;




}
 80021f0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200001f4 	.word	0x200001f4

080021fc <MAVlinkWriteProtocolVersion>:

static void MAVlinkWriteProtocolVersion(){
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0

    //TODO: Figure out the correct version hash data
    mavlink_protocol_version_t data = {
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MAVlinkWriteProtocolVersion+0x2c>)
 8002204:	463c      	mov	r4, r7
 8002206:	461d      	mov	r5, r3
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002210:	6020      	str	r0, [r4, #0]
 8002212:	3404      	adds	r4, #4
 8002214:	8021      	strh	r1, [r4, #0]
           .min_version = MAVLINK_MSG_ID_PROTOCOL_VERSION,
           .library_version_hash = "TESTTEST",
           .spec_version_hash = "PROTPROT"
    };

    mavlink_msg_protocol_version_send_struct(MAVLINK_COMM_0,&data);
 8002216:	463b      	mov	r3, r7
 8002218:	4619      	mov	r1, r3
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff fefc 	bl	8002018 <mavlink_msg_protocol_version_send_struct>
}
 8002220:	bf00      	nop
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bdb0      	pop	{r4, r5, r7, pc}
 8002228:	08009c98 	.word	0x08009c98

0800222c <MAVLinkHandleLongCommands>:

static bool MAVLinkHandleLongCommands(const mavlink_command_long_t * const command){
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    switch (command->command){
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8b9b      	ldrh	r3, [r3, #28]
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d01a      	beq.n	8002272 <MAVLinkHandleLongCommands+0x46>
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	d11c      	bne.n	800227c <MAVLinkHandleLongCommands+0x50>

        //if the command request the system to send a message:
        case MAV_CMD_REQUEST_MESSAGE:
            uint16_t requestedMessageID = (uint16_t)command->param1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800224c:	ee17 3a90 	vmov	r3, s15
 8002250:	81fb      	strh	r3, [r7, #14]

            switch (requestedMessageID) {
 8002252:	89fb      	ldrh	r3, [r7, #14]
 8002254:	2b0a      	cmp	r3, #10
 8002256:	d006      	beq.n	8002266 <MAVLinkHandleLongCommands+0x3a>
 8002258:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800225c:	d107      	bne.n	800226e <MAVLinkHandleLongCommands+0x42>
                case MAVLINK_MSG_ID_PROTOCOL_VERSION:
                    MAVlinkWriteProtocolVersion();
 800225e:	f7ff ffcd 	bl	80021fc <MAVlinkWriteProtocolVersion>
                    return true;
 8002262:	2301      	movs	r3, #1
 8002264:	e00b      	b.n	800227e <MAVLinkHandleLongCommands+0x52>

                case MAVLINK_MSG_ID_ZORA_LED_STATUS:
                    MAVlinkWriteLEDstatus();
 8002266:	f7ff ff57 	bl	8002118 <MAVlinkWriteLEDstatus>
                    return true;
 800226a:	2301      	movs	r3, #1
 800226c:	e007      	b.n	800227e <MAVLinkHandleLongCommands+0x52>

                default:
                    return false;
 800226e:	2300      	movs	r3, #0
 8002270:	e005      	b.n	800227e <MAVLinkHandleLongCommands+0x52>

            }
            break;

        case MAV_CMD_SET_LEDS:
            MAVlinkSetLEDs(command); return true;
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ff24 	bl	80020c0 <MAVlinkSetLEDs>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <MAVLinkHandleLongCommands+0x52>

        default:
            return false;
 800227c:	2300      	movs	r3, #0
            break;
    }
    return false;
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <MAVLinkHandleReceivedMessage>:

static bool MAVLinkHandleReceivedMessage(mavlink_message_t * message, mavlink_status_t * messageStatus){
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b09e      	sub	sp, #120	; 0x78
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
    switch (message->msgid) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7a5a      	ldrb	r2, [r3, #9]
 8002296:	7a99      	ldrb	r1, [r3, #10]
 8002298:	0209      	lsls	r1, r1, #8
 800229a:	430a      	orrs	r2, r1
 800229c:	7adb      	ldrb	r3, [r3, #11]
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022a6:	d014      	beq.n	80022d2 <MAVLinkHandleReceivedMessage+0x4a>
 80022a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80022ac:	dc3a      	bgt.n	8002324 <MAVLinkHandleReceivedMessage+0x9c>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <MAVLinkHandleReceivedMessage+0x30>
 80022b2:	2b4c      	cmp	r3, #76	; 0x4c
 80022b4:	d01a      	beq.n	80022ec <MAVLinkHandleReceivedMessage+0x64>
 80022b6:	e035      	b.n	8002324 <MAVLinkHandleReceivedMessage+0x9c>
        case MAVLINK_MSG_ID_HEARTBEAT:
            HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80022b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022bc:	481c      	ldr	r0, [pc, #112]	; (8002330 <MAVLinkHandleReceivedMessage+0xa8>)
 80022be:	f003 f873 	bl	80053a8 <HAL_GPIO_TogglePin>
            mavlink_heartbeat_t hb;
            mavlink_msg_heartbeat_decode(message,&hb);
 80022c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fe5b 	bl	8001f84 <mavlink_msg_heartbeat_decode>
            return true;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e029      	b.n	8002326 <MAVLinkHandleReceivedMessage+0x9e>

        case MAVLINK_MSG_ID_PROTOCOL_VERSION:
            HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80022d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022d6:	4816      	ldr	r0, [pc, #88]	; (8002330 <MAVLinkHandleReceivedMessage+0xa8>)
 80022d8:	f003 f866 	bl	80053a8 <HAL_GPIO_TogglePin>
            mavlink_protocol_version_t protocol;
            mavlink_msg_protocol_version_decode(message, &protocol);
 80022dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fead 	bl	8002042 <mavlink_msg_protocol_version_decode>
            return true;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e01c      	b.n	8002326 <MAVLinkHandleReceivedMessage+0x9e>

            //receive message of type Command
        case MAVLINK_MSG_ID_COMMAND_LONG:
            HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 80022ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022f0:	480f      	ldr	r0, [pc, #60]	; (8002330 <MAVLinkHandleReceivedMessage+0xa8>)
 80022f2:	f003 f859 	bl	80053a8 <HAL_GPIO_TogglePin>
            mavlink_command_long_t _command;
            mavlink_msg_command_long_decode(message, &_command);
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fe70 	bl	8001fe2 <mavlink_msg_command_long_decode>
            const mavlink_command_long_t command = _command; //convert it to a const data variable to prevent change later
 8002302:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002306:	f107 050c 	add.w	r5, r7, #12
 800230a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800230c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800230e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002312:	682b      	ldr	r3, [r5, #0]
 8002314:	6023      	str	r3, [r4, #0]


            //parse the command
            return MAVLinkHandleLongCommands(&command);
 8002316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff86 	bl	800222c <MAVLinkHandleLongCommands>
 8002320:	4603      	mov	r3, r0
 8002322:	e000      	b.n	8002326 <MAVLinkHandleReceivedMessage+0x9e>
            break;

        default:
            return false;
 8002324:	2300      	movs	r3, #0
    }

    return false;
}
 8002326:	4618      	mov	r0, r3
 8002328:	3778      	adds	r7, #120	; 0x78
 800232a:	46bd      	mov	sp, r7
 800232c:	bdb0      	pop	{r4, r5, r7, pc}
 800232e:	bf00      	nop
 8002330:	48000800 	.word	0x48000800

08002334 <MAVLinkParseBuffer>:

static void MAVLinkParseBuffer(const uint8_t * receivedBuffer){
 8002334:	b580      	push	{r7, lr}
 8002336:	b0d2      	sub	sp, #328	; 0x148
 8002338:	af00      	add	r7, sp, #0
 800233a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800233e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002342:	6018      	str	r0, [r3, #0]
    mavlink_message_t message;
    mavlink_status_t messageStatus;

    //figure out what to do when the mavlink parses the buffer before it should end??
    for(uint16_t i = 0; i < UART_RX_Received_NextFreeByteIndex;i++){
 8002344:	2300      	movs	r3, #0
 8002346:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800234a:	e026      	b.n	800239a <MAVLinkParseBuffer+0x66>
        const uint8_t byte = receivedBuffer[i];
 800234c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8002350:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002354:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

        //parse the data until its the message is decoded/refused
        if(mavlink_parse_char(MAVLINK_USART1_CHANNEL_NUM,byte,&message,&messageStatus)){
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	f107 0220 	add.w	r2, r7, #32
 800236a:	f897 1145 	ldrb.w	r1, [r7, #325]	; 0x145
 800236e:	2000      	movs	r0, #0
 8002370:	f7ff fd81 	bl	8001e76 <mavlink_parse_char>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <MAVLinkParseBuffer+0x5c>
            const bool parse = MAVLinkHandleReceivedMessage(&message,&messageStatus);
 800237a:	f107 0208 	add.w	r2, r7, #8
 800237e:	f107 0320 	add.w	r3, r7, #32
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff7f 	bl	8002288 <MAVLinkHandleReceivedMessage>
 800238a:	4603      	mov	r3, r0
 800238c:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
    for(uint16_t i = 0; i < UART_RX_Received_NextFreeByteIndex;i++){
 8002390:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8002394:	3301      	adds	r3, #1
 8002396:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <MAVLinkParseBuffer+0x80>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d3d1      	bcc.n	800234c <MAVLinkParseBuffer+0x18>
        }
    }

}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200004b8 	.word	0x200004b8

080023b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023be:	f000 fe14 	bl	8002fea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023c2:	f000 f855 	bl	8002470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023c6:	f000 fad1 	bl	800296c <MX_GPIO_Init>
  MX_DMA_Init();
 80023ca:	f000 faa5 	bl	8002918 <MX_DMA_Init>
  MX_ADC1_Init();
 80023ce:	f000 f899 	bl	8002504 <MX_ADC1_Init>
  MX_TIM3_Init();
 80023d2:	f000 f985 	bl	80026e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023d6:	f000 fa05 	bl	80027e4 <MX_TIM4_Init>
  MX_FDCAN2_Init();
 80023da:	f000 f93b 	bl	8002654 <MX_FDCAN2_Init>
  MX_USART1_UART_Init();
 80023de:	f000 fa4f 	bl	8002880 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//SysTick->LOAD = (SystemCoreClock / 1000) - 1; //value which will be reloaded after countdown
	//SysTick->VAL = 0x0;
	//SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; //enable clock source to systick, enable systick interrupt, enable systick

  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0U);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023ea:	f002 f812 	bl	8004412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
 80023ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f2:	f002 f828 	bl	8004446 <HAL_NVIC_EnableIRQ>

  HAL_UART_Receive_IT(&huart1,(uint8_t *)&UART_RX_Byte,1);
 80023f6:	2201      	movs	r2, #1
 80023f8:	4917      	ldr	r1, [pc, #92]	; (8002458 <main+0xa0>)
 80023fa:	4818      	ldr	r0, [pc, #96]	; (800245c <main+0xa4>)
 80023fc:	f005 fac4 	bl	8007988 <HAL_UART_Receive_IT>
  // __HAL_UART_ENABLE_IT(&huart1,UART_FLAG_IDLE); //enable IDLE line interrupt for the logic to work
  USART1->CR1 |= USART_CR1_IDLEIE; // //enable IDLE line interrupt for the logic to work
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <main+0xa8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <main+0xa8>)
 8002406:	f043 0310 	orr.w	r3, r3, #16
 800240a:	6013      	str	r3, [r2, #0]

  //does not owrk??
  //USART1->ICR |= USART_ICR_IDLECF; //clear the interrupt flag (so that we wont get interrupt instantly. next interrupt will occur only after RX buffer is not empty, eg on received data

  //SET MAVLINK SYSTEM ID AND COMPONENT ID
  MAVLinkSetCurrentSystem(&mavlink_system,MAVlinkSystemID,MAVlinkComponentID);
 800240c:	220c      	movs	r2, #12
 800240e:	2101      	movs	r1, #1
 8002410:	4814      	ldr	r0, [pc, #80]	; (8002464 <main+0xac>)
 8002412:	f7ff feab 	bl	800216c <MAVLinkSetCurrentSystem>

  setLEDs(1, 1, 1);
 8002416:	2201      	movs	r2, #1
 8002418:	2101      	movs	r1, #1
 800241a:	2001      	movs	r0, #1
 800241c:	f7ff fe2c 	bl	8002078 <setLEDs>

  uint32_t lastTick = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      uint32_t tick = HAL_GetTick();
 8002424:	f000 fe46 	bl	80030b4 <HAL_GetTick>
 8002428:	6038      	str	r0, [r7, #0]

      //send Heartbeat every second
      if(tick > (lastTick + 1000)){
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d903      	bls.n	800243e <main+0x86>
          MAVlinkWriteHearbeat();
 8002436:	f7ff fead 	bl	8002194 <MAVlinkWriteHearbeat>
    	  //MAVlinkWriteLEDstatus();
          lastTick = tick;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	607b      	str	r3, [r7, #4]
      }

      //wait for incoming data
      if(FLAG_UART_line_IDLE){
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <main+0xb0>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ed      	beq.n	8002424 <main+0x6c>
          MAVLinkParseBuffer((uint8_t *)UART_RX_Received_Message);
 8002448:	4808      	ldr	r0, [pc, #32]	; (800246c <main+0xb4>)
 800244a:	f7ff ff73 	bl	8002334 <MAVLinkParseBuffer>
          FLAG_UART_line_IDLE = false;
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <main+0xb0>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
  {
 8002454:	e7e6      	b.n	8002424 <main+0x6c>
 8002456:	bf00      	nop
 8002458:	200004bb 	.word	0x200004bb
 800245c:	200001f4 	.word	0x200001f4
 8002460:	40013800 	.word	0x40013800
 8002464:	20000028 	.word	0x20000028
 8002468:	200004ba 	.word	0x200004ba
 800246c:	200003a0 	.word	0x200003a0

08002470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b094      	sub	sp, #80	; 0x50
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	f107 0318 	add.w	r3, r7, #24
 800247a:	2238      	movs	r2, #56	; 0x38
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f007 fbc4 	bl	8009c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002492:	2000      	movs	r0, #0
 8002494:	f002 ffa2 	bl	80053dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002498:	2301      	movs	r3, #1
 800249a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800249c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024a2:	2302      	movs	r3, #2
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024a6:	2303      	movs	r3, #3
 80024a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80024ae:	2328      	movs	r3, #40	; 0x28
 80024b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024b2:	2302      	movs	r3, #2
 80024b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024b6:	2302      	movs	r3, #2
 80024b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024ba:	2302      	movs	r3, #2
 80024bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024be:	f107 0318 	add.w	r3, r7, #24
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 f83e 	bl	8005544 <HAL_RCC_OscConfig>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80024ce:	f000 fad9 	bl	8002a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d2:	230f      	movs	r3, #15
 80024d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d6:	2303      	movs	r3, #3
 80024d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	2104      	movs	r1, #4
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fb42 	bl	8005b74 <HAL_RCC_ClockConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80024f6:	f000 fac5 	bl	8002a84 <Error_Handler>
  }
}
 80024fa:	bf00      	nop
 80024fc:	3750      	adds	r7, #80	; 0x50
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	; 0x30
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800250a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2220      	movs	r2, #32
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f007 fb75 	bl	8009c0c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002524:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002528:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800252a:	4b45      	ldr	r3, [pc, #276]	; (8002640 <MX_ADC1_Init+0x13c>)
 800252c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002530:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002532:	4b43      	ldr	r3, [pc, #268]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <MX_ADC1_Init+0x13c>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002544:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002546:	2201      	movs	r2, #1
 8002548:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <MX_ADC1_Init+0x13c>)
 800254c:	2204      	movs	r2, #4
 800254e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002550:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002552:	2200      	movs	r2, #0
 8002554:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002556:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002558:	2200      	movs	r2, #0
 800255a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <MX_ADC1_Init+0x13c>)
 800255e:	2204      	movs	r2, #4
 8002560:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800256a:	4b35      	ldr	r3, [pc, #212]	; (8002640 <MX_ADC1_Init+0x13c>)
 800256c:	2200      	movs	r2, #0
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002570:	4b33      	ldr	r3, [pc, #204]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002572:	2200      	movs	r2, #0
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002576:	4b32      	ldr	r3, [pc, #200]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002580:	2200      	movs	r2, #0
 8002582:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002584:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800258c:	482c      	ldr	r0, [pc, #176]	; (8002640 <MX_ADC1_Init+0x13c>)
 800258e:	f000 ff77 	bl	8003480 <HAL_ADC_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002598:	f000 fa74 	bl	8002a84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80025a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a4:	4619      	mov	r1, r3
 80025a6:	4826      	ldr	r0, [pc, #152]	; (8002640 <MX_ADC1_Init+0x13c>)
 80025a8:	f001 fd70 	bl	800408c <HAL_ADCEx_MultiModeConfigChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80025b2:	f000 fa67 	bl	8002a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <MX_ADC1_Init+0x140>)
 80025b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025ba:	2306      	movs	r3, #6
 80025bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025c2:	237f      	movs	r3, #127	; 0x7f
 80025c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025c6:	2304      	movs	r3, #4
 80025c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	4619      	mov	r1, r3
 80025d2:	481b      	ldr	r0, [pc, #108]	; (8002640 <MX_ADC1_Init+0x13c>)
 80025d4:	f001 f908 	bl	80037e8 <HAL_ADC_ConfigChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80025de:	f000 fa51 	bl	8002a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <MX_ADC1_Init+0x144>)
 80025e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025e6:	230c      	movs	r3, #12
 80025e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	4619      	mov	r1, r3
 80025ee:	4814      	ldr	r0, [pc, #80]	; (8002640 <MX_ADC1_Init+0x13c>)
 80025f0:	f001 f8fa 	bl	80037e8 <HAL_ADC_ConfigChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80025fa:	f000 fa43 	bl	8002a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <MX_ADC1_Init+0x148>)
 8002600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002602:	2312      	movs	r3, #18
 8002604:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	4619      	mov	r1, r3
 800260a:	480d      	ldr	r0, [pc, #52]	; (8002640 <MX_ADC1_Init+0x13c>)
 800260c:	f001 f8ec 	bl	80037e8 <HAL_ADC_ConfigChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002616:	f000 fa35 	bl	8002a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <MX_ADC1_Init+0x14c>)
 800261c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800261e:	2318      	movs	r3, #24
 8002620:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4806      	ldr	r0, [pc, #24]	; (8002640 <MX_ADC1_Init+0x13c>)
 8002628:	f001 f8de 	bl	80037e8 <HAL_ADC_ConfigChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8002632:	f000 fa27 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	3730      	adds	r7, #48	; 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000002c 	.word	0x2000002c
 8002644:	32601000 	.word	0x32601000
 8002648:	2e300800 	.word	0x2e300800
 800264c:	3ac04000 	.word	0x3ac04000
 8002650:	3ef08000 	.word	0x3ef08000

08002654 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 800265a:	4a20      	ldr	r2, [pc, #128]	; (80026dc <MX_FDCAN2_Init+0x88>)
 800265c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 8002660:	2200      	movs	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002664:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 800266c:	2200      	movs	r2, #0
 800266e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 8002672:	2200      	movs	r2, #0
 8002674:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 8002678:	2200      	movs	r2, #0
 800267a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 800267e:	2200      	movs	r2, #0
 8002680:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 160;
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 8002684:	22a0      	movs	r2, #160	; 0xa0
 8002686:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 800268a:	2201      	movs	r2, #1
 800268c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 5;
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 8002690:	2205      	movs	r2, #5
 8002692:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 8002696:	2202      	movs	r2, #2
 8002698:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 800269c:	2201      	movs	r2, #1
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 3;
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 80026b4:	2203      	movs	r2, #3
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80026c4:	4804      	ldr	r0, [pc, #16]	; (80026d8 <MX_FDCAN2_Init+0x84>)
 80026c6:	f002 f953 	bl	8004970 <HAL_FDCAN_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80026d0:	f000 f9d8 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200000f8 	.word	0x200000f8
 80026dc:	40006800 	.word	0x40006800

080026e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002700:	463b      	mov	r3, r7
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	615a      	str	r2, [r3, #20]
 8002710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002712:	4b32      	ldr	r3, [pc, #200]	; (80027dc <MX_TIM3_Init+0xfc>)
 8002714:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <MX_TIM3_Init+0x100>)
 8002716:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8002718:	4b30      	ldr	r3, [pc, #192]	; (80027dc <MX_TIM3_Init+0xfc>)
 800271a:	2207      	movs	r2, #7
 800271c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271e:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <MX_TIM3_Init+0xfc>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002724:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <MX_TIM3_Init+0xfc>)
 8002726:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800272a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <MX_TIM3_Init+0xfc>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002732:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <MX_TIM3_Init+0xfc>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002738:	4828      	ldr	r0, [pc, #160]	; (80027dc <MX_TIM3_Init+0xfc>)
 800273a:	f003 fe73 	bl	8006424 <HAL_TIM_Base_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002744:	f000 f99e 	bl	8002a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800274e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002752:	4619      	mov	r1, r3
 8002754:	4821      	ldr	r0, [pc, #132]	; (80027dc <MX_TIM3_Init+0xfc>)
 8002756:	f004 f9b1 	bl	8006abc <HAL_TIM_ConfigClockSource>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002760:	f000 f990 	bl	8002a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002764:	481d      	ldr	r0, [pc, #116]	; (80027dc <MX_TIM3_Init+0xfc>)
 8002766:	f003 feb4 	bl	80064d2 <HAL_TIM_PWM_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002770:	f000 f988 	bl	8002a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	4619      	mov	r1, r3
 8002782:	4816      	ldr	r0, [pc, #88]	; (80027dc <MX_TIM3_Init+0xfc>)
 8002784:	f004 ff34 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800278e:	f000 f979 	bl	8002a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002792:	2360      	movs	r3, #96	; 0x60
 8002794:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027a2:	463b      	mov	r3, r7
 80027a4:	2200      	movs	r2, #0
 80027a6:	4619      	mov	r1, r3
 80027a8:	480c      	ldr	r0, [pc, #48]	; (80027dc <MX_TIM3_Init+0xfc>)
 80027aa:	f004 f873 	bl	8006894 <HAL_TIM_PWM_ConfigChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80027b4:	f000 f966 	bl	8002a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027b8:	463b      	mov	r3, r7
 80027ba:	2204      	movs	r2, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <MX_TIM3_Init+0xfc>)
 80027c0:	f004 f868 	bl	8006894 <HAL_TIM_PWM_ConfigChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80027ca:	f000 f95b 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027ce:	4803      	ldr	r0, [pc, #12]	; (80027dc <MX_TIM3_Init+0xfc>)
 80027d0:	f000 faaa 	bl	8002d28 <HAL_TIM_MspPostInit>

}
 80027d4:	bf00      	nop
 80027d6:	3738      	adds	r7, #56	; 0x38
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	2000015c 	.word	0x2000015c
 80027e0:	40000400 	.word	0x40000400

080027e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <MX_TIM4_Init+0x94>)
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <MX_TIM4_Init+0x98>)
 8002806:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <MX_TIM4_Init+0x94>)
 800280a:	229f      	movs	r2, #159	; 0x9f
 800280c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <MX_TIM4_Init+0x94>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002814:	4b18      	ldr	r3, [pc, #96]	; (8002878 <MX_TIM4_Init+0x94>)
 8002816:	f240 32e7 	movw	r2, #999	; 0x3e7
 800281a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <MX_TIM4_Init+0x94>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <MX_TIM4_Init+0x94>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002828:	4813      	ldr	r0, [pc, #76]	; (8002878 <MX_TIM4_Init+0x94>)
 800282a:	f003 fdfb 	bl	8006424 <HAL_TIM_Base_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002834:	f000 f926 	bl	8002a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	4619      	mov	r1, r3
 8002844:	480c      	ldr	r0, [pc, #48]	; (8002878 <MX_TIM4_Init+0x94>)
 8002846:	f004 f939 	bl	8006abc <HAL_TIM_ConfigClockSource>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002850:	f000 f918 	bl	8002a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	4619      	mov	r1, r3
 8002860:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_TIM4_Init+0x94>)
 8002862:	f004 fec5 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800286c:	f000 f90a 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200001a8 	.word	0x200001a8
 800287c:	40000800 	.word	0x40000800

08002880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <MX_USART1_UART_Init+0x90>)
 8002886:	4a23      	ldr	r2, [pc, #140]	; (8002914 <MX_USART1_UART_Init+0x94>)
 8002888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <MX_USART1_UART_Init+0x90>)
 800288c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <MX_USART1_UART_Init+0x90>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <MX_USART1_UART_Init+0x90>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028c8:	4811      	ldr	r0, [pc, #68]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028ca:	f004 ff65 	bl	8007798 <HAL_UART_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028d4:	f000 f8d6 	bl	8002a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d8:	2100      	movs	r1, #0
 80028da:	480d      	ldr	r0, [pc, #52]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028dc:	f007 f8bb 	bl	8009a56 <HAL_UARTEx_SetTxFifoThreshold>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028e6:	f000 f8cd 	bl	8002a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ea:	2100      	movs	r1, #0
 80028ec:	4808      	ldr	r0, [pc, #32]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028ee:	f007 f8f0 	bl	8009ad2 <HAL_UARTEx_SetRxFifoThreshold>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028f8:	f000 f8c4 	bl	8002a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <MX_USART1_UART_Init+0x90>)
 80028fe:	f007 f871 	bl	80099e4 <HAL_UARTEx_DisableFifoMode>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002908:	f000 f8bc 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200001f4 	.word	0x200001f4
 8002914:	40013800 	.word	0x40013800

08002918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <MX_DMA_Init+0x50>)
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	4a11      	ldr	r2, [pc, #68]	; (8002968 <MX_DMA_Init+0x50>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6493      	str	r3, [r2, #72]	; 0x48
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <MX_DMA_Init+0x50>)
 800292c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <MX_DMA_Init+0x50>)
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <MX_DMA_Init+0x50>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6493      	str	r3, [r2, #72]	; 0x48
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <MX_DMA_Init+0x50>)
 8002944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	200b      	movs	r0, #11
 8002954:	f001 fd5d 	bl	8004412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002958:	200b      	movs	r0, #11
 800295a:	f001 fd74 	bl	8004446 <HAL_NVIC_EnableIRQ>

}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000

0800296c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002982:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <MX_GPIO_Init+0xc4>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	4a2a      	ldr	r2, [pc, #168]	; (8002a30 <MX_GPIO_Init+0xc4>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800298e:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <MX_GPIO_Init+0xc4>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800299a:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <MX_GPIO_Init+0xc4>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <MX_GPIO_Init+0xc4>)
 80029a0:	f043 0320 	orr.w	r3, r3, #32
 80029a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <MX_GPIO_Init+0xc4>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <MX_GPIO_Init+0xc4>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <MX_GPIO_Init+0xc4>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <MX_GPIO_Init+0xc4>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <MX_GPIO_Init+0xc4>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <MX_GPIO_Init+0xc4>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <MX_GPIO_Init+0xc4>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ORANGE_Pin|LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80029e8:	4812      	ldr	r0, [pc, #72]	; (8002a34 <MX_GPIO_Init+0xc8>)
 80029ea:	f002 fcc5 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_ORANGE_Pin LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_ORANGE_Pin|LED_RED_Pin|LED_GREEN_Pin;
 80029ee:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80029f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f4:	2301      	movs	r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	480b      	ldr	r0, [pc, #44]	; (8002a34 <MX_GPIO_Init+0xc8>)
 8002a08:	f002 fb1c 	bl	8005044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4804      	ldr	r0, [pc, #16]	; (8002a34 <MX_GPIO_Init+0xc8>)
 8002a22:	f002 fb0f 	bl	8005044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a26:	bf00      	nop
 8002a28:	3728      	adds	r7, #40	; 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	48000800 	.word	0x48000800

08002a38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


//when the uart finishes recieving all data = one byte
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

    //set the recived byte to the buffer and increase the index
    UART_RX_Buffer[UART_RX_Buffer_NextFreeByteIndex] = UART_RX_Byte;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_UART_RxCpltCallback+0x3c>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_UART_RxCpltCallback+0x40>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b2d9      	uxtb	r1, r3
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_UART_RxCpltCallback+0x44>)
 8002a50:	5499      	strb	r1, [r3, r2]
    UART_RX_Buffer_NextFreeByteIndex++;
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_UART_RxCpltCallback+0x3c>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_UART_RxCpltCallback+0x3c>)
 8002a5e:	801a      	strh	r2, [r3, #0]

    //restart interrupt
    HAL_UART_Receive_IT(&huart1,(uint8_t *)&UART_RX_Byte,1);
 8002a60:	2201      	movs	r2, #1
 8002a62:	4905      	ldr	r1, [pc, #20]	; (8002a78 <HAL_UART_RxCpltCallback+0x40>)
 8002a64:	4806      	ldr	r0, [pc, #24]	; (8002a80 <HAL_UART_RxCpltCallback+0x48>)
 8002a66:	f004 ff8f 	bl	8007988 <HAL_UART_Receive_IT>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000039c 	.word	0x2000039c
 8002a78:	200004bb 	.word	0x200004bb
 8002a7c:	20000284 	.word	0x20000284
 8002a80:	200001f4 	.word	0x200001f4

08002a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a88:	b672      	cpsid	i
}
 8002a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <Error_Handler+0x8>
	...

08002a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_MspInit+0x44>)
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <HAL_MspInit+0x44>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_MspInit+0x44>)
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_MspInit+0x44>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_MspInit+0x44>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_MspInit+0x44>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ac6:	f002 fd2d 	bl	8005524 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b09e      	sub	sp, #120	; 0x78
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	2250      	movs	r2, #80	; 0x50
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f007 f887 	bl	8009c0c <memset>
  if(hadc->Instance==ADC1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b06:	d15f      	bne.n	8002bc8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002b0e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002b12:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fa47 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002b24:	f7ff ffae 	bl	8002a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_ADC_MspInit+0xf8>)
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2c:	4a28      	ldr	r2, [pc, #160]	; (8002bd0 <HAL_ADC_MspInit+0xf8>)
 8002b2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_ADC_MspInit+0xf8>)
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_ADC_MspInit+0xf8>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <HAL_ADC_MspInit+0xf8>)
 8002b46:	f043 0302 	orr.w	r3, r3, #2
 8002b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4c:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_ADC_MspInit+0xf8>)
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002b58:	f641 0303 	movw	r3, #6147	; 0x1803
 8002b5c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4819      	ldr	r0, [pc, #100]	; (8002bd4 <HAL_ADC_MspInit+0xfc>)
 8002b6e:	f002 fa69 	bl	8005044 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002b74:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <HAL_ADC_MspInit+0x104>)
 8002b76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002b7a:	2205      	movs	r2, #5
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b9e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bac:	480a      	ldr	r0, [pc, #40]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002bae:	f001 fc65 	bl	800447c <HAL_DMA_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002bb8:	f7ff ff64 	bl	8002a84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a06      	ldr	r2, [pc, #24]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <HAL_ADC_MspInit+0x100>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bc8:	bf00      	nop
 8002bca:	3778      	adds	r7, #120	; 0x78
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	48000400 	.word	0x48000400
 8002bd8:	20000098 	.word	0x20000098
 8002bdc:	40020008 	.word	0x40020008

08002be0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b09e      	sub	sp, #120	; 0x78
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	2250      	movs	r2, #80	; 0x50
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f007 f803 	bl	8009c0c <memset>
  if(hfdcan->Instance==FDCAN2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a23      	ldr	r2, [pc, #140]	; (8002c98 <HAL_FDCAN_MspInit+0xb8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d13f      	bne.n	8002c90 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c14:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c1a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 f9c3 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002c2c:	f7ff ff2a 	bl	8002a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_FDCAN_MspInit+0xbc>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <HAL_FDCAN_MspInit+0xbc>)
 8002c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_FDCAN_MspInit+0xbc>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <HAL_FDCAN_MspInit+0xbc>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <HAL_FDCAN_MspInit+0xbc>)
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_FDCAN_MspInit+0xbc>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c60:	2360      	movs	r3, #96	; 0x60
 8002c62:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002c70:	2309      	movs	r3, #9
 8002c72:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4809      	ldr	r0, [pc, #36]	; (8002ca0 <HAL_FDCAN_MspInit+0xc0>)
 8002c7c:	f002 f9e2 	bl	8005044 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002c80:	2200      	movs	r2, #0
 8002c82:	2100      	movs	r1, #0
 8002c84:	2056      	movs	r0, #86	; 0x56
 8002c86:	f001 fbc4 	bl	8004412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002c8a:	2056      	movs	r0, #86	; 0x56
 8002c8c:	f001 fbdb 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002c90:	bf00      	nop
 8002c92:	3778      	adds	r7, #120	; 0x78
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40006800 	.word	0x40006800
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	48000400 	.word	0x48000400

08002ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1a      	ldr	r2, [pc, #104]	; (8002d1c <HAL_TIM_Base_MspInit+0x78>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d114      	bne.n	8002ce0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_TIM_Base_MspInit+0x7c>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <HAL_TIM_Base_MspInit+0x7c>)
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_TIM_Base_MspInit+0x7c>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	201d      	movs	r0, #29
 8002cd4:	f001 fb9d 	bl	8004412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cd8:	201d      	movs	r0, #29
 8002cda:	f001 fbb4 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002cde:	e018      	b.n	8002d12 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0f      	ldr	r2, [pc, #60]	; (8002d24 <HAL_TIM_Base_MspInit+0x80>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d113      	bne.n	8002d12 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_TIM_Base_MspInit+0x7c>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <HAL_TIM_Base_MspInit+0x7c>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_TIM_Base_MspInit+0x7c>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	201e      	movs	r0, #30
 8002d08:	f001 fb83 	bl	8004412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d0c:	201e      	movs	r0, #30
 8002d0e:	f001 fb9a 	bl	8004446 <HAL_NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40000800 	.word	0x40000800

08002d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <HAL_TIM_MspPostInit+0x64>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d11b      	bne.n	8002d82 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_TIM_MspPostInit+0x68>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_TIM_MspPostInit+0x68>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_TIM_MspPostInit+0x68>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d62:	23c0      	movs	r3, #192	; 0xc0
 8002d64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d72:	2302      	movs	r3, #2
 8002d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4805      	ldr	r0, [pc, #20]	; (8002d94 <HAL_TIM_MspPostInit+0x6c>)
 8002d7e:	f002 f961 	bl	8005044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d82:	bf00      	nop
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	40021000 	.word	0x40021000
 8002d94:	48000800 	.word	0x48000800

08002d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b09e      	sub	sp, #120	; 0x78
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	2250      	movs	r2, #80	; 0x50
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f006 ff27 	bl	8009c0c <memset>
  if(huart->Instance==USART1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <HAL_UART_MspInit+0xb4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d13d      	bne.n	8002e44 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 f8e9 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002de0:	f7ff fe50 	bl	8002a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002de4:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <HAL_UART_MspInit+0xb8>)
 8002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_UART_MspInit+0xb8>)
 8002dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dee:	6613      	str	r3, [r2, #96]	; 0x60
 8002df0:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <HAL_UART_MspInit+0xb8>)
 8002df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <HAL_UART_MspInit+0xb8>)
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <HAL_UART_MspInit+0xb8>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_UART_MspInit+0xb8>)
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e14:	2330      	movs	r3, #48	; 0x30
 8002e16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	2300      	movs	r3, #0
 8002e22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e24:	2307      	movs	r3, #7
 8002e26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4809      	ldr	r0, [pc, #36]	; (8002e54 <HAL_UART_MspInit+0xbc>)
 8002e30:	f002 f908 	bl	8005044 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	2025      	movs	r0, #37	; 0x25
 8002e3a:	f001 faea 	bl	8004412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e3e:	2025      	movs	r0, #37	; 0x25
 8002e40:	f001 fb01 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3778      	adds	r7, #120	; 0x78
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40013800 	.word	0x40013800
 8002e50:	40021000 	.word	0x40021000
 8002e54:	48000800 	.word	0x48000800

08002e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e5c:	e7fe      	b.n	8002e5c <NMI_Handler+0x4>

08002e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <HardFault_Handler+0x4>

08002e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <MemManage_Handler+0x4>

08002e6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <BusFault_Handler+0x4>

08002e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <UsageFault_Handler+0x4>

08002e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea4:	f000 f8f4 	bl	8003090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <DMA1_Channel1_IRQHandler+0x10>)
 8002eb2:	f001 fc4b 	bl	800474c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000098 	.word	0x20000098

08002ec0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <TIM3_IRQHandler+0x10>)
 8002ec6:	f003 fb65 	bl	8006594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	2000015c 	.word	0x2000015c

08002ed4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <TIM4_IRQHandler+0x10>)
 8002eda:	f003 fb5b 	bl	8006594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200001a8 	.word	0x200001a8

08002ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

    //wait fro the line to go idle
    if(USART1->ISR & UART_FLAG_IDLE){
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <USART1_IRQHandler+0x5c>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <USART1_IRQHandler+0x52>
        USART1->ICR |= USART_ICR_IDLECF; //clear the interrupt flag
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <USART1_IRQHandler+0x5c>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <USART1_IRQHandler+0x5c>)
 8002efe:	f043 0310 	orr.w	r3, r3, #16
 8002f02:	6213      	str	r3, [r2, #32]

        //signalize that the received data can be processed
        FLAG_UART_line_IDLE = 1;
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <USART1_IRQHandler+0x60>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]

        //copy the data from the buffer to the parsing buffer
        memcpy((uint8_t *)&UART_RX_Received_Message,(uint8_t *)&UART_RX_Buffer,UART_RX_Buffer_NextFreeByteIndex);
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <USART1_IRQHandler+0x64>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	490f      	ldr	r1, [pc, #60]	; (8002f50 <USART1_IRQHandler+0x68>)
 8002f14:	480f      	ldr	r0, [pc, #60]	; (8002f54 <USART1_IRQHandler+0x6c>)
 8002f16:	f006 fea5 	bl	8009c64 <memcpy>

        UART_RX_Received_NextFreeByteIndex = UART_RX_Buffer_NextFreeByteIndex;
 8002f1a:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <USART1_IRQHandler+0x64>)
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <USART1_IRQHandler+0x70>)
 8002f22:	801a      	strh	r2, [r3, #0]


        // set the RX buffer data to 0 and reset the position
        memset((uint8_t *)&UART_RX_Buffer,(uint8_t)0,UART_RX_Buffer_NextFreeByteIndex);
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <USART1_IRQHandler+0x64>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4808      	ldr	r0, [pc, #32]	; (8002f50 <USART1_IRQHandler+0x68>)
 8002f30:	f006 fe6c 	bl	8009c0c <memset>
        UART_RX_Buffer_NextFreeByteIndex = 0;
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <USART1_IRQHandler+0x64>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	801a      	strh	r2, [r3, #0]
    }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f3a:	4808      	ldr	r0, [pc, #32]	; (8002f5c <USART1_IRQHandler+0x74>)
 8002f3c:	f004 fd7a 	bl	8007a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40013800 	.word	0x40013800
 8002f48:	200004ba 	.word	0x200004ba
 8002f4c:	2000039c 	.word	0x2000039c
 8002f50:	20000284 	.word	0x20000284
 8002f54:	200003a0 	.word	0x200003a0
 8002f58:	200004b8 	.word	0x200004b8
 8002f5c:	200001f4 	.word	0x200001f4

08002f60 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <FDCAN2_IT0_IRQHandler+0x10>)
 8002f66:	f001 fe5d 	bl	8004c24 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200000f8 	.word	0x200000f8

08002f74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <SystemInit+0x20>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	4a05      	ldr	r2, [pc, #20]	; (8002f94 <SystemInit+0x20>)
 8002f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f9c:	480d      	ldr	r0, [pc, #52]	; (8002fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f9e:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fa0:	4a0e      	ldr	r2, [pc, #56]	; (8002fdc <LoopForever+0xe>)
  movs r3, #0
 8002fa2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002fa4:	e002      	b.n	8002fac <LoopCopyDataInit>

08002fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002faa:	3304      	adds	r3, #4

08002fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb0:	d3f9      	bcc.n	8002fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fb4:	4c0b      	ldr	r4, [pc, #44]	; (8002fe4 <LoopForever+0x16>)
  movs r3, #0
 8002fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb8:	e001      	b.n	8002fbe <LoopFillZerobss>

08002fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fbc:	3204      	adds	r2, #4

08002fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc0:	d3fb      	bcc.n	8002fba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fc2:	f7ff ffd7 	bl	8002f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fc6:	f006 fe29 	bl	8009c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fca:	f7ff f9f5 	bl	80023b8 <main>

08002fce <LoopForever>:

LoopForever:
    b LoopForever
 8002fce:	e7fe      	b.n	8002fce <LoopForever>
  ldr   r0, =_estack
 8002fd0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002fdc:	08009e54 	.word	0x08009e54
  ldr r2, =_sbss
 8002fe0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002fe4:	200009ac 	.word	0x200009ac

08002fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fe8:	e7fe      	b.n	8002fe8 <ADC1_2_IRQHandler>

08002fea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	f001 fa01 	bl	80043fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ffa:	200f      	movs	r0, #15
 8002ffc:	f000 f80e 	bl	800301c <HAL_InitTick>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	71fb      	strb	r3, [r7, #7]
 800300a:	e001      	b.n	8003010 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800300c:	f7ff fd40 	bl	8002a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003010:	79fb      	ldrb	r3, [r7, #7]

}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003028:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HAL_InitTick+0x68>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d022      	beq.n	8003076 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_InitTick+0x6c>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_InitTick+0x68>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800303c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	4618      	mov	r0, r3
 8003046:	f001 fa0c 	bl	8004462 <HAL_SYSTICK_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10f      	bne.n	8003070 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b0f      	cmp	r3, #15
 8003054:	d809      	bhi.n	800306a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003056:	2200      	movs	r2, #0
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800305e:	f001 f9d8 	bl	8004412 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <HAL_InitTick+0x70>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	e007      	b.n	800307a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	e004      	b.n	800307a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e001      	b.n	800307a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000008 	.word	0x20000008
 8003088:	20000000 	.word	0x20000000
 800308c:	20000004 	.word	0x20000004

08003090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_IncTick+0x1c>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_IncTick+0x20>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4413      	add	r3, r2
 800309e:	4a03      	ldr	r2, [pc, #12]	; (80030ac <HAL_IncTick+0x1c>)
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	200009a8 	.word	0x200009a8
 80030b0:	20000008 	.word	0x20000008

080030b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_GetTick+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	200009a8 	.word	0x200009a8

080030cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	609a      	str	r2, [r3, #8]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <LL_ADC_SetOffset+0x44>)
 8003156:	4013      	ands	r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	4313      	orrs	r3, r2
 8003164:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	03fff000 	.word	0x03fff000

0800317c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3360      	adds	r3, #96	; 0x60
 800318a:	461a      	mov	r2, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3360      	adds	r3, #96	; 0x60
 80031b8:	461a      	mov	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80031de:	b480      	push	{r7}
 80031e0:	b087      	sub	sp, #28
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3360      	adds	r3, #96	; 0x60
 80031ee:	461a      	mov	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	431a      	orrs	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3360      	adds	r3, #96	; 0x60
 8003224:	461a      	mov	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	431a      	orrs	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	615a      	str	r2, [r3, #20]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3330      	adds	r3, #48	; 0x30
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	4413      	add	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	211f      	movs	r1, #31
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	401a      	ands	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0e9b      	lsrs	r3, r3, #26
 80032a8:	f003 011f 	and.w	r1, r3, #31
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	431a      	orrs	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3314      	adds	r3, #20
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	0e5b      	lsrs	r3, r3, #25
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	4413      	add	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	0d1b      	lsrs	r3, r3, #20
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2107      	movs	r1, #7
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	401a      	ands	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	0d1b      	lsrs	r3, r3, #20
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	431a      	orrs	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a0f      	ldr	r2, [pc, #60]	; (800336c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10a      	bne.n	800334a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003348:	e00a      	b.n	8003360 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003356:	43db      	mvns	r3, r3
 8003358:	401a      	ands	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	407f0000 	.word	0x407f0000

08003370 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003380:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6093      	str	r3, [r2, #8]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a8:	d101      	bne.n	80033ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80033cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033f8:	d101      	bne.n	80033fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <LL_ADC_IsEnabled+0x18>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <LL_ADC_IsEnabled+0x1a>
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d101      	bne.n	800344a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d101      	bne.n	8003470 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1a1      	b.n	80037de <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff fb15 	bl	8002ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff67 	bl	8003394 <LL_ADC_IsDeepPowerDownEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff4d 	bl	8003370 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff82 	bl	80033e4 <LL_ADC_IsInternalRegulatorEnabled>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d115      	bne.n	8003512 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff66 	bl	80033bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034f0:	4b9a      	ldr	r3, [pc, #616]	; (800375c <HAL_ADC_Init+0x2dc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	4a9a      	ldr	r2, [pc, #616]	; (8003760 <HAL_ADC_Init+0x2e0>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	099b      	lsrs	r3, r3, #6
 80034fe:	3301      	adds	r3, #1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003504:	e002      	b.n	800350c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3b01      	subs	r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f9      	bne.n	8003506 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ff64 	bl	80033e4 <LL_ADC_IsInternalRegulatorEnabled>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10d      	bne.n	800353e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	f043 0210 	orr.w	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	f043 0201 	orr.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ff75 	bl	8003432 <LL_ADC_REG_IsConversionOngoing>
 8003548:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 813a 	bne.w	80037cc <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 8136 	bne.w	80037cc <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003568:	f043 0202 	orr.w	r2, r3, #2
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff49 	bl	800340c <LL_ADC_IsEnabled>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d137      	bne.n	80035f0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003588:	d004      	beq.n	8003594 <HAL_ADC_Init+0x114>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a75      	ldr	r2, [pc, #468]	; (8003764 <HAL_ADC_Init+0x2e4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d10f      	bne.n	80035b4 <HAL_ADC_Init+0x134>
 8003594:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003598:	f7ff ff38 	bl	800340c <LL_ADC_IsEnabled>
 800359c:	4604      	mov	r4, r0
 800359e:	4871      	ldr	r0, [pc, #452]	; (8003764 <HAL_ADC_Init+0x2e4>)
 80035a0:	f7ff ff34 	bl	800340c <LL_ADC_IsEnabled>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4323      	orrs	r3, r4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e008      	b.n	80035c6 <HAL_ADC_Init+0x146>
 80035b4:	486c      	ldr	r0, [pc, #432]	; (8003768 <HAL_ADC_Init+0x2e8>)
 80035b6:	f7ff ff29 	bl	800340c <LL_ADC_IsEnabled>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d012      	beq.n	80035f0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d2:	d004      	beq.n	80035de <HAL_ADC_Init+0x15e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a62      	ldr	r2, [pc, #392]	; (8003764 <HAL_ADC_Init+0x2e4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_Init+0x162>
 80035de:	4a63      	ldr	r2, [pc, #396]	; (800376c <HAL_ADC_Init+0x2ec>)
 80035e0:	e000      	b.n	80035e4 <HAL_ADC_Init+0x164>
 80035e2:	4a63      	ldr	r2, [pc, #396]	; (8003770 <HAL_ADC_Init+0x2f0>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f7ff fd6e 	bl	80030cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7f5b      	ldrb	r3, [r3, #29]
 80035f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003600:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003606:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800360e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800361a:	2b01      	cmp	r3, #1
 800361c:	d106      	bne.n	800362c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	045b      	lsls	r3, r3, #17
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d009      	beq.n	8003648 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	4b49      	ldr	r3, [pc, #292]	; (8003774 <HAL_ADC_Init+0x2f4>)
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	430b      	orrs	r3, r1
 800365a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fedb 	bl	8003432 <LL_ADC_REG_IsConversionOngoing>
 800367c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fee8 	bl	8003458 <LL_ADC_INJ_IsConversionOngoing>
 8003688:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d17b      	bne.n	8003788 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d178      	bne.n	8003788 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800369a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036b2:	f023 0302 	bic.w	r3, r3, #2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	69b9      	ldr	r1, [r7, #24]
 80036bc:	430b      	orrs	r3, r1
 80036be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6911      	ldr	r1, [r2, #16]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	430b      	orrs	r3, r1
 80036f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80036f6:	e013      	b.n	8003720 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003706:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800371c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003726:	2b01      	cmp	r3, #1
 8003728:	d126      	bne.n	8003778 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003746:	4311      	orrs	r1, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800374c:	430a      	orrs	r2, r1
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	611a      	str	r2, [r3, #16]
 800375a:	e015      	b.n	8003788 <HAL_ADC_Init+0x308>
 800375c:	20000000 	.word	0x20000000
 8003760:	053e2d63 	.word	0x053e2d63
 8003764:	50000100 	.word	0x50000100
 8003768:	50000400 	.word	0x50000400
 800376c:	50000300 	.word	0x50000300
 8003770:	50000700 	.word	0x50000700
 8003774:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10c      	bne.n	80037aa <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f023 010f 	bic.w	r1, r3, #15
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	1e5a      	subs	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
 80037a8:	e007      	b.n	80037ba <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 020f 	bic.w	r2, r2, #15
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80037ca:	e007      	b.n	80037dc <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	f043 0210 	orr.w	r2, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd90      	pop	{r4, r7, pc}
 80037e6:	bf00      	nop

080037e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b0b6      	sub	sp, #216	; 0xd8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003802:	2b01      	cmp	r3, #1
 8003804:	d102      	bne.n	800380c <HAL_ADC_ConfigChannel+0x24>
 8003806:	2302      	movs	r3, #2
 8003808:	f000 bc04 	b.w	8004014 <HAL_ADC_ConfigChannel+0x82c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fe0a 	bl	8003432 <LL_ADC_REG_IsConversionOngoing>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 83e8 	bne.w	8003ff6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	f7ff fd1c 	bl	8003270 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fdf8 	bl	8003432 <LL_ADC_REG_IsConversionOngoing>
 8003842:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fe04 	bl	8003458 <LL_ADC_INJ_IsConversionOngoing>
 8003850:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003854:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003858:	2b00      	cmp	r3, #0
 800385a:	f040 81d9 	bne.w	8003c10 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800385e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003862:	2b00      	cmp	r3, #0
 8003864:	f040 81d4 	bne.w	8003c10 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003870:	d10f      	bne.n	8003892 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	4619      	mov	r1, r3
 800387e:	f7ff fd23 	bl	80032c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fcdd 	bl	800324a <LL_ADC_SetSamplingTimeCommonConfig>
 8003890:	e00e      	b.n	80038b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	461a      	mov	r2, r3
 80038a0:	f7ff fd12 	bl	80032c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fccd 	bl	800324a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	08db      	lsrs	r3, r3, #3
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d022      	beq.n	8003918 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6919      	ldr	r1, [r3, #16]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038e2:	f7ff fc27 	bl	8003134 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6919      	ldr	r1, [r3, #16]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f7ff fc73 	bl	80031de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6919      	ldr	r1, [r3, #16]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	7f1b      	ldrb	r3, [r3, #28]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d102      	bne.n	800390e <HAL_ADC_ConfigChannel+0x126>
 8003908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390c:	e000      	b.n	8003910 <HAL_ADC_ConfigChannel+0x128>
 800390e:	2300      	movs	r3, #0
 8003910:	461a      	mov	r2, r3
 8003912:	f7ff fc7f 	bl	8003214 <LL_ADC_SetOffsetSaturation>
 8003916:	e17b      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fc2c 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003924:	4603      	mov	r3, r0
 8003926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x15c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fc21 	bl	800317c <LL_ADC_GetOffsetChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	0e9b      	lsrs	r3, r3, #26
 800393e:	f003 021f 	and.w	r2, r3, #31
 8003942:	e01e      	b.n	8003982 <HAL_ADC_ConfigChannel+0x19a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fc16 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003950:	4603      	mov	r3, r0
 8003952:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800396a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003972:	2320      	movs	r3, #32
 8003974:	e004      	b.n	8003980 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	2b00      	cmp	r3, #0
 800398c:	d105      	bne.n	800399a <HAL_ADC_ConfigChannel+0x1b2>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	0e9b      	lsrs	r3, r3, #26
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	e018      	b.n	80039cc <HAL_ADC_ConfigChannel+0x1e4>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80039ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80039b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e004      	b.n	80039cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80039c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d106      	bne.n	80039de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fbe5 	bl	80031a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fbc9 	bl	800317c <LL_ADC_GetOffsetChannel>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x222>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fbbe 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003a00:	4603      	mov	r3, r0
 8003a02:	0e9b      	lsrs	r3, r3, #26
 8003a04:	f003 021f 	and.w	r2, r3, #31
 8003a08:	e01e      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x260>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fbb3 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003a28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	e004      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x278>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0e9b      	lsrs	r3, r3, #26
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	e018      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x2aa>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003a84:	2320      	movs	r3, #32
 8003a86:	e004      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d106      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fb82 	bl	80031a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fb66 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x2e8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2102      	movs	r1, #2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fb5b 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	0e9b      	lsrs	r3, r3, #26
 8003aca:	f003 021f 	and.w	r2, r3, #31
 8003ace:	e01e      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x326>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fb50 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003afe:	2320      	movs	r3, #32
 8003b00:	e004      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x33e>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	0e9b      	lsrs	r3, r3, #26
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	e016      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x36c>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003b38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003b46:	2320      	movs	r3, #32
 8003b48:	e004      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d106      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2102      	movs	r1, #2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fb21 	bl	80031a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2103      	movs	r1, #3
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fb05 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x3aa>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2103      	movs	r1, #3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fafa 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	0e9b      	lsrs	r3, r3, #26
 8003b8c:	f003 021f 	and.w	r2, r3, #31
 8003b90:	e017      	b.n	8003bc2 <HAL_ADC_ConfigChannel+0x3da>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2103      	movs	r1, #3
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff faef 	bl	800317c <LL_ADC_GetOffsetChannel>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	e003      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x3f2>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	0e9b      	lsrs	r3, r3, #26
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	e011      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x416>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003be2:	fa93 f3a3 	rbit	r3, r3
 8003be6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	e003      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d106      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	2103      	movs	r1, #3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff facc 	bl	80031a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fbf9 	bl	800340c <LL_ADC_IsEnabled>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 813d 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7ff fb76 	bl	8003320 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4aa2      	ldr	r2, [pc, #648]	; (8003ec4 <HAL_ADC_ConfigChannel+0x6dc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	f040 812e 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10b      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x480>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	0e9b      	lsrs	r3, r3, #26
 8003c56:	3301      	adds	r3, #1
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2b09      	cmp	r3, #9
 8003c5e:	bf94      	ite	ls
 8003c60:	2301      	movls	r3, #1
 8003c62:	2300      	movhi	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e019      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x4b4>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c78:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003c80:	2320      	movs	r3, #32
 8003c82:	e003      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	bf94      	ite	ls
 8003c96:	2301      	movls	r3, #1
 8003c98:	2300      	movhi	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d079      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d107      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x4d4>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0e9b      	lsrs	r3, r3, #26
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	069b      	lsls	r3, r3, #26
 8003cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cba:	e015      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x500>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	e003      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cda:	fab3 f383 	clz	r3, r3
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	069b      	lsls	r3, r3, #26
 8003ce4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x520>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	0e9b      	lsrs	r3, r3, #26
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	e017      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x550>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e003      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2101      	movs	r1, #1
 8003d34:	fa01 f303 	lsl.w	r3, r1, r3
 8003d38:	ea42 0103 	orr.w	r1, r2, r3
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x576>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	0e9b      	lsrs	r3, r3, #26
 8003d4e:	3301      	adds	r3, #1
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	4613      	mov	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	4413      	add	r3, r2
 8003d5a:	051b      	lsls	r3, r3, #20
 8003d5c:	e018      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x5a8>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003d76:	2320      	movs	r3, #32
 8003d78:	e003      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	f003 021f 	and.w	r2, r3, #31
 8003d88:	4613      	mov	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d90:	430b      	orrs	r3, r1
 8003d92:	e07e      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x5c8>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	3301      	adds	r3, #1
 8003da8:	069b      	lsls	r3, r3, #26
 8003daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dae:	e015      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x5f4>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003dc8:	2320      	movs	r3, #32
 8003dca:	e003      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	069b      	lsls	r3, r3, #26
 8003dd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x614>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	3301      	adds	r3, #1
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2101      	movs	r1, #1
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	e017      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x644>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	61fb      	str	r3, [r7, #28]
  return result;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003e14:	2320      	movs	r3, #32
 8003e16:	e003      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2101      	movs	r1, #1
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	ea42 0103 	orr.w	r1, r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10d      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x670>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0e9b      	lsrs	r3, r3, #26
 8003e42:	3301      	adds	r3, #1
 8003e44:	f003 021f 	and.w	r2, r3, #31
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3b1e      	subs	r3, #30
 8003e50:	051b      	lsls	r3, r3, #20
 8003e52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e56:	e01b      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x6a8>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	613b      	str	r3, [r7, #16]
  return result;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003e70:	2320      	movs	r3, #32
 8003e72:	e003      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	fab3 f383 	clz	r3, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	f003 021f 	and.w	r2, r3, #31
 8003e82:	4613      	mov	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	3b1e      	subs	r3, #30
 8003e8a:	051b      	lsls	r3, r3, #20
 8003e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e90:	430b      	orrs	r3, r1
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	4619      	mov	r1, r3
 8003e98:	f7ff fa16 	bl	80032c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80af 	beq.w	8004008 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb2:	d004      	beq.n	8003ebe <HAL_ADC_ConfigChannel+0x6d6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <HAL_ADC_ConfigChannel+0x6e4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x6ec>
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <HAL_ADC_ConfigChannel+0x6e8>)
 8003ec0:	e009      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x6ee>
 8003ec2:	bf00      	nop
 8003ec4:	407f0000 	.word	0x407f0000
 8003ec8:	80080000 	.word	0x80080000
 8003ecc:	50000100 	.word	0x50000100
 8003ed0:	50000300 	.word	0x50000300
 8003ed4:	4b51      	ldr	r3, [pc, #324]	; (800401c <HAL_ADC_ConfigChannel+0x834>)
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff f91e 	bl	8003118 <LL_ADC_GetCommonPathInternalCh>
 8003edc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a4e      	ldr	r2, [pc, #312]	; (8004020 <HAL_ADC_ConfigChannel+0x838>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_ADC_ConfigChannel+0x70c>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4d      	ldr	r2, [pc, #308]	; (8004024 <HAL_ADC_ConfigChannel+0x83c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d134      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d12e      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f08:	d17e      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f12:	d004      	beq.n	8003f1e <HAL_ADC_ConfigChannel+0x736>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a43      	ldr	r2, [pc, #268]	; (8004028 <HAL_ADC_ConfigChannel+0x840>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x73a>
 8003f1e:	4a43      	ldr	r2, [pc, #268]	; (800402c <HAL_ADC_ConfigChannel+0x844>)
 8003f20:	e000      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x73c>
 8003f22:	4a3e      	ldr	r2, [pc, #248]	; (800401c <HAL_ADC_ConfigChannel+0x834>)
 8003f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7ff f8df 	bl	80030f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_ADC_ConfigChannel+0x848>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	4a3e      	ldr	r2, [pc, #248]	; (8004034 <HAL_ADC_ConfigChannel+0x84c>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f4e:	e002      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f9      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f5c:	e054      	b.n	8004008 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a35      	ldr	r2, [pc, #212]	; (8004038 <HAL_ADC_ConfigChannel+0x850>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d120      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x7c2>
 8003f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d11a      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f7c:	d144      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f86:	d004      	beq.n	8003f92 <HAL_ADC_ConfigChannel+0x7aa>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a26      	ldr	r2, [pc, #152]	; (8004028 <HAL_ADC_ConfigChannel+0x840>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x7ae>
 8003f92:	4a26      	ldr	r2, [pc, #152]	; (800402c <HAL_ADC_ConfigChannel+0x844>)
 8003f94:	e000      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x7b0>
 8003f96:	4a21      	ldr	r2, [pc, #132]	; (800401c <HAL_ADC_ConfigChannel+0x834>)
 8003f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f7ff f8a5 	bl	80030f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fa8:	e02e      	b.n	8004008 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a23      	ldr	r2, [pc, #140]	; (800403c <HAL_ADC_ConfigChannel+0x854>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d129      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d123      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_ADC_ConfigChannel+0x840>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01e      	beq.n	8004008 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fd2:	d004      	beq.n	8003fde <HAL_ADC_ConfigChannel+0x7f6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a13      	ldr	r2, [pc, #76]	; (8004028 <HAL_ADC_ConfigChannel+0x840>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x7fa>
 8003fde:	4a13      	ldr	r2, [pc, #76]	; (800402c <HAL_ADC_ConfigChannel+0x844>)
 8003fe0:	e000      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x7fc>
 8003fe2:	4a0e      	ldr	r2, [pc, #56]	; (800401c <HAL_ADC_ConfigChannel+0x834>)
 8003fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f7ff f87f 	bl	80030f2 <LL_ADC_SetCommonPathInternalCh>
 8003ff4:	e008      	b.n	8004008 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004010:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004014:	4618      	mov	r0, r3
 8004016:	37d8      	adds	r7, #216	; 0xd8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	50000700 	.word	0x50000700
 8004020:	c3210000 	.word	0xc3210000
 8004024:	90c00010 	.word	0x90c00010
 8004028:	50000100 	.word	0x50000100
 800402c:	50000300 	.word	0x50000300
 8004030:	20000000 	.word	0x20000000
 8004034:	053e2d63 	.word	0x053e2d63
 8004038:	c7520000 	.word	0xc7520000
 800403c:	cb840000 	.word	0xcb840000

08004040 <LL_ADC_IsEnabled>:
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <LL_ADC_IsEnabled+0x18>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <LL_ADC_IsEnabled+0x1a>
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_ADC_REG_IsConversionOngoing>:
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d101      	bne.n	800407e <LL_ADC_REG_IsConversionOngoing+0x18>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b0a1      	sub	sp, #132	; 0x84
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0cb      	b.n	8004242 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040b2:	2300      	movs	r3, #0
 80040b4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80040b6:	2300      	movs	r3, #0
 80040b8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c2:	d102      	bne.n	80040ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040c4:	4b61      	ldr	r3, [pc, #388]	; (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	e001      	b.n	80040ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0aa      	b.n	8004242 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff ffb9 	bl	8004066 <LL_ADC_REG_IsConversionOngoing>
 80040f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff ffb3 	bl	8004066 <LL_ADC_REG_IsConversionOngoing>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 808c 	bne.w	8004220 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410a:	2b00      	cmp	r3, #0
 800410c:	f040 8088 	bne.w	8004220 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004118:	d004      	beq.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a4b      	ldr	r2, [pc, #300]	; (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8004124:	4b4a      	ldr	r3, [pc, #296]	; (8004250 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8004126:	e000      	b.n	800412a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004128:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800412a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d041      	beq.n	80041b8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004146:	035b      	lsls	r3, r3, #13
 8004148:	430b      	orrs	r3, r1
 800414a:	431a      	orrs	r2, r3
 800414c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004158:	d004      	beq.n	8004164 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3b      	ldr	r2, [pc, #236]	; (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10f      	bne.n	8004184 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8004164:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004168:	f7ff ff6a 	bl	8004040 <LL_ADC_IsEnabled>
 800416c:	4604      	mov	r4, r0
 800416e:	4837      	ldr	r0, [pc, #220]	; (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004170:	f7ff ff66 	bl	8004040 <LL_ADC_IsEnabled>
 8004174:	4603      	mov	r3, r0
 8004176:	4323      	orrs	r3, r4
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e008      	b.n	8004196 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8004184:	4834      	ldr	r0, [pc, #208]	; (8004258 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8004186:	f7ff ff5b 	bl	8004040 <LL_ADC_IsEnabled>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04c      	beq.n	8004234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800419a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041a2:	f023 030f 	bic.w	r3, r3, #15
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	6811      	ldr	r1, [r2, #0]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	6892      	ldr	r2, [r2, #8]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	431a      	orrs	r2, r3
 80041b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041b6:	e03d      	b.n	8004234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041cc:	d004      	beq.n	80041d8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1e      	ldr	r2, [pc, #120]	; (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d10f      	bne.n	80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80041d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041dc:	f7ff ff30 	bl	8004040 <LL_ADC_IsEnabled>
 80041e0:	4604      	mov	r4, r0
 80041e2:	481a      	ldr	r0, [pc, #104]	; (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80041e4:	f7ff ff2c 	bl	8004040 <LL_ADC_IsEnabled>
 80041e8:	4603      	mov	r3, r0
 80041ea:	4323      	orrs	r3, r4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e008      	b.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80041f8:	4817      	ldr	r0, [pc, #92]	; (8004258 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80041fa:	f7ff ff21 	bl	8004040 <LL_ADC_IsEnabled>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf0c      	ite	eq
 8004204:	2301      	moveq	r3, #1
 8004206:	2300      	movne	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d012      	beq.n	8004234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800420e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004216:	f023 030f 	bic.w	r3, r3, #15
 800421a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800421c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800421e:	e009      	b.n	8004234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004232:	e000      	b.n	8004236 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004234:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800423e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004242:	4618      	mov	r0, r3
 8004244:	3784      	adds	r7, #132	; 0x84
 8004246:	46bd      	mov	sp, r7
 8004248:	bd90      	pop	{r4, r7, pc}
 800424a:	bf00      	nop
 800424c:	50000100 	.word	0x50000100
 8004250:	50000300 	.word	0x50000300
 8004254:	50000700 	.word	0x50000700
 8004258:	50000400 	.word	0x50000400

0800425c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800426c:	4b0c      	ldr	r3, [pc, #48]	; (80042a0 <__NVIC_SetPriorityGrouping+0x44>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004278:	4013      	ands	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428e:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	60d3      	str	r3, [r2, #12]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <__NVIC_GetPriorityGrouping+0x18>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	0a1b      	lsrs	r3, r3, #8
 80042ae:	f003 0307 	and.w	r3, r3, #7
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	db0b      	blt.n	80042ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	4907      	ldr	r1, [pc, #28]	; (80042f8 <__NVIC_EnableIRQ+0x38>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	2001      	movs	r0, #1
 80042e2:	fa00 f202 	lsl.w	r2, r0, r2
 80042e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	e000e100 	.word	0xe000e100

080042fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	6039      	str	r1, [r7, #0]
 8004306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430c:	2b00      	cmp	r3, #0
 800430e:	db0a      	blt.n	8004326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	490c      	ldr	r1, [pc, #48]	; (8004348 <__NVIC_SetPriority+0x4c>)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	0112      	lsls	r2, r2, #4
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	440b      	add	r3, r1
 8004320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004324:	e00a      	b.n	800433c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4908      	ldr	r1, [pc, #32]	; (800434c <__NVIC_SetPriority+0x50>)
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	3b04      	subs	r3, #4
 8004334:	0112      	lsls	r2, r2, #4
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	440b      	add	r3, r1
 800433a:	761a      	strb	r2, [r3, #24]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000e100 	.word	0xe000e100
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f1c3 0307 	rsb	r3, r3, #7
 800436a:	2b04      	cmp	r3, #4
 800436c:	bf28      	it	cs
 800436e:	2304      	movcs	r3, #4
 8004370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3304      	adds	r3, #4
 8004376:	2b06      	cmp	r3, #6
 8004378:	d902      	bls.n	8004380 <NVIC_EncodePriority+0x30>
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3b03      	subs	r3, #3
 800437e:	e000      	b.n	8004382 <NVIC_EncodePriority+0x32>
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43da      	mvns	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	401a      	ands	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fa01 f303 	lsl.w	r3, r1, r3
 80043a2:	43d9      	mvns	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a8:	4313      	orrs	r3, r2
         );
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3724      	adds	r7, #36	; 0x24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c8:	d301      	bcc.n	80043ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00f      	b.n	80043ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ce:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <SysTick_Config+0x40>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d6:	210f      	movs	r1, #15
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043dc:	f7ff ff8e 	bl	80042fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <SysTick_Config+0x40>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e6:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <SysTick_Config+0x40>)
 80043e8:	2207      	movs	r2, #7
 80043ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	e000e010 	.word	0xe000e010

080043fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff29 	bl	800425c <__NVIC_SetPriorityGrouping>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b086      	sub	sp, #24
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004420:	f7ff ff40 	bl	80042a4 <__NVIC_GetPriorityGrouping>
 8004424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff90 	bl	8004350 <NVIC_EncodePriority>
 8004430:	4602      	mov	r2, r0
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff5f 	bl	80042fc <__NVIC_SetPriority>
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	4603      	mov	r3, r0
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff33 	bl	80042c0 <__NVIC_EnableIRQ>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ffa4 	bl	80043b8 <SysTick_Config>
 8004470:	4603      	mov	r3, r0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e08d      	b.n	80045aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_DMA_Init+0x138>)
 8004496:	429a      	cmp	r2, r3
 8004498:	d80f      	bhi.n	80044ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	4b45      	ldr	r3, [pc, #276]	; (80045b8 <HAL_DMA_Init+0x13c>)
 80044a2:	4413      	add	r3, r2
 80044a4:	4a45      	ldr	r2, [pc, #276]	; (80045bc <HAL_DMA_Init+0x140>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	009a      	lsls	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a42      	ldr	r2, [pc, #264]	; (80045c0 <HAL_DMA_Init+0x144>)
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
 80044b8:	e00e      	b.n	80044d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	4b40      	ldr	r3, [pc, #256]	; (80045c4 <HAL_DMA_Init+0x148>)
 80044c2:	4413      	add	r3, r2
 80044c4:	4a3d      	ldr	r2, [pc, #244]	; (80045bc <HAL_DMA_Init+0x140>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	009a      	lsls	r2, r3, #2
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a3c      	ldr	r2, [pc, #240]	; (80045c8 <HAL_DMA_Init+0x14c>)
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9be 	bl	80048ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004538:	d102      	bne.n	8004540 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004554:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d010      	beq.n	8004580 <HAL_DMA_Init+0x104>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b04      	cmp	r3, #4
 8004564:	d80c      	bhi.n	8004580 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f9de 	bl	8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	e008      	b.n	8004592 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40020407 	.word	0x40020407
 80045b8:	bffdfff8 	.word	0xbffdfff8
 80045bc:	cccccccd 	.word	0xcccccccd
 80045c0:	40020000 	.word	0x40020000
 80045c4:	bffdfbf8 	.word	0xbffdfbf8
 80045c8:	40020400 	.word	0x40020400

080045cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d005      	beq.n	80045f0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2204      	movs	r2, #4
 80045e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e037      	b.n	8004660 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 020e 	bic.w	r2, r2, #14
 80045fe:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800460e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2101      	movs	r1, #1
 800462e:	fa01 f202 	lsl.w	r2, r1, r2
 8004632:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800463c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004654:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800465e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d00d      	beq.n	80046b2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2204      	movs	r2, #4
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
 80046b0:	e047      	b.n	8004742 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 020e 	bic.w	r2, r2, #14
 80046c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	f003 021f 	and.w	r2, r3, #31
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2101      	movs	r1, #1
 80046f0:	fa01 f202 	lsl.w	r2, r1, r2
 80046f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00c      	beq.n	8004722 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004716:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004720:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	4798      	blx	r3
    }
  }
  return status;
 8004742:	7bfb      	ldrb	r3, [r7, #15]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2204      	movs	r2, #4
 800476e:	409a      	lsls	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d026      	beq.n	80047c6 <HAL_DMA_IRQHandler+0x7a>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d021      	beq.n	80047c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	2104      	movs	r1, #4
 80047ae:	fa01 f202 	lsl.w	r2, r1, r2
 80047b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d071      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047c4:	e06c      	b.n	80048a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2202      	movs	r2, #2
 80047d0:	409a      	lsls	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d02e      	beq.n	8004838 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d029      	beq.n	8004838 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 020a 	bic.w	r2, r2, #10
 8004800:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f003 021f 	and.w	r2, r3, #31
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2102      	movs	r1, #2
 8004818:	fa01 f202 	lsl.w	r2, r1, r2
 800481c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d038      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004836:	e033      	b.n	80048a0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2208      	movs	r2, #8
 8004842:	409a      	lsls	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02a      	beq.n	80048a2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d025      	beq.n	80048a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 020e 	bic.w	r2, r2, #14
 8004864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f003 021f 	and.w	r2, r3, #31
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	2101      	movs	r1, #1
 8004874:	fa01 f202 	lsl.w	r2, r1, r2
 8004878:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
}
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b16      	ldr	r3, [pc, #88]	; (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80048bc:	429a      	cmp	r2, r3
 80048be:	d802      	bhi.n	80048c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	e001      	b.n	80048ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80048c6:	4b15      	ldr	r3, [pc, #84]	; (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80048c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3b08      	subs	r3, #8
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	009a      	lsls	r2, r3, #2
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a0b      	ldr	r2, [pc, #44]	; (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	2201      	movs	r2, #1
 8004900:	409a      	lsls	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40020407 	.word	0x40020407
 8004918:	40020800 	.word	0x40020800
 800491c:	40020820 	.word	0x40020820
 8004920:	cccccccd 	.word	0xcccccccd
 8004924:	40020880 	.word	0x40020880

08004928 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800494a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3b01      	subs	r3, #1
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2201      	movs	r2, #1
 8004956:	409a      	lsls	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	1000823f 	.word	0x1000823f
 800496c:	40020940 	.word	0x40020940

08004970 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e147      	b.n	8004c12 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fe f922 	bl	8002be0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0210 	bic.w	r2, r2, #16
 80049aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ac:	f7fe fb82 	bl	80030b4 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80049b2:	e012      	b.n	80049da <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80049b4:	f7fe fb7e 	bl	80030b4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b0a      	cmp	r3, #10
 80049c0:	d90b      	bls.n	80049da <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2203      	movs	r2, #3
 80049d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e11b      	b.n	8004c12 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d0e5      	beq.n	80049b4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049f8:	f7fe fb5c 	bl	80030b4 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80049fe:	e012      	b.n	8004a26 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004a00:	f7fe fb58 	bl	80030b4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b0a      	cmp	r3, #10
 8004a0c:	d90b      	bls.n	8004a26 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a12:	f043 0201 	orr.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e0f5      	b.n	8004c12 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0e5      	beq.n	8004a00 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0202 	orr.w	r2, r2, #2
 8004a42:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a74      	ldr	r2, [pc, #464]	; (8004c1c <HAL_FDCAN_Init+0x2ac>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d103      	bne.n	8004a56 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004a4e:	4a74      	ldr	r2, [pc, #464]	; (8004c20 <HAL_FDCAN_Init+0x2b0>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	7c1b      	ldrb	r3, [r3, #16]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d108      	bne.n	8004a70 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6c:	619a      	str	r2, [r3, #24]
 8004a6e:	e007      	b.n	8004a80 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a7e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	7c5b      	ldrb	r3, [r3, #17]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d108      	bne.n	8004a9a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a96:	619a      	str	r2, [r3, #24]
 8004a98:	e007      	b.n	8004aaa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004aa8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	7c9b      	ldrb	r3, [r3, #18]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d108      	bne.n	8004ac4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699a      	ldr	r2, [r3, #24]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ac0:	619a      	str	r2, [r3, #24]
 8004ac2:	e007      	b.n	8004ad4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ad2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004af8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0210 	bic.w	r2, r2, #16
 8004b08:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d108      	bne.n	8004b24 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0204 	orr.w	r2, r2, #4
 8004b20:	619a      	str	r2, [r3, #24]
 8004b22:	e02c      	b.n	8004b7e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d028      	beq.n	8004b7e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d01c      	beq.n	8004b6e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b42:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0210 	orr.w	r2, r2, #16
 8004b52:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d110      	bne.n	8004b7e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0220 	orr.w	r2, r2, #32
 8004b6a:	619a      	str	r2, [r3, #24]
 8004b6c:	e007      	b.n	8004b7e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0220 	orr.w	r2, r2, #32
 8004b7c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b8e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b96:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004ba6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ba8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bb2:	d115      	bne.n	8004be0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004bc2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004bcc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004bdc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004bde:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9c2 	bl	8004f80 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40006400 	.word	0x40006400
 8004c20:	40006500 	.word	0x40006500

08004c24 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c40:	4013      	ands	r3, r2
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	6a3a      	ldr	r2, [r7, #32]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c66:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	4013      	ands	r3, r2
 8004c72:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8004c7e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004c96:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00d      	beq.n	8004cce <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2240      	movs	r2, #64	; 0x40
 8004cc6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f939 	bl	8004f40 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01b      	beq.n	8004d14 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d014      	beq.n	8004d14 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004cf2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004d0c:	6939      	ldr	r1, [r7, #16]
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f8f7 	bl	8004f02 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d20:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f8b6 	bl	8004e96 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004d38:	6a39      	ldr	r1, [r7, #32]
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8b6 	bl	8004eac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f8b6 	bl	8004ec2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00e      	beq.n	8004d82 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8ab 	bl	8004ed8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01a      	beq.n	8004dc6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d013      	beq.n	8004dc6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004da6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4013      	ands	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f893 	bl	8004eec <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f893 	bl	8004f18 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00e      	beq.n	8004e1e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e16:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f887 	bl	8004f2c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d011      	beq.n	8004e50 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004e5e:	6979      	ldr	r1, [r7, #20]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f881 	bl	8004f68 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f863 	bl	8004f54 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3728      	adds	r7, #40	; 0x28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004f88:	4b2c      	ldr	r3, [pc, #176]	; (800503c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004f8a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d103      	bne.n	8004f9e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004f9c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fac:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	041a      	lsls	r2, r3, #16
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd2:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	061a      	lsls	r2, r3, #24
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e005      	b.n	8005020 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3304      	adds	r3, #4
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	429a      	cmp	r2, r3
 800502a:	d3f3      	bcc.n	8005014 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	4000a400 	.word	0x4000a400
 8005040:	40006800 	.word	0x40006800

08005044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005052:	e15a      	b.n	800530a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	2101      	movs	r1, #1
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	fa01 f303 	lsl.w	r3, r1, r3
 8005060:	4013      	ands	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 814c 	beq.w	8005304 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d005      	beq.n	8005084 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005080:	2b02      	cmp	r3, #2
 8005082:	d130      	bne.n	80050e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	2203      	movs	r2, #3
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	43db      	mvns	r3, r3
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4013      	ands	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ba:	2201      	movs	r2, #1
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4013      	ands	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	f003 0201 	and.w	r2, r3, #1
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d017      	beq.n	8005122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	2203      	movs	r2, #3
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4013      	ands	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d123      	bne.n	8005176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	08da      	lsrs	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3208      	adds	r2, #8
 8005136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	220f      	movs	r2, #15
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43db      	mvns	r3, r3
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	08da      	lsrs	r2, r3, #3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3208      	adds	r2, #8
 8005170:	6939      	ldr	r1, [r7, #16]
 8005172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	2203      	movs	r2, #3
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4013      	ands	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 0203 	and.w	r2, r3, #3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 80a6 	beq.w	8005304 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b8:	4b5b      	ldr	r3, [pc, #364]	; (8005328 <HAL_GPIO_Init+0x2e4>)
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	4a5a      	ldr	r2, [pc, #360]	; (8005328 <HAL_GPIO_Init+0x2e4>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6613      	str	r3, [r2, #96]	; 0x60
 80051c4:	4b58      	ldr	r3, [pc, #352]	; (8005328 <HAL_GPIO_Init+0x2e4>)
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051d0:	4a56      	ldr	r2, [pc, #344]	; (800532c <HAL_GPIO_Init+0x2e8>)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	089b      	lsrs	r3, r3, #2
 80051d6:	3302      	adds	r3, #2
 80051d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	220f      	movs	r2, #15
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	43db      	mvns	r3, r3
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4013      	ands	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80051fa:	d01f      	beq.n	800523c <HAL_GPIO_Init+0x1f8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a4c      	ldr	r2, [pc, #304]	; (8005330 <HAL_GPIO_Init+0x2ec>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d019      	beq.n	8005238 <HAL_GPIO_Init+0x1f4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a4b      	ldr	r2, [pc, #300]	; (8005334 <HAL_GPIO_Init+0x2f0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d013      	beq.n	8005234 <HAL_GPIO_Init+0x1f0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a4a      	ldr	r2, [pc, #296]	; (8005338 <HAL_GPIO_Init+0x2f4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00d      	beq.n	8005230 <HAL_GPIO_Init+0x1ec>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a49      	ldr	r2, [pc, #292]	; (800533c <HAL_GPIO_Init+0x2f8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <HAL_GPIO_Init+0x1e8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a48      	ldr	r2, [pc, #288]	; (8005340 <HAL_GPIO_Init+0x2fc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d101      	bne.n	8005228 <HAL_GPIO_Init+0x1e4>
 8005224:	2305      	movs	r3, #5
 8005226:	e00a      	b.n	800523e <HAL_GPIO_Init+0x1fa>
 8005228:	2306      	movs	r3, #6
 800522a:	e008      	b.n	800523e <HAL_GPIO_Init+0x1fa>
 800522c:	2304      	movs	r3, #4
 800522e:	e006      	b.n	800523e <HAL_GPIO_Init+0x1fa>
 8005230:	2303      	movs	r3, #3
 8005232:	e004      	b.n	800523e <HAL_GPIO_Init+0x1fa>
 8005234:	2302      	movs	r3, #2
 8005236:	e002      	b.n	800523e <HAL_GPIO_Init+0x1fa>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_GPIO_Init+0x1fa>
 800523c:	2300      	movs	r3, #0
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	f002 0203 	and.w	r2, r2, #3
 8005244:	0092      	lsls	r2, r2, #2
 8005246:	4093      	lsls	r3, r2
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800524e:	4937      	ldr	r1, [pc, #220]	; (800532c <HAL_GPIO_Init+0x2e8>)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	3302      	adds	r3, #2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800525c:	4b39      	ldr	r3, [pc, #228]	; (8005344 <HAL_GPIO_Init+0x300>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	43db      	mvns	r3, r3
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4013      	ands	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005280:	4a30      	ldr	r2, [pc, #192]	; (8005344 <HAL_GPIO_Init+0x300>)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005286:	4b2f      	ldr	r3, [pc, #188]	; (8005344 <HAL_GPIO_Init+0x300>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	43db      	mvns	r3, r3
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052aa:	4a26      	ldr	r2, [pc, #152]	; (8005344 <HAL_GPIO_Init+0x300>)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80052b0:	4b24      	ldr	r3, [pc, #144]	; (8005344 <HAL_GPIO_Init+0x300>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4013      	ands	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052d4:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <HAL_GPIO_Init+0x300>)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052da:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <HAL_GPIO_Init+0x300>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	43db      	mvns	r3, r3
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4013      	ands	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052fe:	4a11      	ldr	r2, [pc, #68]	; (8005344 <HAL_GPIO_Init+0x300>)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3301      	adds	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	f47f ae9d 	bne.w	8005054 <HAL_GPIO_Init+0x10>
  }
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40021000 	.word	0x40021000
 800532c:	40010000 	.word	0x40010000
 8005330:	48000400 	.word	0x48000400
 8005334:	48000800 	.word	0x48000800
 8005338:	48000c00 	.word	0x48000c00
 800533c:	48001000 	.word	0x48001000
 8005340:	48001400 	.word	0x48001400
 8005344:	40010400 	.word	0x40010400

08005348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	887b      	ldrh	r3, [r7, #2]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	e001      	b.n	800536a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	807b      	strh	r3, [r7, #2]
 8005384:	4613      	mov	r3, r2
 8005386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005388:	787b      	ldrb	r3, [r7, #1]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800538e:	887a      	ldrh	r2, [r7, #2]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005394:	e002      	b.n	800539c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005396:	887a      	ldrh	r2, [r7, #2]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4013      	ands	r3, r2
 80053c0:	041a      	lsls	r2, r3, #16
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	43d9      	mvns	r1, r3
 80053c6:	887b      	ldrh	r3, [r7, #2]
 80053c8:	400b      	ands	r3, r1
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	619a      	str	r2, [r3, #24]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d141      	bne.n	800546e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053ea:	4b4b      	ldr	r3, [pc, #300]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f6:	d131      	bne.n	800545c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053f8:	4b47      	ldr	r3, [pc, #284]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fe:	4a46      	ldr	r2, [pc, #280]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005404:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005408:	4b43      	ldr	r3, [pc, #268]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005410:	4a41      	ldr	r2, [pc, #260]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005416:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005418:	4b40      	ldr	r3, [pc, #256]	; (800551c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2232      	movs	r2, #50	; 0x32
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	4a3f      	ldr	r2, [pc, #252]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	0c9b      	lsrs	r3, r3, #18
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800542e:	e002      	b.n	8005436 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3b01      	subs	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005436:	4b38      	ldr	r3, [pc, #224]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005442:	d102      	bne.n	800544a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f2      	bne.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800544a:	4b33      	ldr	r3, [pc, #204]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005456:	d158      	bne.n	800550a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e057      	b.n	800550c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800545c:	4b2e      	ldr	r3, [pc, #184]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005462:	4a2d      	ldr	r2, [pc, #180]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005468:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800546c:	e04d      	b.n	800550a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005474:	d141      	bne.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005476:	4b28      	ldr	r3, [pc, #160]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d131      	bne.n	80054e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005484:	4b24      	ldr	r3, [pc, #144]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548a:	4a23      	ldr	r2, [pc, #140]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005490:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005494:	4b20      	ldr	r3, [pc, #128]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800549c:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054a4:	4b1d      	ldr	r3, [pc, #116]	; (800551c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2232      	movs	r2, #50	; 0x32
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054b0:	fba2 2303 	umull	r2, r3, r2, r3
 80054b4:	0c9b      	lsrs	r3, r3, #18
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ba:	e002      	b.n	80054c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3b01      	subs	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ce:	d102      	bne.n	80054d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f2      	bne.n	80054bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d112      	bne.n	800550a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e011      	b.n	800550c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ee:	4a0a      	ldr	r2, [pc, #40]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054f8:	e007      	b.n	800550a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005502:	4a05      	ldr	r2, [pc, #20]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005508:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40007000 	.word	0x40007000
 800551c:	20000000 	.word	0x20000000
 8005520:	431bde83 	.word	0x431bde83

08005524 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4a04      	ldr	r2, [pc, #16]	; (8005540 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800552e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005532:	6093      	str	r3, [r2, #8]
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40007000 	.word	0x40007000

08005544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e306      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d075      	beq.n	800564e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005562:	4b97      	ldr	r3, [pc, #604]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800556c:	4b94      	ldr	r3, [pc, #592]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b0c      	cmp	r3, #12
 800557a:	d102      	bne.n	8005582 <HAL_RCC_OscConfig+0x3e>
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b03      	cmp	r3, #3
 8005580:	d002      	beq.n	8005588 <HAL_RCC_OscConfig+0x44>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b08      	cmp	r3, #8
 8005586:	d10b      	bne.n	80055a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005588:	4b8d      	ldr	r3, [pc, #564]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d05b      	beq.n	800564c <HAL_RCC_OscConfig+0x108>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d157      	bne.n	800564c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e2e1      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a8:	d106      	bne.n	80055b8 <HAL_RCC_OscConfig+0x74>
 80055aa:	4b85      	ldr	r3, [pc, #532]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a84      	ldr	r2, [pc, #528]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e01d      	b.n	80055f4 <HAL_RCC_OscConfig+0xb0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c0:	d10c      	bne.n	80055dc <HAL_RCC_OscConfig+0x98>
 80055c2:	4b7f      	ldr	r3, [pc, #508]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a7e      	ldr	r2, [pc, #504]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4b7c      	ldr	r3, [pc, #496]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a7b      	ldr	r2, [pc, #492]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e00b      	b.n	80055f4 <HAL_RCC_OscConfig+0xb0>
 80055dc:	4b78      	ldr	r3, [pc, #480]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a77      	ldr	r2, [pc, #476]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	4b75      	ldr	r3, [pc, #468]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a74      	ldr	r2, [pc, #464]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80055ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d013      	beq.n	8005624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fd fd5a 	bl	80030b4 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005604:	f7fd fd56 	bl	80030b4 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b64      	cmp	r3, #100	; 0x64
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e2a6      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005616:	4b6a      	ldr	r3, [pc, #424]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0xc0>
 8005622:	e014      	b.n	800564e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fd fd46 	bl	80030b4 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800562c:	f7fd fd42 	bl	80030b4 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b64      	cmp	r3, #100	; 0x64
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e292      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800563e:	4b60      	ldr	r3, [pc, #384]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0xe8>
 800564a:	e000      	b.n	800564e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800564c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d075      	beq.n	8005746 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800565a:	4b59      	ldr	r3, [pc, #356]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005664:	4b56      	ldr	r3, [pc, #344]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b0c      	cmp	r3, #12
 8005672:	d102      	bne.n	800567a <HAL_RCC_OscConfig+0x136>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d002      	beq.n	8005680 <HAL_RCC_OscConfig+0x13c>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d11f      	bne.n	80056c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005680:	4b4f      	ldr	r3, [pc, #316]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_RCC_OscConfig+0x154>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e265      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005698:	4b49      	ldr	r3, [pc, #292]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	4946      	ldr	r1, [pc, #280]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056ac:	4b45      	ldr	r3, [pc, #276]	; (80057c4 <HAL_RCC_OscConfig+0x280>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fd fcb3 	bl	800301c <HAL_InitTick>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d043      	beq.n	8005744 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e251      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d023      	beq.n	8005710 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056c8:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3c      	ldr	r2, [pc, #240]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80056ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d4:	f7fd fcee 	bl	80030b4 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056dc:	f7fd fcea 	bl	80030b4 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e23a      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056ee:	4b34      	ldr	r3, [pc, #208]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fa:	4b31      	ldr	r3, [pc, #196]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	061b      	lsls	r3, r3, #24
 8005708:	492d      	ldr	r1, [pc, #180]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 800570a:	4313      	orrs	r3, r2
 800570c:	604b      	str	r3, [r1, #4]
 800570e:	e01a      	b.n	8005746 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005710:	4b2b      	ldr	r3, [pc, #172]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2a      	ldr	r2, [pc, #168]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fd fcca 	bl	80030b4 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005724:	f7fd fcc6 	bl	80030b4 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e216      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005736:	4b22      	ldr	r3, [pc, #136]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x1e0>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d041      	beq.n	80057d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d01c      	beq.n	8005794 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800575a:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 800575c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005760:	4a17      	ldr	r2, [pc, #92]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005762:	f043 0301 	orr.w	r3, r3, #1
 8005766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576a:	f7fd fca3 	bl	80030b4 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005772:	f7fd fc9f 	bl	80030b4 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e1ef      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005784:	4b0e      	ldr	r3, [pc, #56]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ef      	beq.n	8005772 <HAL_RCC_OscConfig+0x22e>
 8005792:	e020      	b.n	80057d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005794:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 8005796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800579a:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <HAL_RCC_OscConfig+0x27c>)
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a4:	f7fd fc86 	bl	80030b4 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057aa:	e00d      	b.n	80057c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ac:	f7fd fc82 	bl	80030b4 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d906      	bls.n	80057c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e1d2      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057c8:	4b8c      	ldr	r3, [pc, #560]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80057ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1ea      	bne.n	80057ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80a6 	beq.w	8005930 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057e4:	2300      	movs	r3, #0
 80057e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057e8:	4b84      	ldr	r3, [pc, #528]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80057ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_RCC_OscConfig+0x2b4>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <HAL_RCC_OscConfig+0x2b6>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00d      	beq.n	800581a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057fe:	4b7f      	ldr	r3, [pc, #508]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	4a7e      	ldr	r2, [pc, #504]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005808:	6593      	str	r3, [r2, #88]	; 0x58
 800580a:	4b7c      	ldr	r3, [pc, #496]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 800580c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005816:	2301      	movs	r3, #1
 8005818:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800581a:	4b79      	ldr	r3, [pc, #484]	; (8005a00 <HAL_RCC_OscConfig+0x4bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d118      	bne.n	8005858 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005826:	4b76      	ldr	r3, [pc, #472]	; (8005a00 <HAL_RCC_OscConfig+0x4bc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a75      	ldr	r2, [pc, #468]	; (8005a00 <HAL_RCC_OscConfig+0x4bc>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005832:	f7fd fc3f 	bl	80030b4 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583a:	f7fd fc3b 	bl	80030b4 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e18b      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800584c:	4b6c      	ldr	r3, [pc, #432]	; (8005a00 <HAL_RCC_OscConfig+0x4bc>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d108      	bne.n	8005872 <HAL_RCC_OscConfig+0x32e>
 8005860:	4b66      	ldr	r3, [pc, #408]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005866:	4a65      	ldr	r2, [pc, #404]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005870:	e024      	b.n	80058bc <HAL_RCC_OscConfig+0x378>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b05      	cmp	r3, #5
 8005878:	d110      	bne.n	800589c <HAL_RCC_OscConfig+0x358>
 800587a:	4b60      	ldr	r3, [pc, #384]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005880:	4a5e      	ldr	r2, [pc, #376]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005882:	f043 0304 	orr.w	r3, r3, #4
 8005886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800588a:	4b5c      	ldr	r3, [pc, #368]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	4a5a      	ldr	r2, [pc, #360]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800589a:	e00f      	b.n	80058bc <HAL_RCC_OscConfig+0x378>
 800589c:	4b57      	ldr	r3, [pc, #348]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	4a56      	ldr	r2, [pc, #344]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058ac:	4b53      	ldr	r3, [pc, #332]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	4a52      	ldr	r2, [pc, #328]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80058b4:	f023 0304 	bic.w	r3, r3, #4
 80058b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d016      	beq.n	80058f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c4:	f7fd fbf6 	bl	80030b4 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058cc:	f7fd fbf2 	bl	80030b4 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e140      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e2:	4b46      	ldr	r3, [pc, #280]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ed      	beq.n	80058cc <HAL_RCC_OscConfig+0x388>
 80058f0:	e015      	b.n	800591e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f2:	f7fd fbdf 	bl	80030b4 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fd fbdb 	bl	80030b4 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e129      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005910:	4b3a      	ldr	r3, [pc, #232]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1ed      	bne.n	80058fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800591e:	7ffb      	ldrb	r3, [r7, #31]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d105      	bne.n	8005930 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005924:	4b35      	ldr	r3, [pc, #212]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005928:	4a34      	ldr	r2, [pc, #208]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 800592a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800592e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d03c      	beq.n	80059b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01c      	beq.n	800597e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005944:	4b2d      	ldr	r3, [pc, #180]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800594a:	4a2c      	ldr	r2, [pc, #176]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005954:	f7fd fbae 	bl	80030b4 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800595c:	f7fd fbaa 	bl	80030b4 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e0fa      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800596e:	4b23      	ldr	r3, [pc, #140]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ef      	beq.n	800595c <HAL_RCC_OscConfig+0x418>
 800597c:	e01b      	b.n	80059b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800597e:	4b1f      	ldr	r3, [pc, #124]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005984:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 8005986:	f023 0301 	bic.w	r3, r3, #1
 800598a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598e:	f7fd fb91 	bl	80030b4 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005996:	f7fd fb8d 	bl	80030b4 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e0dd      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059a8:	4b14      	ldr	r3, [pc, #80]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80059aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1ef      	bne.n	8005996 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80d1 	beq.w	8005b62 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059c0:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 030c 	and.w	r3, r3, #12
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	f000 808b 	beq.w	8005ae4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d15e      	bne.n	8005a94 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a08      	ldr	r2, [pc, #32]	; (80059fc <HAL_RCC_OscConfig+0x4b8>)
 80059dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fd fb67 	bl	80030b4 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e8:	e00c      	b.n	8005a04 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fd fb63 	bl	80030b4 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d905      	bls.n	8005a04 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e0b3      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a04:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1ec      	bne.n	80059ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a10:	4b56      	ldr	r3, [pc, #344]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	4b56      	ldr	r3, [pc, #344]	; (8005b70 <HAL_RCC_OscConfig+0x62c>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6a11      	ldr	r1, [r2, #32]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a20:	3a01      	subs	r2, #1
 8005a22:	0112      	lsls	r2, r2, #4
 8005a24:	4311      	orrs	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a2a:	0212      	lsls	r2, r2, #8
 8005a2c:	4311      	orrs	r1, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a32:	0852      	lsrs	r2, r2, #1
 8005a34:	3a01      	subs	r2, #1
 8005a36:	0552      	lsls	r2, r2, #21
 8005a38:	4311      	orrs	r1, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a3e:	0852      	lsrs	r2, r2, #1
 8005a40:	3a01      	subs	r2, #1
 8005a42:	0652      	lsls	r2, r2, #25
 8005a44:	4311      	orrs	r1, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a4a:	06d2      	lsls	r2, r2, #27
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	4947      	ldr	r1, [pc, #284]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a54:	4b45      	ldr	r3, [pc, #276]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a44      	ldr	r2, [pc, #272]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a60:	4b42      	ldr	r3, [pc, #264]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4a41      	ldr	r2, [pc, #260]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7fd fb22 	bl	80030b4 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a74:	f7fd fb1e 	bl	80030b4 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e06e      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a86:	4b39      	ldr	r3, [pc, #228]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCC_OscConfig+0x530>
 8005a92:	e066      	b.n	8005b62 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a94:	4b35      	ldr	r3, [pc, #212]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a34      	ldr	r2, [pc, #208]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005aa0:	4b32      	ldr	r3, [pc, #200]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4a31      	ldr	r2, [pc, #196]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005aac:	4b2f      	ldr	r3, [pc, #188]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a2e      	ldr	r2, [pc, #184]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005ab2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fd fafa 	bl	80030b4 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fd faf6 	bl	80030b4 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e046      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ad6:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x580>
 8005ae2:	e03e      	b.n	8005b62 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e039      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005af0:	4b1e      	ldr	r3, [pc, #120]	; (8005b6c <HAL_RCC_OscConfig+0x628>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f003 0203 	and.w	r2, r3, #3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d12c      	bne.n	8005b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d123      	bne.n	8005b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d11b      	bne.n	8005b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d113      	bne.n	8005b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	085b      	lsrs	r3, r3, #1
 8005b42:	3b01      	subs	r3, #1
 8005b44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d109      	bne.n	8005b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	3b01      	subs	r3, #1
 8005b58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d001      	beq.n	8005b62 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3720      	adds	r7, #32
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	019f800c 	.word	0x019f800c

08005b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e11e      	b.n	8005dca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b8c:	4b91      	ldr	r3, [pc, #580]	; (8005dd4 <HAL_RCC_ClockConfig+0x260>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d910      	bls.n	8005bbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9a:	4b8e      	ldr	r3, [pc, #568]	; (8005dd4 <HAL_RCC_ClockConfig+0x260>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f023 020f 	bic.w	r2, r3, #15
 8005ba2:	498c      	ldr	r1, [pc, #560]	; (8005dd4 <HAL_RCC_ClockConfig+0x260>)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005baa:	4b8a      	ldr	r3, [pc, #552]	; (8005dd4 <HAL_RCC_ClockConfig+0x260>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d001      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e106      	b.n	8005dca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d073      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d129      	bne.n	8005c24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd0:	4b81      	ldr	r3, [pc, #516]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0f4      	b.n	8005dca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005be0:	f000 f99e 	bl	8005f20 <RCC_GetSysClockFreqFromPLLSource>
 8005be4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4a7c      	ldr	r2, [pc, #496]	; (8005ddc <HAL_RCC_ClockConfig+0x268>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d93f      	bls.n	8005c6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bee:	4b7a      	ldr	r3, [pc, #488]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d033      	beq.n	8005c6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d12f      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c0e:	4b72      	ldr	r3, [pc, #456]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c16:	4a70      	ldr	r2, [pc, #448]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e024      	b.n	8005c6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d107      	bne.n	8005c3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c2c:	4b6a      	ldr	r3, [pc, #424]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d109      	bne.n	8005c4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0c6      	b.n	8005dca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c3c:	4b66      	ldr	r3, [pc, #408]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0be      	b.n	8005dca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c4c:	f000 f8ce 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4a61      	ldr	r2, [pc, #388]	; (8005ddc <HAL_RCC_ClockConfig+0x268>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d909      	bls.n	8005c6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c5a:	4b5f      	ldr	r3, [pc, #380]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c62:	4a5d      	ldr	r2, [pc, #372]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c6a:	2380      	movs	r3, #128	; 0x80
 8005c6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c6e:	4b5a      	ldr	r3, [pc, #360]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f023 0203 	bic.w	r2, r3, #3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	4957      	ldr	r1, [pc, #348]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c80:	f7fd fa18 	bl	80030b4 <HAL_GetTick>
 8005c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c88:	f7fd fa14 	bl	80030b4 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e095      	b.n	8005dca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9e:	4b4e      	ldr	r3, [pc, #312]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 020c 	and.w	r2, r3, #12
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d1eb      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d023      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc8:	4b43      	ldr	r3, [pc, #268]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4a42      	ldr	r2, [pc, #264]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ce0:	4b3d      	ldr	r3, [pc, #244]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ce8:	4a3b      	ldr	r2, [pc, #236]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cf0:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	4936      	ldr	r1, [pc, #216]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b80      	cmp	r3, #128	; 0x80
 8005d08:	d105      	bne.n	8005d16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d0a:	4b33      	ldr	r3, [pc, #204]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4a32      	ldr	r2, [pc, #200]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005d10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d16:	4b2f      	ldr	r3, [pc, #188]	; (8005dd4 <HAL_RCC_ClockConfig+0x260>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d21d      	bcs.n	8005d60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d24:	4b2b      	ldr	r3, [pc, #172]	; (8005dd4 <HAL_RCC_ClockConfig+0x260>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f023 020f 	bic.w	r2, r3, #15
 8005d2c:	4929      	ldr	r1, [pc, #164]	; (8005dd4 <HAL_RCC_ClockConfig+0x260>)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d34:	f7fd f9be 	bl	80030b4 <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3a:	e00a      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3c:	f7fd f9ba 	bl	80030b4 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e03b      	b.n	8005dca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d52:	4b20      	ldr	r3, [pc, #128]	; (8005dd4 <HAL_RCC_ClockConfig+0x260>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d1ed      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	4917      	ldr	r1, [pc, #92]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d8a:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	490f      	ldr	r1, [pc, #60]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d9e:	f000 f825 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <HAL_RCC_ClockConfig+0x264>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	490c      	ldr	r1, [pc, #48]	; (8005de0 <HAL_RCC_ClockConfig+0x26c>)
 8005db0:	5ccb      	ldrb	r3, [r1, r3]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dba:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <HAL_RCC_ClockConfig+0x270>)
 8005dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <HAL_RCC_ClockConfig+0x274>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fd f92a 	bl	800301c <HAL_InitTick>
 8005dc8:	4603      	mov	r3, r0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40022000 	.word	0x40022000
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	04c4b400 	.word	0x04c4b400
 8005de0:	08009e04 	.word	0x08009e04
 8005de4:	20000000 	.word	0x20000000
 8005de8:	20000004 	.word	0x20000004

08005dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005df2:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d102      	bne.n	8005e04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dfe:	4b2a      	ldr	r3, [pc, #168]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	e047      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e04:	4b27      	ldr	r3, [pc, #156]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 030c 	and.w	r3, r3, #12
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d102      	bne.n	8005e16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e10:	4b26      	ldr	r3, [pc, #152]	; (8005eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	e03e      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e16:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
 8005e1e:	2b0c      	cmp	r3, #12
 8005e20:	d136      	bne.n	8005e90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e22:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	3301      	adds	r3, #1
 8005e38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d10c      	bne.n	8005e5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e40:	4a1a      	ldr	r2, [pc, #104]	; (8005eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e48:	4a16      	ldr	r2, [pc, #88]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e4a:	68d2      	ldr	r2, [r2, #12]
 8005e4c:	0a12      	lsrs	r2, r2, #8
 8005e4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	617b      	str	r3, [r7, #20]
      break;
 8005e58:	e00c      	b.n	8005e74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e5a:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e62:	4a10      	ldr	r2, [pc, #64]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e64:	68d2      	ldr	r2, [r2, #12]
 8005e66:	0a12      	lsrs	r2, r2, #8
 8005e68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]
      break;
 8005e72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e74:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	0e5b      	lsrs	r3, r3, #25
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	3301      	adds	r3, #1
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e001      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e94:	693b      	ldr	r3, [r7, #16]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	00f42400 	.word	0x00f42400
 8005eac:	007a1200 	.word	0x007a1200

08005eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eb4:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000000 	.word	0x20000000

08005ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ecc:	f7ff fff0 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	0a1b      	lsrs	r3, r3, #8
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	4904      	ldr	r1, [pc, #16]	; (8005ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ede:	5ccb      	ldrb	r3, [r1, r3]
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	08009e14 	.word	0x08009e14

08005ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ef8:	f7ff ffda 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005efc:	4602      	mov	r2, r0
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	0adb      	lsrs	r3, r3, #11
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	4904      	ldr	r1, [pc, #16]	; (8005f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f0a:	5ccb      	ldrb	r3, [r1, r3]
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	08009e14 	.word	0x08009e14

08005f20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f26:	4b1e      	ldr	r3, [pc, #120]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f30:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d10c      	bne.n	8005f5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f44:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f4e:	68d2      	ldr	r2, [r2, #12]
 8005f50:	0a12      	lsrs	r2, r2, #8
 8005f52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	617b      	str	r3, [r7, #20]
    break;
 8005f5c:	e00c      	b.n	8005f78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f5e:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f66:	4a0e      	ldr	r2, [pc, #56]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f68:	68d2      	ldr	r2, [r2, #12]
 8005f6a:	0a12      	lsrs	r2, r2, #8
 8005f6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	617b      	str	r3, [r7, #20]
    break;
 8005f76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f78:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	0e5b      	lsrs	r3, r3, #25
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	3301      	adds	r3, #1
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f92:	687b      	ldr	r3, [r7, #4]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	007a1200 	.word	0x007a1200
 8005fa8:	00f42400 	.word	0x00f42400

08005fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fb8:	2300      	movs	r3, #0
 8005fba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8098 	beq.w	80060fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fce:	4b43      	ldr	r3, [pc, #268]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10d      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fda:	4b40      	ldr	r3, [pc, #256]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fde:	4a3f      	ldr	r2, [pc, #252]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8005fe6:	4b3d      	ldr	r3, [pc, #244]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ff6:	4b3a      	ldr	r3, [pc, #232]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a39      	ldr	r2, [pc, #228]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006000:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006002:	f7fd f857 	bl	80030b4 <HAL_GetTick>
 8006006:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006008:	e009      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800600a:	f7fd f853 	bl	80030b4 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d902      	bls.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	74fb      	strb	r3, [r7, #19]
        break;
 800601c:	e005      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800601e:	4b30      	ldr	r3, [pc, #192]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0ef      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800602a:	7cfb      	ldrb	r3, [r7, #19]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d159      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006030:	4b2a      	ldr	r3, [pc, #168]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01e      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	429a      	cmp	r2, r3
 800604a:	d019      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800604c:	4b23      	ldr	r3, [pc, #140]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605e:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006068:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606e:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006078:	4a18      	ldr	r2, [pc, #96]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d016      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608a:	f7fd f813 	bl	80030b4 <HAL_GetTick>
 800608e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006090:	e00b      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006092:	f7fd f80f 	bl	80030b4 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d902      	bls.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	74fb      	strb	r3, [r7, #19]
            break;
 80060a8:	e006      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ec      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060b8:	7cfb      	ldrb	r3, [r7, #19]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060be:	4b07      	ldr	r3, [pc, #28]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060cc:	4903      	ldr	r1, [pc, #12]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80060d4:	e008      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060d6:	7cfb      	ldrb	r3, [r7, #19]
 80060d8:	74bb      	strb	r3, [r7, #18]
 80060da:	e005      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060dc:	40021000 	.word	0x40021000
 80060e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e4:	7cfb      	ldrb	r3, [r7, #19]
 80060e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060e8:	7c7b      	ldrb	r3, [r7, #17]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d105      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ee:	4ba7      	ldr	r3, [pc, #668]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f2:	4aa6      	ldr	r2, [pc, #664]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006106:	4ba1      	ldr	r3, [pc, #644]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610c:	f023 0203 	bic.w	r2, r3, #3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	499d      	ldr	r1, [pc, #628]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006128:	4b98      	ldr	r3, [pc, #608]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612e:	f023 020c 	bic.w	r2, r3, #12
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4995      	ldr	r1, [pc, #596]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800614a:	4b90      	ldr	r3, [pc, #576]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006150:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	498c      	ldr	r1, [pc, #560]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800616c:	4b87      	ldr	r3, [pc, #540]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	4984      	ldr	r1, [pc, #528]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800618e:	4b7f      	ldr	r3, [pc, #508]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	497b      	ldr	r1, [pc, #492]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061b0:	4b76      	ldr	r3, [pc, #472]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	4973      	ldr	r1, [pc, #460]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061d2:	4b6e      	ldr	r3, [pc, #440]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	496a      	ldr	r1, [pc, #424]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061f4:	4b65      	ldr	r3, [pc, #404]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	4962      	ldr	r1, [pc, #392]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006204:	4313      	orrs	r3, r2
 8006206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006216:	4b5d      	ldr	r3, [pc, #372]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	4959      	ldr	r1, [pc, #356]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006238:	4b54      	ldr	r3, [pc, #336]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	4951      	ldr	r1, [pc, #324]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006248:	4313      	orrs	r3, r2
 800624a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006256:	2b00      	cmp	r3, #0
 8006258:	d015      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800625a:	4b4c      	ldr	r3, [pc, #304]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	4948      	ldr	r1, [pc, #288]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006278:	d105      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800627a:	4b44      	ldr	r3, [pc, #272]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	4a43      	ldr	r2, [pc, #268]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006284:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628e:	2b00      	cmp	r3, #0
 8006290:	d015      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006292:	4b3e      	ldr	r3, [pc, #248]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	493a      	ldr	r1, [pc, #232]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062b0:	d105      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062b2:	4b36      	ldr	r3, [pc, #216]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	4a35      	ldr	r2, [pc, #212]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062bc:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d015      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062ca:	4b30      	ldr	r3, [pc, #192]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	492c      	ldr	r1, [pc, #176]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062e8:	d105      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062ea:	4b28      	ldr	r3, [pc, #160]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	4a27      	ldr	r2, [pc, #156]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062f4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d015      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006302:	4b22      	ldr	r3, [pc, #136]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	491e      	ldr	r1, [pc, #120]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006320:	d105      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006322:	4b1a      	ldr	r3, [pc, #104]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	4a19      	ldr	r2, [pc, #100]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800632c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d015      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006340:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006348:	4910      	ldr	r1, [pc, #64]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006358:	d105      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800635a:	4b0c      	ldr	r3, [pc, #48]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	4a0b      	ldr	r2, [pc, #44]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006364:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d018      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006372:	4b06      	ldr	r3, [pc, #24]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006378:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	4902      	ldr	r1, [pc, #8]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	e001      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800638c:	40021000 	.word	0x40021000
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006396:	d105      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006398:	4b21      	ldr	r3, [pc, #132]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	4a20      	ldr	r2, [pc, #128]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800639e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d015      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80063b0:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	4918      	ldr	r1, [pc, #96]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ce:	d105      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063d0:	4b13      	ldr	r3, [pc, #76]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4a12      	ldr	r2, [pc, #72]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80063d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d015      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063e8:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80063ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f6:	490a      	ldr	r1, [pc, #40]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006406:	d105      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4a04      	ldr	r2, [pc, #16]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800640e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006412:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006414:	7cbb      	ldrb	r3, [r7, #18]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	40021000 	.word	0x40021000

08006424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e049      	b.n	80064ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fc fc2a 	bl	8002ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3304      	adds	r3, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f000 fc60 	bl	8006d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e049      	b.n	8006578 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f841 	bl	8006580 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f000 fc09 	bl	8006d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d122      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d11b      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0202 	mvn.w	r2, #2
 80065c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fb88 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 80065dc:	e005      	b.n	80065ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fb7a 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fb8b 	bl	8006d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d122      	bne.n	8006644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b04      	cmp	r3, #4
 800660a:	d11b      	bne.n	8006644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0204 	mvn.w	r2, #4
 8006614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2202      	movs	r2, #2
 800661a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fb5e 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006630:	e005      	b.n	800663e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fb50 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fb61 	bl	8006d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b08      	cmp	r3, #8
 8006650:	d122      	bne.n	8006698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b08      	cmp	r3, #8
 800665e:	d11b      	bne.n	8006698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0208 	mvn.w	r2, #8
 8006668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2204      	movs	r2, #4
 800666e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fb34 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006684:	e005      	b.n	8006692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fb26 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fb37 	bl	8006d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d122      	bne.n	80066ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d11b      	bne.n	80066ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0210 	mvn.w	r2, #16
 80066bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2208      	movs	r2, #8
 80066c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fb0a 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 80066d8:	e005      	b.n	80066e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fafc 	bl	8006cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fb0d 	bl	8006d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d10e      	bne.n	8006718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d107      	bne.n	8006718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0201 	mvn.w	r2, #1
 8006710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fad6 	bl	8006cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d10e      	bne.n	8006744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006730:	2b80      	cmp	r3, #128	; 0x80
 8006732:	d107      	bne.n	8006744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800673c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 ffee 	bl	8007720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006752:	d10e      	bne.n	8006772 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675e:	2b80      	cmp	r3, #128	; 0x80
 8006760:	d107      	bne.n	8006772 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800676a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 ffe1 	bl	8007734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d10e      	bne.n	800679e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d107      	bne.n	800679e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fabb 	bl	8006d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d10e      	bne.n	80067ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d107      	bne.n	80067ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f06f 0220 	mvn.w	r2, #32
 80067c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 ffa1 	bl	800770c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d8:	d10f      	bne.n	80067fa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e8:	d107      	bne.n	80067fa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80067f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 ffa7 	bl	8007748 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006808:	d10f      	bne.n	800682a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006818:	d107      	bne.n	800682a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 ff99 	bl	800775c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006838:	d10f      	bne.n	800685a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006848:	d107      	bne.n	800685a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 ff8b 	bl	8007770 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006868:	d10f      	bne.n	800688a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006878:	d107      	bne.n	800688a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 ff7d 	bl	8007784 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e0ff      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b14      	cmp	r3, #20
 80068be:	f200 80f0 	bhi.w	8006aa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068c2:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	0800691d 	.word	0x0800691d
 80068cc:	08006aa3 	.word	0x08006aa3
 80068d0:	08006aa3 	.word	0x08006aa3
 80068d4:	08006aa3 	.word	0x08006aa3
 80068d8:	0800695d 	.word	0x0800695d
 80068dc:	08006aa3 	.word	0x08006aa3
 80068e0:	08006aa3 	.word	0x08006aa3
 80068e4:	08006aa3 	.word	0x08006aa3
 80068e8:	0800699f 	.word	0x0800699f
 80068ec:	08006aa3 	.word	0x08006aa3
 80068f0:	08006aa3 	.word	0x08006aa3
 80068f4:	08006aa3 	.word	0x08006aa3
 80068f8:	080069df 	.word	0x080069df
 80068fc:	08006aa3 	.word	0x08006aa3
 8006900:	08006aa3 	.word	0x08006aa3
 8006904:	08006aa3 	.word	0x08006aa3
 8006908:	08006a21 	.word	0x08006a21
 800690c:	08006aa3 	.word	0x08006aa3
 8006910:	08006aa3 	.word	0x08006aa3
 8006914:	08006aa3 	.word	0x08006aa3
 8006918:	08006a61 	.word	0x08006a61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fa9e 	bl	8006e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0208 	orr.w	r2, r2, #8
 8006936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0204 	bic.w	r2, r2, #4
 8006946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6999      	ldr	r1, [r3, #24]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	619a      	str	r2, [r3, #24]
      break;
 800695a:	e0a5      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fb18 	bl	8006f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6999      	ldr	r1, [r3, #24]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	021a      	lsls	r2, r3, #8
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	619a      	str	r2, [r3, #24]
      break;
 800699c:	e084      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fb8b 	bl	80070c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0208 	orr.w	r2, r2, #8
 80069b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0204 	bic.w	r2, r2, #4
 80069c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69d9      	ldr	r1, [r3, #28]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	61da      	str	r2, [r3, #28]
      break;
 80069dc:	e064      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fbfd 	bl	80071e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69d9      	ldr	r1, [r3, #28]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	021a      	lsls	r2, r3, #8
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	61da      	str	r2, [r3, #28]
      break;
 8006a1e:	e043      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fc70 	bl	800730c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0208 	orr.w	r2, r2, #8
 8006a3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0204 	bic.w	r2, r2, #4
 8006a4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a5e:	e023      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fcba 	bl	80073e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	021a      	lsls	r2, r3, #8
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006aa0:	e002      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop

08006abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e0e6      	b.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1ea>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a67      	ldr	r2, [pc, #412]	; (8006cb0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	f000 80b1 	beq.w	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006b18:	4a65      	ldr	r2, [pc, #404]	; (8006cb0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	f200 80b6 	bhi.w	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b20:	4a64      	ldr	r2, [pc, #400]	; (8006cb4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	f000 80a9 	beq.w	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006b28:	4a62      	ldr	r2, [pc, #392]	; (8006cb4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	f200 80ae 	bhi.w	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b30:	4a61      	ldr	r2, [pc, #388]	; (8006cb8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	f000 80a1 	beq.w	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006b38:	4a5f      	ldr	r2, [pc, #380]	; (8006cb8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	f200 80a6 	bhi.w	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b40:	4a5e      	ldr	r2, [pc, #376]	; (8006cbc <HAL_TIM_ConfigClockSource+0x200>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	f000 8099 	beq.w	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006b48:	4a5c      	ldr	r2, [pc, #368]	; (8006cbc <HAL_TIM_ConfigClockSource+0x200>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	f200 809e 	bhi.w	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b50:	4a5b      	ldr	r2, [pc, #364]	; (8006cc0 <HAL_TIM_ConfigClockSource+0x204>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	f000 8091 	beq.w	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006b58:	4a59      	ldr	r2, [pc, #356]	; (8006cc0 <HAL_TIM_ConfigClockSource+0x204>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	f200 8096 	bhi.w	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b64:	f000 8089 	beq.w	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006b68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b6c:	f200 808e 	bhi.w	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b74:	d03e      	beq.n	8006bf4 <HAL_TIM_ConfigClockSource+0x138>
 8006b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7a:	f200 8087 	bhi.w	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b82:	f000 8086 	beq.w	8006c92 <HAL_TIM_ConfigClockSource+0x1d6>
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	d87f      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b8c:	2b70      	cmp	r3, #112	; 0x70
 8006b8e:	d01a      	beq.n	8006bc6 <HAL_TIM_ConfigClockSource+0x10a>
 8006b90:	2b70      	cmp	r3, #112	; 0x70
 8006b92:	d87b      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b94:	2b60      	cmp	r3, #96	; 0x60
 8006b96:	d050      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x17e>
 8006b98:	2b60      	cmp	r3, #96	; 0x60
 8006b9a:	d877      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006b9c:	2b50      	cmp	r3, #80	; 0x50
 8006b9e:	d03c      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x15e>
 8006ba0:	2b50      	cmp	r3, #80	; 0x50
 8006ba2:	d873      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006ba4:	2b40      	cmp	r3, #64	; 0x40
 8006ba6:	d058      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x19e>
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d86f      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006bac:	2b30      	cmp	r3, #48	; 0x30
 8006bae:	d064      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d86b      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d060      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d867      	bhi.n	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d05c      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006bc0:	2b10      	cmp	r3, #16
 8006bc2:	d05a      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006bc4:	e062      	b.n	8006c8c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6899      	ldr	r1, [r3, #8]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f000 fceb 	bl	80075b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	609a      	str	r2, [r3, #8]
      break;
 8006bf2:	e04f      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	6899      	ldr	r1, [r3, #8]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f000 fcd4 	bl	80075b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c16:	609a      	str	r2, [r3, #8]
      break;
 8006c18:	e03c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6859      	ldr	r1, [r3, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	461a      	mov	r2, r3
 8006c28:	f000 fc46 	bl	80074b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2150      	movs	r1, #80	; 0x50
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fc9f 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006c38:	e02c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f000 fc65 	bl	8007516 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2160      	movs	r1, #96	; 0x60
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fc8f 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006c58:	e01c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6859      	ldr	r1, [r3, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	461a      	mov	r2, r3
 8006c68:	f000 fc26 	bl	80074b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2140      	movs	r1, #64	; 0x40
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fc7f 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006c78:	e00c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f000 fc76 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006c8a:	e003      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c90:	e000      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8006c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	00100070 	.word	0x00100070
 8006cb4:	00100050 	.word	0x00100050
 8006cb8:	00100040 	.word	0x00100040
 8006cbc:	00100030 	.word	0x00100030
 8006cc0:	00100020 	.word	0x00100020

08006cc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a42      	ldr	r2, [pc, #264]	; (8006e44 <TIM_Base_SetConfig+0x11c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <TIM_Base_SetConfig+0x40>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d46:	d00f      	beq.n	8006d68 <TIM_Base_SetConfig+0x40>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a3f      	ldr	r2, [pc, #252]	; (8006e48 <TIM_Base_SetConfig+0x120>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00b      	beq.n	8006d68 <TIM_Base_SetConfig+0x40>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a3e      	ldr	r2, [pc, #248]	; (8006e4c <TIM_Base_SetConfig+0x124>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d007      	beq.n	8006d68 <TIM_Base_SetConfig+0x40>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a3d      	ldr	r2, [pc, #244]	; (8006e50 <TIM_Base_SetConfig+0x128>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_Base_SetConfig+0x40>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a3c      	ldr	r2, [pc, #240]	; (8006e54 <TIM_Base_SetConfig+0x12c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d108      	bne.n	8006d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a31      	ldr	r2, [pc, #196]	; (8006e44 <TIM_Base_SetConfig+0x11c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01f      	beq.n	8006dc2 <TIM_Base_SetConfig+0x9a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d88:	d01b      	beq.n	8006dc2 <TIM_Base_SetConfig+0x9a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a2e      	ldr	r2, [pc, #184]	; (8006e48 <TIM_Base_SetConfig+0x120>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d017      	beq.n	8006dc2 <TIM_Base_SetConfig+0x9a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a2d      	ldr	r2, [pc, #180]	; (8006e4c <TIM_Base_SetConfig+0x124>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <TIM_Base_SetConfig+0x9a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2c      	ldr	r2, [pc, #176]	; (8006e50 <TIM_Base_SetConfig+0x128>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00f      	beq.n	8006dc2 <TIM_Base_SetConfig+0x9a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2c      	ldr	r2, [pc, #176]	; (8006e58 <TIM_Base_SetConfig+0x130>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00b      	beq.n	8006dc2 <TIM_Base_SetConfig+0x9a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a2b      	ldr	r2, [pc, #172]	; (8006e5c <TIM_Base_SetConfig+0x134>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d007      	beq.n	8006dc2 <TIM_Base_SetConfig+0x9a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <TIM_Base_SetConfig+0x138>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d003      	beq.n	8006dc2 <TIM_Base_SetConfig+0x9a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a25      	ldr	r2, [pc, #148]	; (8006e54 <TIM_Base_SetConfig+0x12c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d108      	bne.n	8006dd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a12      	ldr	r2, [pc, #72]	; (8006e44 <TIM_Base_SetConfig+0x11c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d013      	beq.n	8006e28 <TIM_Base_SetConfig+0x100>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a13      	ldr	r2, [pc, #76]	; (8006e50 <TIM_Base_SetConfig+0x128>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00f      	beq.n	8006e28 <TIM_Base_SetConfig+0x100>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <TIM_Base_SetConfig+0x130>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00b      	beq.n	8006e28 <TIM_Base_SetConfig+0x100>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a12      	ldr	r2, [pc, #72]	; (8006e5c <TIM_Base_SetConfig+0x134>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d007      	beq.n	8006e28 <TIM_Base_SetConfig+0x100>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a11      	ldr	r2, [pc, #68]	; (8006e60 <TIM_Base_SetConfig+0x138>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d003      	beq.n	8006e28 <TIM_Base_SetConfig+0x100>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a0c      	ldr	r2, [pc, #48]	; (8006e54 <TIM_Base_SetConfig+0x12c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d103      	bne.n	8006e30 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	691a      	ldr	r2, [r3, #16]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	615a      	str	r2, [r3, #20]
}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40012c00 	.word	0x40012c00
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	40013400 	.word	0x40013400
 8006e54:	40015000 	.word	0x40015000
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40014400 	.word	0x40014400
 8006e60:	40014800 	.word	0x40014800

08006e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f023 0302 	bic.w	r3, r3, #2
 8006eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a30      	ldr	r2, [pc, #192]	; (8006f80 <TIM_OC1_SetConfig+0x11c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d013      	beq.n	8006eec <TIM_OC1_SetConfig+0x88>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <TIM_OC1_SetConfig+0x120>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00f      	beq.n	8006eec <TIM_OC1_SetConfig+0x88>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a2e      	ldr	r2, [pc, #184]	; (8006f88 <TIM_OC1_SetConfig+0x124>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00b      	beq.n	8006eec <TIM_OC1_SetConfig+0x88>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a2d      	ldr	r2, [pc, #180]	; (8006f8c <TIM_OC1_SetConfig+0x128>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d007      	beq.n	8006eec <TIM_OC1_SetConfig+0x88>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a2c      	ldr	r2, [pc, #176]	; (8006f90 <TIM_OC1_SetConfig+0x12c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d003      	beq.n	8006eec <TIM_OC1_SetConfig+0x88>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a2b      	ldr	r2, [pc, #172]	; (8006f94 <TIM_OC1_SetConfig+0x130>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d10c      	bne.n	8006f06 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f023 0308 	bic.w	r3, r3, #8
 8006ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f023 0304 	bic.w	r3, r3, #4
 8006f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a1d      	ldr	r2, [pc, #116]	; (8006f80 <TIM_OC1_SetConfig+0x11c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d013      	beq.n	8006f36 <TIM_OC1_SetConfig+0xd2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a1c      	ldr	r2, [pc, #112]	; (8006f84 <TIM_OC1_SetConfig+0x120>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00f      	beq.n	8006f36 <TIM_OC1_SetConfig+0xd2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a1b      	ldr	r2, [pc, #108]	; (8006f88 <TIM_OC1_SetConfig+0x124>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00b      	beq.n	8006f36 <TIM_OC1_SetConfig+0xd2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a1a      	ldr	r2, [pc, #104]	; (8006f8c <TIM_OC1_SetConfig+0x128>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d007      	beq.n	8006f36 <TIM_OC1_SetConfig+0xd2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a19      	ldr	r2, [pc, #100]	; (8006f90 <TIM_OC1_SetConfig+0x12c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_OC1_SetConfig+0xd2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a18      	ldr	r2, [pc, #96]	; (8006f94 <TIM_OC1_SetConfig+0x130>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d111      	bne.n	8006f5a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	621a      	str	r2, [r3, #32]
}
 8006f74:	bf00      	nop
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	40012c00 	.word	0x40012c00
 8006f84:	40013400 	.word	0x40013400
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40014400 	.word	0x40014400
 8006f90:	40014800 	.word	0x40014800
 8006f94:	40015000 	.word	0x40015000

08006f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	f023 0210 	bic.w	r2, r3, #16
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f023 0320 	bic.w	r3, r3, #32
 8006fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a2c      	ldr	r2, [pc, #176]	; (80070a8 <TIM_OC2_SetConfig+0x110>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d007      	beq.n	800700c <TIM_OC2_SetConfig+0x74>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a2b      	ldr	r2, [pc, #172]	; (80070ac <TIM_OC2_SetConfig+0x114>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d003      	beq.n	800700c <TIM_OC2_SetConfig+0x74>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a2a      	ldr	r2, [pc, #168]	; (80070b0 <TIM_OC2_SetConfig+0x118>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d10d      	bne.n	8007028 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007026:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a1f      	ldr	r2, [pc, #124]	; (80070a8 <TIM_OC2_SetConfig+0x110>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d013      	beq.n	8007058 <TIM_OC2_SetConfig+0xc0>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a1e      	ldr	r2, [pc, #120]	; (80070ac <TIM_OC2_SetConfig+0x114>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00f      	beq.n	8007058 <TIM_OC2_SetConfig+0xc0>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <TIM_OC2_SetConfig+0x11c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00b      	beq.n	8007058 <TIM_OC2_SetConfig+0xc0>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a1d      	ldr	r2, [pc, #116]	; (80070b8 <TIM_OC2_SetConfig+0x120>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d007      	beq.n	8007058 <TIM_OC2_SetConfig+0xc0>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a1c      	ldr	r2, [pc, #112]	; (80070bc <TIM_OC2_SetConfig+0x124>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <TIM_OC2_SetConfig+0xc0>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a17      	ldr	r2, [pc, #92]	; (80070b0 <TIM_OC2_SetConfig+0x118>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d113      	bne.n	8007080 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800705e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4313      	orrs	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	621a      	str	r2, [r3, #32]
}
 800709a:	bf00      	nop
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40013400 	.word	0x40013400
 80070b0:	40015000 	.word	0x40015000
 80070b4:	40014000 	.word	0x40014000
 80070b8:	40014400 	.word	0x40014400
 80070bc:	40014800 	.word	0x40014800

080070c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800710c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2b      	ldr	r2, [pc, #172]	; (80071cc <TIM_OC3_SetConfig+0x10c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d007      	beq.n	8007132 <TIM_OC3_SetConfig+0x72>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a2a      	ldr	r2, [pc, #168]	; (80071d0 <TIM_OC3_SetConfig+0x110>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d003      	beq.n	8007132 <TIM_OC3_SetConfig+0x72>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a29      	ldr	r2, [pc, #164]	; (80071d4 <TIM_OC3_SetConfig+0x114>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10d      	bne.n	800714e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800714c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <TIM_OC3_SetConfig+0x10c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <TIM_OC3_SetConfig+0xbe>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a1d      	ldr	r2, [pc, #116]	; (80071d0 <TIM_OC3_SetConfig+0x110>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00f      	beq.n	800717e <TIM_OC3_SetConfig+0xbe>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <TIM_OC3_SetConfig+0x118>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00b      	beq.n	800717e <TIM_OC3_SetConfig+0xbe>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a1c      	ldr	r2, [pc, #112]	; (80071dc <TIM_OC3_SetConfig+0x11c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d007      	beq.n	800717e <TIM_OC3_SetConfig+0xbe>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a1b      	ldr	r2, [pc, #108]	; (80071e0 <TIM_OC3_SetConfig+0x120>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d003      	beq.n	800717e <TIM_OC3_SetConfig+0xbe>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <TIM_OC3_SetConfig+0x114>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d113      	bne.n	80071a6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800718c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	621a      	str	r2, [r3, #32]
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	40012c00 	.word	0x40012c00
 80071d0:	40013400 	.word	0x40013400
 80071d4:	40015000 	.word	0x40015000
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40014400 	.word	0x40014400
 80071e0:	40014800 	.word	0x40014800

080071e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	031b      	lsls	r3, r3, #12
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a2c      	ldr	r2, [pc, #176]	; (80072f4 <TIM_OC4_SetConfig+0x110>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d007      	beq.n	8007258 <TIM_OC4_SetConfig+0x74>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a2b      	ldr	r2, [pc, #172]	; (80072f8 <TIM_OC4_SetConfig+0x114>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC4_SetConfig+0x74>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <TIM_OC4_SetConfig+0x118>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d10d      	bne.n	8007274 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800725e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	031b      	lsls	r3, r3, #12
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a1f      	ldr	r2, [pc, #124]	; (80072f4 <TIM_OC4_SetConfig+0x110>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d013      	beq.n	80072a4 <TIM_OC4_SetConfig+0xc0>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a1e      	ldr	r2, [pc, #120]	; (80072f8 <TIM_OC4_SetConfig+0x114>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00f      	beq.n	80072a4 <TIM_OC4_SetConfig+0xc0>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <TIM_OC4_SetConfig+0x11c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00b      	beq.n	80072a4 <TIM_OC4_SetConfig+0xc0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <TIM_OC4_SetConfig+0x120>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d007      	beq.n	80072a4 <TIM_OC4_SetConfig+0xc0>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a1c      	ldr	r2, [pc, #112]	; (8007308 <TIM_OC4_SetConfig+0x124>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_OC4_SetConfig+0xc0>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <TIM_OC4_SetConfig+0x118>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d113      	bne.n	80072cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	019b      	lsls	r3, r3, #6
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	019b      	lsls	r3, r3, #6
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40013400 	.word	0x40013400
 80072fc:	40015000 	.word	0x40015000
 8007300:	40014000 	.word	0x40014000
 8007304:	40014400 	.word	0x40014400
 8007308:	40014800 	.word	0x40014800

0800730c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007350:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <TIM_OC5_SetConfig+0xbc>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d013      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a18      	ldr	r2, [pc, #96]	; (80073cc <TIM_OC5_SetConfig+0xc0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00f      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <TIM_OC5_SetConfig+0xc4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00b      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a16      	ldr	r2, [pc, #88]	; (80073d4 <TIM_OC5_SetConfig+0xc8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d007      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <TIM_OC5_SetConfig+0xcc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d003      	beq.n	800738e <TIM_OC5_SetConfig+0x82>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a14      	ldr	r2, [pc, #80]	; (80073dc <TIM_OC5_SetConfig+0xd0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d109      	bne.n	80073a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007394:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	621a      	str	r2, [r3, #32]
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40013400 	.word	0x40013400
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40014800 	.word	0x40014800
 80073dc:	40015000 	.word	0x40015000

080073e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800740e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	051b      	lsls	r3, r3, #20
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a1a      	ldr	r2, [pc, #104]	; (80074a0 <TIM_OC6_SetConfig+0xc0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a19      	ldr	r2, [pc, #100]	; (80074a4 <TIM_OC6_SetConfig+0xc4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00f      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <TIM_OC6_SetConfig+0xc8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00b      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a17      	ldr	r2, [pc, #92]	; (80074ac <TIM_OC6_SetConfig+0xcc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d007      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a16      	ldr	r2, [pc, #88]	; (80074b0 <TIM_OC6_SetConfig+0xd0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d003      	beq.n	8007464 <TIM_OC6_SetConfig+0x84>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a15      	ldr	r2, [pc, #84]	; (80074b4 <TIM_OC6_SetConfig+0xd4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d109      	bne.n	8007478 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800746a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	621a      	str	r2, [r3, #32]
}
 8007492:	bf00      	nop
 8007494:	371c      	adds	r7, #28
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40012c00 	.word	0x40012c00
 80074a4:	40013400 	.word	0x40013400
 80074a8:	40014000 	.word	0x40014000
 80074ac:	40014400 	.word	0x40014400
 80074b0:	40014800 	.word	0x40014800
 80074b4:	40015000 	.word	0x40015000

080074b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f023 0201 	bic.w	r2, r3, #1
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f023 030a 	bic.w	r3, r3, #10
 80074f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	621a      	str	r2, [r3, #32]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007516:	b480      	push	{r7}
 8007518:	b087      	sub	sp, #28
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	f023 0210 	bic.w	r2, r3, #16
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	031b      	lsls	r3, r3, #12
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007552:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	4313      	orrs	r3, r2
 800755c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	621a      	str	r2, [r3, #32]
}
 800756a:	bf00      	nop
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007576:	b480      	push	{r7}
 8007578:	b085      	sub	sp, #20
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800758c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	f043 0307 	orr.w	r3, r3, #7
 800759c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	609a      	str	r2, [r3, #8]
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	021a      	lsls	r2, r3, #8
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	609a      	str	r2, [r3, #8]
}
 80075e4:	bf00      	nop
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007604:	2302      	movs	r3, #2
 8007606:	e06f      	b.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a31      	ldr	r2, [pc, #196]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d009      	beq.n	8007646 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a30      	ldr	r2, [pc, #192]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d004      	beq.n	8007646 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a2e      	ldr	r2, [pc, #184]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d108      	bne.n	8007658 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800764c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800765e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d01d      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d018      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1c      	ldr	r2, [pc, #112]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d013      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1a      	ldr	r2, [pc, #104]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00e      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d009      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a16      	ldr	r2, [pc, #88]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d004      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a11      	ldr	r2, [pc, #68]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10c      	bne.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	40012c00 	.word	0x40012c00
 80076f8:	40013400 	.word	0x40013400
 80076fc:	40015000 	.word	0x40015000
 8007700:	40000400 	.word	0x40000400
 8007704:	40000800 	.word	0x40000800
 8007708:	40014000 	.word	0x40014000

0800770c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e042      	b.n	8007830 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d106      	bne.n	80077c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7fb faeb 	bl	8002d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2224      	movs	r2, #36	; 0x24
 80077c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0201 	bic.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fc62 	bl	80080a4 <UART_SetConfig>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e022      	b.n	8007830 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 ff52 	bl	800869c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 ffd9 	bl	80087e0 <UART_CheckIdleState>
 800782e:	4603      	mov	r3, r0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007838:	b480      	push	{r7}
 800783a:	b091      	sub	sp, #68	; 0x44
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4613      	mov	r3, r2
 8007844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784c:	2b20      	cmp	r3, #32
 800784e:	f040 808c 	bne.w	800796a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_UART_Transmit_IT+0x26>
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e084      	b.n	800796c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_UART_Transmit_IT+0x38>
 800786c:	2302      	movs	r3, #2
 800786e:	e07d      	b.n	800796c <HAL_UART_Transmit_IT+0x134>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2221      	movs	r2, #33	; 0x21
 80078a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ac:	d12e      	bne.n	800790c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b6:	d107      	bne.n	80078c8 <HAL_UART_Transmit_IT+0x90>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4a2d      	ldr	r2, [pc, #180]	; (8007978 <HAL_UART_Transmit_IT+0x140>)
 80078c4:	675a      	str	r2, [r3, #116]	; 0x74
 80078c6:	e002      	b.n	80078ce <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4a2c      	ldr	r2, [pc, #176]	; (800797c <HAL_UART_Transmit_IT+0x144>)
 80078cc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3308      	adds	r3, #8
 80078f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078f6:	637a      	str	r2, [r7, #52]	; 0x34
 80078f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e5      	bne.n	80078d6 <HAL_UART_Transmit_IT+0x9e>
 800790a:	e02c      	b.n	8007966 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007914:	d107      	bne.n	8007926 <HAL_UART_Transmit_IT+0xee>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d103      	bne.n	8007926 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4a17      	ldr	r2, [pc, #92]	; (8007980 <HAL_UART_Transmit_IT+0x148>)
 8007922:	675a      	str	r2, [r3, #116]	; 0x74
 8007924:	e002      	b.n	800792c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4a16      	ldr	r2, [pc, #88]	; (8007984 <HAL_UART_Transmit_IT+0x14c>)
 800792a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	613b      	str	r3, [r7, #16]
   return(result);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007952:	623b      	str	r3, [r7, #32]
 8007954:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	69f9      	ldr	r1, [r7, #28]
 8007958:	6a3a      	ldr	r2, [r7, #32]
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e6      	bne.n	8007934 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	e000      	b.n	800796c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800796a:	2302      	movs	r3, #2
  }
}
 800796c:	4618      	mov	r0, r3
 800796e:	3744      	adds	r7, #68	; 0x44
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	08008faf 	.word	0x08008faf
 800797c:	08008ecf 	.word	0x08008ecf
 8007980:	08008e0d 	.word	0x08008e0d
 8007984:	08008d55 	.word	0x08008d55

08007988 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799c:	2b20      	cmp	r3, #32
 800799e:	d142      	bne.n	8007a26 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_UART_Receive_IT+0x24>
 80079a6:	88fb      	ldrh	r3, [r7, #6]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e03b      	b.n	8007a28 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d101      	bne.n	80079be <HAL_UART_Receive_IT+0x36>
 80079ba:	2302      	movs	r3, #2
 80079bc:	e034      	b.n	8007a28 <HAL_UART_Receive_IT+0xa0>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a17      	ldr	r2, [pc, #92]	; (8007a30 <HAL_UART_Receive_IT+0xa8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d01f      	beq.n	8007a16 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d018      	beq.n	8007a16 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	613b      	str	r3, [r7, #16]
   return(result);
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	623b      	str	r3, [r7, #32]
 8007a04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	69f9      	ldr	r1, [r7, #28]
 8007a08:	6a3a      	ldr	r2, [r7, #32]
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e6      	bne.n	80079e4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fff3 	bl	8008a08 <UART_Start_Receive_IT>
 8007a22:	4603      	mov	r3, r0
 8007a24:	e000      	b.n	8007a28 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a26:	2302      	movs	r3, #2
  }
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3728      	adds	r7, #40	; 0x28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	40008000 	.word	0x40008000

08007a34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b0ba      	sub	sp, #232	; 0xe8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a62:	4013      	ands	r3, r2
 8007a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d11b      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d015      	beq.n	8007aa8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d105      	bne.n	8007a94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d009      	beq.n	8007aa8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 82d6 	beq.w	800804a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
      }
      return;
 8007aa6:	e2d0      	b.n	800804a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 811f 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007ab2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ab6:	4b8b      	ldr	r3, [pc, #556]	; (8007ce4 <HAL_UART_IRQHandler+0x2b0>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d106      	bne.n	8007acc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007abe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ac2:	4b89      	ldr	r3, [pc, #548]	; (8007ce8 <HAL_UART_IRQHandler+0x2b4>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 8112 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d011      	beq.n	8007afc <HAL_UART_IRQHandler+0xc8>
 8007ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af2:	f043 0201 	orr.w	r2, r3, #1
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d011      	beq.n	8007b2c <HAL_UART_IRQHandler+0xf8>
 8007b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00b      	beq.n	8007b2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2202      	movs	r2, #2
 8007b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b22:	f043 0204 	orr.w	r2, r3, #4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d011      	beq.n	8007b5c <HAL_UART_IRQHandler+0x128>
 8007b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2204      	movs	r2, #4
 8007b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b52:	f043 0202 	orr.w	r2, r3, #2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d017      	beq.n	8007b98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6c:	f003 0320 	and.w	r3, r3, #32
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d105      	bne.n	8007b80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b78:	4b5a      	ldr	r3, [pc, #360]	; (8007ce4 <HAL_UART_IRQHandler+0x2b0>)
 8007b7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2208      	movs	r2, #8
 8007b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b8e:	f043 0208 	orr.w	r2, r3, #8
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d012      	beq.n	8007bca <HAL_UART_IRQHandler+0x196>
 8007ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00c      	beq.n	8007bca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc0:	f043 0220 	orr.w	r2, r3, #32
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 823c 	beq.w	800804e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d013      	beq.n	8007c0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d105      	bne.n	8007bfa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1e:	2b40      	cmp	r3, #64	; 0x40
 8007c20:	d005      	beq.n	8007c2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d04f      	beq.n	8007cce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 f814 	bl	8008c5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3e:	2b40      	cmp	r3, #64	; 0x40
 8007c40:	d141      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3308      	adds	r3, #8
 8007c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1d9      	bne.n	8007c42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d013      	beq.n	8007cbe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9a:	4a14      	ldr	r2, [pc, #80]	; (8007cec <HAL_UART_IRQHandler+0x2b8>)
 8007c9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fc fceb 	bl	800467e <HAL_DMA_Abort_IT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d017      	beq.n	8007cde <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	e00f      	b.n	8007cde <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f9da 	bl	8008078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc4:	e00b      	b.n	8007cde <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f9d6 	bl	8008078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ccc:	e007      	b.n	8007cde <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f9d2 	bl	8008078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007cdc:	e1b7      	b.n	800804e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cde:	bf00      	nop
    return;
 8007ce0:	e1b5      	b.n	800804e <HAL_UART_IRQHandler+0x61a>
 8007ce2:	bf00      	nop
 8007ce4:	10000001 	.word	0x10000001
 8007ce8:	04000120 	.word	0x04000120
 8007cec:	08008d29 	.word	0x08008d29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	f040 814a 	bne.w	8007f8e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 8143 	beq.w	8007f8e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 813c 	beq.w	8007f8e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2210      	movs	r2, #16
 8007d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	f040 80b5 	bne.w	8007e98 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 8187 	beq.w	8008052 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	f080 817f 	bcs.w	8008052 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f040 8086 	bne.w	8007e7c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1da      	bne.n	8007d70 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007de2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e1      	bne.n	8007dba <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3308      	adds	r3, #8
 8007e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e3      	bne.n	8007df6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e4c:	f023 0310 	bic.w	r3, r3, #16
 8007e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e4      	bne.n	8007e3c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fc fba8 	bl	80045cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f8fb 	bl	800808c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e96:	e0dc      	b.n	8008052 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80ce 	beq.w	8008056 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007eba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 80c9 	beq.w	8008056 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e4      	bne.n	8007ec4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3308      	adds	r3, #8
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	623b      	str	r3, [r7, #32]
   return(result);
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f22:	633a      	str	r2, [r7, #48]	; 0x30
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e1      	bne.n	8007efa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0310 	bic.w	r3, r3, #16
 8007f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	69b9      	ldr	r1, [r7, #24]
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	617b      	str	r3, [r7, #20]
   return(result);
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e4      	bne.n	8007f4a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f880 	bl	800808c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f8c:	e063      	b.n	8008056 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00e      	beq.n	8007fb8 <HAL_UART_IRQHandler+0x584>
 8007f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d008      	beq.n	8007fb8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007fae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 fcf9 	bl	80099a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fb6:	e051      	b.n	800805c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d014      	beq.n	8007fee <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d105      	bne.n	8007fdc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d008      	beq.n	8007fee <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d03a      	beq.n	800805a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
    }
    return;
 8007fec:	e035      	b.n	800805a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <HAL_UART_IRQHandler+0x5da>
 8007ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 f846 	bl	8009098 <UART_EndTransmit_IT>
    return;
 800800c:	e026      	b.n	800805c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800800e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <HAL_UART_IRQHandler+0x5fa>
 800801a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800801e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fcd2 	bl	80099d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800802c:	e016      	b.n	800805c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800802e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d010      	beq.n	800805c <HAL_UART_IRQHandler+0x628>
 800803a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803e:	2b00      	cmp	r3, #0
 8008040:	da0c      	bge.n	800805c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fcba 	bl	80099bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008048:	e008      	b.n	800805c <HAL_UART_IRQHandler+0x628>
      return;
 800804a:	bf00      	nop
 800804c:	e006      	b.n	800805c <HAL_UART_IRQHandler+0x628>
    return;
 800804e:	bf00      	nop
 8008050:	e004      	b.n	800805c <HAL_UART_IRQHandler+0x628>
      return;
 8008052:	bf00      	nop
 8008054:	e002      	b.n	800805c <HAL_UART_IRQHandler+0x628>
      return;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <HAL_UART_IRQHandler+0x628>
    return;
 800805a:	bf00      	nop
  }
}
 800805c:	37e8      	adds	r7, #232	; 0xe8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop

08008064 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080a8:	b08c      	sub	sp, #48	; 0x30
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	431a      	orrs	r2, r3
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4baa      	ldr	r3, [pc, #680]	; (800837c <UART_SetConfig+0x2d8>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	6812      	ldr	r2, [r2, #0]
 80080da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080dc:	430b      	orrs	r3, r1
 80080de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a9f      	ldr	r2, [pc, #636]	; (8008380 <UART_SetConfig+0x2dc>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800810c:	4313      	orrs	r3, r2
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800811a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	6812      	ldr	r2, [r2, #0]
 8008122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008124:	430b      	orrs	r3, r1
 8008126:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	f023 010f 	bic.w	r1, r3, #15
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a90      	ldr	r2, [pc, #576]	; (8008384 <UART_SetConfig+0x2e0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d125      	bne.n	8008194 <UART_SetConfig+0xf0>
 8008148:	4b8f      	ldr	r3, [pc, #572]	; (8008388 <UART_SetConfig+0x2e4>)
 800814a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	2b03      	cmp	r3, #3
 8008154:	d81a      	bhi.n	800818c <UART_SetConfig+0xe8>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <UART_SetConfig+0xb8>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	0800816d 	.word	0x0800816d
 8008160:	0800817d 	.word	0x0800817d
 8008164:	08008175 	.word	0x08008175
 8008168:	08008185 	.word	0x08008185
 800816c:	2301      	movs	r3, #1
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008172:	e116      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008174:	2302      	movs	r3, #2
 8008176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817a:	e112      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800817c:	2304      	movs	r3, #4
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008182:	e10e      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008184:	2308      	movs	r3, #8
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818a:	e10a      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800818c:	2310      	movs	r3, #16
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008192:	e106      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a7c      	ldr	r2, [pc, #496]	; (800838c <UART_SetConfig+0x2e8>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d138      	bne.n	8008210 <UART_SetConfig+0x16c>
 800819e:	4b7a      	ldr	r3, [pc, #488]	; (8008388 <UART_SetConfig+0x2e4>)
 80081a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a4:	f003 030c 	and.w	r3, r3, #12
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	d82d      	bhi.n	8008208 <UART_SetConfig+0x164>
 80081ac:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <UART_SetConfig+0x110>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	080081e9 	.word	0x080081e9
 80081b8:	08008209 	.word	0x08008209
 80081bc:	08008209 	.word	0x08008209
 80081c0:	08008209 	.word	0x08008209
 80081c4:	080081f9 	.word	0x080081f9
 80081c8:	08008209 	.word	0x08008209
 80081cc:	08008209 	.word	0x08008209
 80081d0:	08008209 	.word	0x08008209
 80081d4:	080081f1 	.word	0x080081f1
 80081d8:	08008209 	.word	0x08008209
 80081dc:	08008209 	.word	0x08008209
 80081e0:	08008209 	.word	0x08008209
 80081e4:	08008201 	.word	0x08008201
 80081e8:	2300      	movs	r3, #0
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ee:	e0d8      	b.n	80083a2 <UART_SetConfig+0x2fe>
 80081f0:	2302      	movs	r3, #2
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f6:	e0d4      	b.n	80083a2 <UART_SetConfig+0x2fe>
 80081f8:	2304      	movs	r3, #4
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fe:	e0d0      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008200:	2308      	movs	r3, #8
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e0cc      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008208:	2310      	movs	r3, #16
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820e:	e0c8      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a5e      	ldr	r2, [pc, #376]	; (8008390 <UART_SetConfig+0x2ec>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d125      	bne.n	8008266 <UART_SetConfig+0x1c2>
 800821a:	4b5b      	ldr	r3, [pc, #364]	; (8008388 <UART_SetConfig+0x2e4>)
 800821c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008220:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008224:	2b30      	cmp	r3, #48	; 0x30
 8008226:	d016      	beq.n	8008256 <UART_SetConfig+0x1b2>
 8008228:	2b30      	cmp	r3, #48	; 0x30
 800822a:	d818      	bhi.n	800825e <UART_SetConfig+0x1ba>
 800822c:	2b20      	cmp	r3, #32
 800822e:	d00a      	beq.n	8008246 <UART_SetConfig+0x1a2>
 8008230:	2b20      	cmp	r3, #32
 8008232:	d814      	bhi.n	800825e <UART_SetConfig+0x1ba>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <UART_SetConfig+0x19a>
 8008238:	2b10      	cmp	r3, #16
 800823a:	d008      	beq.n	800824e <UART_SetConfig+0x1aa>
 800823c:	e00f      	b.n	800825e <UART_SetConfig+0x1ba>
 800823e:	2300      	movs	r3, #0
 8008240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008244:	e0ad      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008246:	2302      	movs	r3, #2
 8008248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824c:	e0a9      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800824e:	2304      	movs	r3, #4
 8008250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008254:	e0a5      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008256:	2308      	movs	r3, #8
 8008258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825c:	e0a1      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800825e:	2310      	movs	r3, #16
 8008260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008264:	e09d      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a4a      	ldr	r2, [pc, #296]	; (8008394 <UART_SetConfig+0x2f0>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d125      	bne.n	80082bc <UART_SetConfig+0x218>
 8008270:	4b45      	ldr	r3, [pc, #276]	; (8008388 <UART_SetConfig+0x2e4>)
 8008272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008276:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800827a:	2bc0      	cmp	r3, #192	; 0xc0
 800827c:	d016      	beq.n	80082ac <UART_SetConfig+0x208>
 800827e:	2bc0      	cmp	r3, #192	; 0xc0
 8008280:	d818      	bhi.n	80082b4 <UART_SetConfig+0x210>
 8008282:	2b80      	cmp	r3, #128	; 0x80
 8008284:	d00a      	beq.n	800829c <UART_SetConfig+0x1f8>
 8008286:	2b80      	cmp	r3, #128	; 0x80
 8008288:	d814      	bhi.n	80082b4 <UART_SetConfig+0x210>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <UART_SetConfig+0x1f0>
 800828e:	2b40      	cmp	r3, #64	; 0x40
 8008290:	d008      	beq.n	80082a4 <UART_SetConfig+0x200>
 8008292:	e00f      	b.n	80082b4 <UART_SetConfig+0x210>
 8008294:	2300      	movs	r3, #0
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829a:	e082      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800829c:	2302      	movs	r3, #2
 800829e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a2:	e07e      	b.n	80083a2 <UART_SetConfig+0x2fe>
 80082a4:	2304      	movs	r3, #4
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082aa:	e07a      	b.n	80083a2 <UART_SetConfig+0x2fe>
 80082ac:	2308      	movs	r3, #8
 80082ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b2:	e076      	b.n	80083a2 <UART_SetConfig+0x2fe>
 80082b4:	2310      	movs	r3, #16
 80082b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ba:	e072      	b.n	80083a2 <UART_SetConfig+0x2fe>
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a35      	ldr	r2, [pc, #212]	; (8008398 <UART_SetConfig+0x2f4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d12a      	bne.n	800831c <UART_SetConfig+0x278>
 80082c6:	4b30      	ldr	r3, [pc, #192]	; (8008388 <UART_SetConfig+0x2e4>)
 80082c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082d4:	d01a      	beq.n	800830c <UART_SetConfig+0x268>
 80082d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082da:	d81b      	bhi.n	8008314 <UART_SetConfig+0x270>
 80082dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e0:	d00c      	beq.n	80082fc <UART_SetConfig+0x258>
 80082e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e6:	d815      	bhi.n	8008314 <UART_SetConfig+0x270>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <UART_SetConfig+0x250>
 80082ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f0:	d008      	beq.n	8008304 <UART_SetConfig+0x260>
 80082f2:	e00f      	b.n	8008314 <UART_SetConfig+0x270>
 80082f4:	2300      	movs	r3, #0
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fa:	e052      	b.n	80083a2 <UART_SetConfig+0x2fe>
 80082fc:	2302      	movs	r3, #2
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008302:	e04e      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008304:	2304      	movs	r3, #4
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830a:	e04a      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800830c:	2308      	movs	r3, #8
 800830e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008312:	e046      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008314:	2310      	movs	r3, #16
 8008316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831a:	e042      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a17      	ldr	r2, [pc, #92]	; (8008380 <UART_SetConfig+0x2dc>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d13a      	bne.n	800839c <UART_SetConfig+0x2f8>
 8008326:	4b18      	ldr	r3, [pc, #96]	; (8008388 <UART_SetConfig+0x2e4>)
 8008328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008330:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008334:	d01a      	beq.n	800836c <UART_SetConfig+0x2c8>
 8008336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800833a:	d81b      	bhi.n	8008374 <UART_SetConfig+0x2d0>
 800833c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008340:	d00c      	beq.n	800835c <UART_SetConfig+0x2b8>
 8008342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008346:	d815      	bhi.n	8008374 <UART_SetConfig+0x2d0>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <UART_SetConfig+0x2b0>
 800834c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008350:	d008      	beq.n	8008364 <UART_SetConfig+0x2c0>
 8008352:	e00f      	b.n	8008374 <UART_SetConfig+0x2d0>
 8008354:	2300      	movs	r3, #0
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835a:	e022      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800835c:	2302      	movs	r3, #2
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008362:	e01e      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008364:	2304      	movs	r3, #4
 8008366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836a:	e01a      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800836c:	2308      	movs	r3, #8
 800836e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008372:	e016      	b.n	80083a2 <UART_SetConfig+0x2fe>
 8008374:	2310      	movs	r3, #16
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837a:	e012      	b.n	80083a2 <UART_SetConfig+0x2fe>
 800837c:	cfff69f3 	.word	0xcfff69f3
 8008380:	40008000 	.word	0x40008000
 8008384:	40013800 	.word	0x40013800
 8008388:	40021000 	.word	0x40021000
 800838c:	40004400 	.word	0x40004400
 8008390:	40004800 	.word	0x40004800
 8008394:	40004c00 	.word	0x40004c00
 8008398:	40005000 	.word	0x40005000
 800839c:	2310      	movs	r3, #16
 800839e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4aae      	ldr	r2, [pc, #696]	; (8008660 <UART_SetConfig+0x5bc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	f040 8097 	bne.w	80084dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d823      	bhi.n	80083fe <UART_SetConfig+0x35a>
 80083b6:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <UART_SetConfig+0x318>)
 80083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083bc:	080083e1 	.word	0x080083e1
 80083c0:	080083ff 	.word	0x080083ff
 80083c4:	080083e9 	.word	0x080083e9
 80083c8:	080083ff 	.word	0x080083ff
 80083cc:	080083ef 	.word	0x080083ef
 80083d0:	080083ff 	.word	0x080083ff
 80083d4:	080083ff 	.word	0x080083ff
 80083d8:	080083ff 	.word	0x080083ff
 80083dc:	080083f7 	.word	0x080083f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e0:	f7fd fd72 	bl	8005ec8 <HAL_RCC_GetPCLK1Freq>
 80083e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083e6:	e010      	b.n	800840a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083e8:	4b9e      	ldr	r3, [pc, #632]	; (8008664 <UART_SetConfig+0x5c0>)
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083ec:	e00d      	b.n	800840a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ee:	f7fd fcfd 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 80083f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083f4:	e009      	b.n	800840a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083fc:	e005      	b.n	800840a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 8130 	beq.w	8008672 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	4a94      	ldr	r2, [pc, #592]	; (8008668 <UART_SetConfig+0x5c4>)
 8008418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800841c:	461a      	mov	r2, r3
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	fbb3 f3f2 	udiv	r3, r3, r2
 8008424:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	4413      	add	r3, r2
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	429a      	cmp	r2, r3
 8008434:	d305      	bcc.n	8008442 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	429a      	cmp	r2, r3
 8008440:	d903      	bls.n	800844a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008448:	e113      	b.n	8008672 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	2200      	movs	r2, #0
 800844e:	60bb      	str	r3, [r7, #8]
 8008450:	60fa      	str	r2, [r7, #12]
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	4a84      	ldr	r2, [pc, #528]	; (8008668 <UART_SetConfig+0x5c4>)
 8008458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800845c:	b29b      	uxth	r3, r3
 800845e:	2200      	movs	r2, #0
 8008460:	603b      	str	r3, [r7, #0]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800846c:	f7f7 fed4 	bl	8000218 <__aeabi_uldivmod>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	4610      	mov	r0, r2
 8008476:	4619      	mov	r1, r3
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	020b      	lsls	r3, r1, #8
 8008482:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008486:	0202      	lsls	r2, r0, #8
 8008488:	6979      	ldr	r1, [r7, #20]
 800848a:	6849      	ldr	r1, [r1, #4]
 800848c:	0849      	lsrs	r1, r1, #1
 800848e:	2000      	movs	r0, #0
 8008490:	460c      	mov	r4, r1
 8008492:	4605      	mov	r5, r0
 8008494:	eb12 0804 	adds.w	r8, r2, r4
 8008498:	eb43 0905 	adc.w	r9, r3, r5
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	469a      	mov	sl, r3
 80084a4:	4693      	mov	fp, r2
 80084a6:	4652      	mov	r2, sl
 80084a8:	465b      	mov	r3, fp
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	f7f7 feb3 	bl	8000218 <__aeabi_uldivmod>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4613      	mov	r3, r2
 80084b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084c0:	d308      	bcc.n	80084d4 <UART_SetConfig+0x430>
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c8:	d204      	bcs.n	80084d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	60da      	str	r2, [r3, #12]
 80084d2:	e0ce      	b.n	8008672 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084da:	e0ca      	b.n	8008672 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e4:	d166      	bne.n	80085b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80084e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d827      	bhi.n	800853e <UART_SetConfig+0x49a>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <UART_SetConfig+0x450>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008521 	.word	0x08008521
 80084fc:	08008529 	.word	0x08008529
 8008500:	0800853f 	.word	0x0800853f
 8008504:	0800852f 	.word	0x0800852f
 8008508:	0800853f 	.word	0x0800853f
 800850c:	0800853f 	.word	0x0800853f
 8008510:	0800853f 	.word	0x0800853f
 8008514:	08008537 	.word	0x08008537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008518:	f7fd fcd6 	bl	8005ec8 <HAL_RCC_GetPCLK1Freq>
 800851c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800851e:	e014      	b.n	800854a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008520:	f7fd fce8 	bl	8005ef4 <HAL_RCC_GetPCLK2Freq>
 8008524:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008526:	e010      	b.n	800854a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008528:	4b4e      	ldr	r3, [pc, #312]	; (8008664 <UART_SetConfig+0x5c0>)
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800852c:	e00d      	b.n	800854a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800852e:	f7fd fc5d 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 8008532:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008534:	e009      	b.n	800854a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800853c:	e005      	b.n	800854a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008548:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 8090 	beq.w	8008672 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	4a44      	ldr	r2, [pc, #272]	; (8008668 <UART_SetConfig+0x5c4>)
 8008558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800855c:	461a      	mov	r2, r3
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	fbb3 f3f2 	udiv	r3, r3, r2
 8008564:	005a      	lsls	r2, r3, #1
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	085b      	lsrs	r3, r3, #1
 800856c:	441a      	add	r2, r3
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	fbb2 f3f3 	udiv	r3, r2, r3
 8008576:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	2b0f      	cmp	r3, #15
 800857c:	d916      	bls.n	80085ac <UART_SetConfig+0x508>
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008584:	d212      	bcs.n	80085ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	b29b      	uxth	r3, r3
 800858a:	f023 030f 	bic.w	r3, r3, #15
 800858e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	085b      	lsrs	r3, r3, #1
 8008594:	b29b      	uxth	r3, r3
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	b29a      	uxth	r2, r3
 800859c:	8bfb      	ldrh	r3, [r7, #30]
 800859e:	4313      	orrs	r3, r2
 80085a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	8bfa      	ldrh	r2, [r7, #30]
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	e062      	b.n	8008672 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085b2:	e05e      	b.n	8008672 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d828      	bhi.n	800860e <UART_SetConfig+0x56a>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <UART_SetConfig+0x520>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085e9 	.word	0x080085e9
 80085c8:	080085f1 	.word	0x080085f1
 80085cc:	080085f9 	.word	0x080085f9
 80085d0:	0800860f 	.word	0x0800860f
 80085d4:	080085ff 	.word	0x080085ff
 80085d8:	0800860f 	.word	0x0800860f
 80085dc:	0800860f 	.word	0x0800860f
 80085e0:	0800860f 	.word	0x0800860f
 80085e4:	08008607 	.word	0x08008607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085e8:	f7fd fc6e 	bl	8005ec8 <HAL_RCC_GetPCLK1Freq>
 80085ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085ee:	e014      	b.n	800861a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085f0:	f7fd fc80 	bl	8005ef4 <HAL_RCC_GetPCLK2Freq>
 80085f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085f6:	e010      	b.n	800861a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085f8:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <UART_SetConfig+0x5c0>)
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085fc:	e00d      	b.n	800861a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085fe:	f7fd fbf5 	bl	8005dec <HAL_RCC_GetSysClockFreq>
 8008602:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008604:	e009      	b.n	800861a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800860c:	e005      	b.n	800861a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008618:	bf00      	nop
    }

    if (pclk != 0U)
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	d028      	beq.n	8008672 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	4a10      	ldr	r2, [pc, #64]	; (8008668 <UART_SetConfig+0x5c4>)
 8008626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800862a:	461a      	mov	r2, r3
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	441a      	add	r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008642:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	2b0f      	cmp	r3, #15
 8008648:	d910      	bls.n	800866c <UART_SetConfig+0x5c8>
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008650:	d20c      	bcs.n	800866c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	b29a      	uxth	r2, r3
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60da      	str	r2, [r3, #12]
 800865c:	e009      	b.n	8008672 <UART_SetConfig+0x5ce>
 800865e:	bf00      	nop
 8008660:	40008000 	.word	0x40008000
 8008664:	00f42400 	.word	0x00f42400
 8008668:	08009e1c 	.word	0x08009e1c
      }
      else
      {
        ret = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2201      	movs	r2, #1
 8008676:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2201      	movs	r2, #1
 800867e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2200      	movs	r2, #0
 8008686:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2200      	movs	r2, #0
 800868c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800868e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008692:	4618      	mov	r0, r3
 8008694:	3730      	adds	r7, #48	; 0x30
 8008696:	46bd      	mov	sp, r7
 8008698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800869c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00a      	beq.n	800874e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01a      	beq.n	80087b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800879a:	d10a      	bne.n	80087b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	430a      	orrs	r2, r1
 80087d2:	605a      	str	r2, [r3, #4]
  }
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087f0:	f7fa fc60 	bl	80030b4 <HAL_GetTick>
 80087f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0308 	and.w	r3, r3, #8
 8008800:	2b08      	cmp	r3, #8
 8008802:	d10e      	bne.n	8008822 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f82f 	bl	8008876 <UART_WaitOnFlagUntilTimeout>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e025      	b.n	800886e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b04      	cmp	r3, #4
 800882e:	d10e      	bne.n	800884e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f819 	bl	8008876 <UART_WaitOnFlagUntilTimeout>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e00f      	b.n	800886e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2220      	movs	r2, #32
 8008852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2220      	movs	r2, #32
 800885a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b09c      	sub	sp, #112	; 0x70
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	4613      	mov	r3, r2
 8008884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008886:	e0a9      	b.n	80089dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888e:	f000 80a5 	beq.w	80089dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008892:	f7fa fc0f 	bl	80030b4 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800889e:	429a      	cmp	r2, r3
 80088a0:	d302      	bcc.n	80088a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80088a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d140      	bne.n	800892a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088bc:	667b      	str	r3, [r7, #100]	; 0x64
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e6      	bne.n	80088a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	f023 0301 	bic.w	r3, r3, #1
 80088f0:	663b      	str	r3, [r7, #96]	; 0x60
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80088fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e5      	bne.n	80088da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2220      	movs	r2, #32
 8008912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2220      	movs	r2, #32
 800891a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e069      	b.n	80089fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d051      	beq.n	80089dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008946:	d149      	bne.n	80089dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008950:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	461a      	mov	r2, r3
 800896e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008970:	637b      	str	r3, [r7, #52]	; 0x34
 8008972:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800897e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e6      	bne.n	8008952 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	e853 3f00 	ldrex	r3, [r3]
 8008992:	613b      	str	r3, [r7, #16]
   return(result);
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f023 0301 	bic.w	r3, r3, #1
 800899a:	66bb      	str	r3, [r7, #104]	; 0x68
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3308      	adds	r3, #8
 80089a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089a4:	623a      	str	r2, [r7, #32]
 80089a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	69f9      	ldr	r1, [r7, #28]
 80089aa:	6a3a      	ldr	r2, [r7, #32]
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e5      	bne.n	8008984 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e010      	b.n	80089fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69da      	ldr	r2, [r3, #28]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4013      	ands	r3, r2
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	bf0c      	ite	eq
 80089ec:	2301      	moveq	r3, #1
 80089ee:	2300      	movne	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	f43f af46 	beq.w	8008888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3770      	adds	r7, #112	; 0x70
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b0a3      	sub	sp, #140	; 0x8c
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	88fa      	ldrh	r2, [r7, #6]
 8008a20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	88fa      	ldrh	r2, [r7, #6]
 8008a28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3a:	d10e      	bne.n	8008a5a <UART_Start_Receive_IT+0x52>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d105      	bne.n	8008a50 <UART_Start_Receive_IT+0x48>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a4e:	e02d      	b.n	8008aac <UART_Start_Receive_IT+0xa4>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	22ff      	movs	r2, #255	; 0xff
 8008a54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a58:	e028      	b.n	8008aac <UART_Start_Receive_IT+0xa4>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10d      	bne.n	8008a7e <UART_Start_Receive_IT+0x76>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d104      	bne.n	8008a74 <UART_Start_Receive_IT+0x6c>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	22ff      	movs	r2, #255	; 0xff
 8008a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a72:	e01b      	b.n	8008aac <UART_Start_Receive_IT+0xa4>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	227f      	movs	r2, #127	; 0x7f
 8008a78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a7c:	e016      	b.n	8008aac <UART_Start_Receive_IT+0xa4>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a86:	d10d      	bne.n	8008aa4 <UART_Start_Receive_IT+0x9c>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d104      	bne.n	8008a9a <UART_Start_Receive_IT+0x92>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	227f      	movs	r2, #127	; 0x7f
 8008a94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a98:	e008      	b.n	8008aac <UART_Start_Receive_IT+0xa4>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	223f      	movs	r2, #63	; 0x3f
 8008a9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008aa2:	e003      	b.n	8008aac <UART_Start_Receive_IT+0xa4>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2222      	movs	r2, #34	; 0x22
 8008ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ace:	f043 0301 	orr.w	r3, r3, #1
 8008ad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3308      	adds	r3, #8
 8008adc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008ae0:	673a      	str	r2, [r7, #112]	; 0x70
 8008ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008ae6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e3      	bne.n	8008abc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008afc:	d153      	bne.n	8008ba6 <UART_Start_Receive_IT+0x19e>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b04:	88fa      	ldrh	r2, [r7, #6]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d34d      	bcc.n	8008ba6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b12:	d107      	bne.n	8008b24 <UART_Start_Receive_IT+0x11c>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d103      	bne.n	8008b24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4a4b      	ldr	r2, [pc, #300]	; (8008c4c <UART_Start_Receive_IT+0x244>)
 8008b20:	671a      	str	r2, [r3, #112]	; 0x70
 8008b22:	e002      	b.n	8008b2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4a4a      	ldr	r2, [pc, #296]	; (8008c50 <UART_Start_Receive_IT+0x248>)
 8008b28:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01a      	beq.n	8008b70 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b5e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e4      	bne.n	8008b3a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3308      	adds	r3, #8
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7a:	e853 3f00 	ldrex	r3, [r3]
 8008b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b90:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b98:	e841 2300 	strex	r3, r2, [r1]
 8008b9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e5      	bne.n	8008b70 <UART_Start_Receive_IT+0x168>
 8008ba4:	e04a      	b.n	8008c3c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bae:	d107      	bne.n	8008bc0 <UART_Start_Receive_IT+0x1b8>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4a26      	ldr	r2, [pc, #152]	; (8008c54 <UART_Start_Receive_IT+0x24c>)
 8008bbc:	671a      	str	r2, [r3, #112]	; 0x70
 8008bbe:	e002      	b.n	8008bc6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a25      	ldr	r2, [pc, #148]	; (8008c58 <UART_Start_Receive_IT+0x250>)
 8008bc4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d019      	beq.n	8008c0a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008bea:	677b      	str	r3, [r7, #116]	; 0x74
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e6      	bne.n	8008bd6 <UART_Start_Receive_IT+0x1ce>
 8008c08:	e018      	b.n	8008c3c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	613b      	str	r3, [r7, #16]
   return(result);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f043 0320 	orr.w	r3, r3, #32
 8008c1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c28:	623b      	str	r3, [r7, #32]
 8008c2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	69f9      	ldr	r1, [r7, #28]
 8008c2e:	6a3a      	ldr	r2, [r7, #32]
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	378c      	adds	r7, #140	; 0x8c
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	080096a9 	.word	0x080096a9
 8008c50:	080093b1 	.word	0x080093b1
 8008c54:	0800924f 	.word	0x0800924f
 8008c58:	080090ef 	.word	0x080090ef

08008c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b095      	sub	sp, #84	; 0x54
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c82:	643b      	str	r3, [r7, #64]	; 0x40
 8008c84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e6      	bne.n	8008c64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cac:	f023 0301 	bic.w	r3, r3, #1
 8008cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e3      	bne.n	8008c96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d118      	bne.n	8008d08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f023 0310 	bic.w	r3, r3, #16
 8008cea:	647b      	str	r3, [r7, #68]	; 0x44
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf4:	61bb      	str	r3, [r7, #24]
 8008cf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6979      	ldr	r1, [r7, #20]
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	613b      	str	r3, [r7, #16]
   return(result);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e6      	bne.n	8008cd6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008d1c:	bf00      	nop
 8008d1e:	3754      	adds	r7, #84	; 0x54
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff f996 	bl	8008078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b08f      	sub	sp, #60	; 0x3c
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d62:	2b21      	cmp	r3, #33	; 0x21
 8008d64:	d14c      	bne.n	8008e00 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d132      	bne.n	8008dd8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d86:	637b      	str	r3, [r7, #52]	; 0x34
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d92:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e6      	bne.n	8008d72 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db8:	633b      	str	r3, [r7, #48]	; 0x30
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	61bb      	str	r3, [r7, #24]
 8008dc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	6979      	ldr	r1, [r7, #20]
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	e841 2300 	strex	r3, r2, [r1]
 8008dce:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e6      	bne.n	8008da4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008dd6:	e013      	b.n	8008e00 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ddc:	781a      	ldrb	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	3b01      	subs	r3, #1
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008e00:	bf00      	nop
 8008e02:	373c      	adds	r7, #60	; 0x3c
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b091      	sub	sp, #68	; 0x44
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e1a:	2b21      	cmp	r3, #33	; 0x21
 8008e1c:	d151      	bne.n	8008ec2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d132      	bne.n	8008e90 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	623b      	str	r3, [r7, #32]
   return(result);
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	633b      	str	r3, [r7, #48]	; 0x30
 8008e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e6      	bne.n	8008e2a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e70:	637b      	str	r3, [r7, #52]	; 0x34
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	69b9      	ldr	r1, [r7, #24]
 8008e80:	69fa      	ldr	r2, [r7, #28]
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	617b      	str	r3, [r7, #20]
   return(result);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e6      	bne.n	8008e5c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008e8e:	e018      	b.n	8008ec2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ea4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eaa:	1c9a      	adds	r2, r3, #2
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008ec2:	bf00      	nop
 8008ec4:	3744      	adds	r7, #68	; 0x44
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b091      	sub	sp, #68	; 0x44
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008edc:	2b21      	cmp	r3, #33	; 0x21
 8008ede:	d160      	bne.n	8008fa2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ee6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ee8:	e057      	b.n	8008f9a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d133      	bne.n	8008f5e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3308      	adds	r3, #8
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	623b      	str	r3, [r7, #32]
   return(result);
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3308      	adds	r3, #8
 8008f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f16:	633a      	str	r2, [r7, #48]	; 0x30
 8008f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e5      	bne.n	8008ef6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	e853 3f00 	ldrex	r3, [r3]
 8008f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4c:	69b9      	ldr	r1, [r7, #24]
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	e841 2300 	strex	r3, r2, [r1]
 8008f54:	617b      	str	r3, [r7, #20]
   return(result);
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e6      	bne.n	8008f2a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008f5c:	e021      	b.n	8008fa2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d013      	beq.n	8008f94 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f70:	781a      	ldrb	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008f94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f96:	3b01      	subs	r3, #1
 8008f98:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008f9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1a4      	bne.n	8008eea <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008fa0:	e7ff      	b.n	8008fa2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008fa2:	bf00      	nop
 8008fa4:	3744      	adds	r7, #68	; 0x44
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b091      	sub	sp, #68	; 0x44
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fbc:	2b21      	cmp	r3, #33	; 0x21
 8008fbe:	d165      	bne.n	800908c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008fc8:	e05c      	b.n	8009084 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d133      	bne.n	800903e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e5      	bne.n	8008fd6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	60bb      	str	r3, [r7, #8]
   return(result);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800901e:	633b      	str	r3, [r7, #48]	; 0x30
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	61bb      	str	r3, [r7, #24]
 800902a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6979      	ldr	r1, [r7, #20]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	613b      	str	r3, [r7, #16]
   return(result);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e6      	bne.n	800900a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800903c:	e026      	b.n	800908c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009048:	2b00      	cmp	r3, #0
 800904a:	d018      	beq.n	800907e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009050:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009060:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009066:	1c9a      	adds	r2, r3, #2
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009072:	b29b      	uxth	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800907e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009080:	3b01      	subs	r3, #1
 8009082:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009084:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009086:	2b00      	cmp	r3, #0
 8009088:	d19f      	bne.n	8008fca <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800908a:	e7ff      	b.n	800908c <UART_TxISR_16BIT_FIFOEN+0xde>
 800908c:	bf00      	nop
 800908e:	3744      	adds	r7, #68	; 0x44
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b4:	61fb      	str	r3, [r7, #28]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	61bb      	str	r3, [r7, #24]
 80090c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6979      	ldr	r1, [r7, #20]
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	613b      	str	r3, [r7, #16]
   return(result);
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e6      	bne.n	80090a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7fe ffbf 	bl	8008064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e6:	bf00      	nop
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b096      	sub	sp, #88	; 0x58
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009106:	2b22      	cmp	r3, #34	; 0x22
 8009108:	f040 8095 	bne.w	8009236 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009116:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800911a:	b2d9      	uxtb	r1, r3
 800911c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009120:	b2da      	uxtb	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009126:	400a      	ands	r2, r1
 8009128:	b2d2      	uxtb	r2, r2
 800912a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800913c:	b29b      	uxth	r3, r3
 800913e:	3b01      	subs	r3, #1
 8009140:	b29a      	uxth	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800914e:	b29b      	uxth	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	d178      	bne.n	8009246 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009168:	653b      	str	r3, [r7, #80]	; 0x50
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009172:	647b      	str	r3, [r7, #68]	; 0x44
 8009174:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e6      	bne.n	8009154 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3308      	adds	r3, #8
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	623b      	str	r3, [r7, #32]
   return(result);
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	f023 0301 	bic.w	r3, r3, #1
 800919c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091a6:	633a      	str	r2, [r7, #48]	; 0x30
 80091a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e5      	bne.n	8009186 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2220      	movs	r2, #32
 80091be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d12e      	bne.n	800922e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0310 	bic.w	r3, r3, #16
 80091ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f4:	61fb      	str	r3, [r7, #28]
 80091f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	69b9      	ldr	r1, [r7, #24]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	617b      	str	r3, [r7, #20]
   return(result);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e6      	bne.n	80091d6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	f003 0310 	and.w	r3, r3, #16
 8009212:	2b10      	cmp	r3, #16
 8009214:	d103      	bne.n	800921e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2210      	movs	r2, #16
 800921c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7fe ff30 	bl	800808c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800922c:	e00b      	b.n	8009246 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f9 fc02 	bl	8002a38 <HAL_UART_RxCpltCallback>
}
 8009234:	e007      	b.n	8009246 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 0208 	orr.w	r2, r2, #8
 8009244:	619a      	str	r2, [r3, #24]
}
 8009246:	bf00      	nop
 8009248:	3758      	adds	r7, #88	; 0x58
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b096      	sub	sp, #88	; 0x58
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800925c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009266:	2b22      	cmp	r3, #34	; 0x22
 8009268:	f040 8095 	bne.w	8009396 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800927c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009280:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009284:	4013      	ands	r3, r2
 8009286:	b29a      	uxth	r2, r3
 8009288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800928a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009290:	1c9a      	adds	r2, r3, #2
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800929c:	b29b      	uxth	r3, r3
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d178      	bne.n	80093a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d2:	643b      	str	r3, [r7, #64]	; 0x40
 80092d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e6      	bne.n	80092b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	f023 0301 	bic.w	r3, r3, #1
 80092fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3308      	adds	r3, #8
 8009304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009308:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800930c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e5      	bne.n	80092e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d12e      	bne.n	800938e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	60bb      	str	r3, [r7, #8]
   return(result);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f023 0310 	bic.w	r3, r3, #16
 800934a:	647b      	str	r3, [r7, #68]	; 0x44
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009354:	61bb      	str	r3, [r7, #24]
 8009356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6979      	ldr	r1, [r7, #20]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	613b      	str	r3, [r7, #16]
   return(result);
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e6      	bne.n	8009336 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f003 0310 	and.w	r3, r3, #16
 8009372:	2b10      	cmp	r3, #16
 8009374:	d103      	bne.n	800937e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2210      	movs	r2, #16
 800937c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7fe fe80 	bl	800808c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800938c:	e00b      	b.n	80093a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7f9 fb52 	bl	8002a38 <HAL_UART_RxCpltCallback>
}
 8009394:	e007      	b.n	80093a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0208 	orr.w	r2, r2, #8
 80093a4:	619a      	str	r2, [r3, #24]
}
 80093a6:	bf00      	nop
 80093a8:	3758      	adds	r7, #88	; 0x58
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b0a6      	sub	sp, #152	; 0x98
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093be:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e6:	2b22      	cmp	r3, #34	; 0x22
 80093e8:	f040 814f 	bne.w	800968a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093f6:	e0f6      	b.n	80095e6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009402:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009406:	b2d9      	uxtb	r1, r3
 8009408:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800940c:	b2da      	uxtb	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009412:	400a      	ands	r2, r1
 8009414:	b2d2      	uxtb	r2, r2
 8009416:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800943e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009442:	f003 0307 	and.w	r3, r3, #7
 8009446:	2b00      	cmp	r3, #0
 8009448:	d053      	beq.n	80094f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800944a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d011      	beq.n	800947a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800945a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2201      	movs	r2, #1
 8009468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009470:	f043 0201 	orr.w	r2, r3, #1
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800947a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d011      	beq.n	80094aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00b      	beq.n	80094aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2202      	movs	r2, #2
 8009498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a0:	f043 0204 	orr.w	r2, r3, #4
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094ae:	f003 0304 	and.w	r3, r3, #4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d011      	beq.n	80094da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80094b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00b      	beq.n	80094da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2204      	movs	r2, #4
 80094c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d0:	f043 0202 	orr.w	r2, r3, #2
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d006      	beq.n	80094f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7fe fdc7 	bl	8008078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d173      	bne.n	80095e6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800950c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800950e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009520:	66bb      	str	r3, [r7, #104]	; 0x68
 8009522:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009526:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800952e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e4      	bne.n	80094fe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3308      	adds	r3, #8
 800953a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800954a:	f023 0301 	bic.w	r3, r3, #1
 800954e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3308      	adds	r3, #8
 8009556:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009558:	657a      	str	r2, [r7, #84]	; 0x54
 800955a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800955e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e3      	bne.n	8009534 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957e:	2b01      	cmp	r3, #1
 8009580:	d12e      	bne.n	80095e0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	f023 0310 	bic.w	r3, r3, #16
 800959c:	67bb      	str	r3, [r7, #120]	; 0x78
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095a6:	643b      	str	r3, [r7, #64]	; 0x40
 80095a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e6      	bne.n	8009588 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	f003 0310 	and.w	r3, r3, #16
 80095c4:	2b10      	cmp	r3, #16
 80095c6:	d103      	bne.n	80095d0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2210      	movs	r2, #16
 80095ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7fe fd57 	bl	800808c <HAL_UARTEx_RxEventCallback>
 80095de:	e002      	b.n	80095e6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7f9 fa29 	bl	8002a38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d006      	beq.n	80095fc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80095ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f47f aefe 	bne.w	80093f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009606:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800960a:	2b00      	cmp	r3, #0
 800960c:	d045      	beq.n	800969a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009614:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009618:	429a      	cmp	r2, r3
 800961a:	d23e      	bcs.n	800969a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3308      	adds	r3, #8
 8009622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	61fb      	str	r3, [r7, #28]
   return(result);
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009632:	673b      	str	r3, [r7, #112]	; 0x70
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3308      	adds	r3, #8
 800963a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800963c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e5      	bne.n	800961c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a14      	ldr	r2, [pc, #80]	; (80096a4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009654:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	60bb      	str	r3, [r7, #8]
   return(result);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f043 0320 	orr.w	r3, r3, #32
 800966a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009674:	61bb      	str	r3, [r7, #24]
 8009676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6979      	ldr	r1, [r7, #20]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	613b      	str	r3, [r7, #16]
   return(result);
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e6      	bne.n	8009656 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009688:	e007      	b.n	800969a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699a      	ldr	r2, [r3, #24]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0208 	orr.w	r2, r2, #8
 8009698:	619a      	str	r2, [r3, #24]
}
 800969a:	bf00      	nop
 800969c:	3798      	adds	r7, #152	; 0x98
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	080090ef 	.word	0x080090ef

080096a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b0a8      	sub	sp, #160	; 0xa0
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096de:	2b22      	cmp	r3, #34	; 0x22
 80096e0:	f040 8153 	bne.w	800998a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096ee:	e0fa      	b.n	80098e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009702:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009706:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800970a:	4013      	ands	r3, r2
 800970c:	b29a      	uxth	r2, r3
 800970e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009712:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009718:	1c9a      	adds	r2, r3, #2
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009724:	b29b      	uxth	r3, r3
 8009726:	3b01      	subs	r3, #1
 8009728:	b29a      	uxth	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800973a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	2b00      	cmp	r3, #0
 8009744:	d053      	beq.n	80097ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009746:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b00      	cmp	r3, #0
 8009750:	d011      	beq.n	8009776 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00b      	beq.n	8009776 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2201      	movs	r2, #1
 8009764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800976c:	f043 0201 	orr.w	r2, r3, #1
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009776:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800977a:	f003 0302 	and.w	r3, r3, #2
 800977e:	2b00      	cmp	r3, #0
 8009780:	d011      	beq.n	80097a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2202      	movs	r2, #2
 8009794:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800979c:	f043 0204 	orr.w	r2, r3, #4
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097aa:	f003 0304 	and.w	r3, r3, #4
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d011      	beq.n	80097d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80097b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00b      	beq.n	80097d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2204      	movs	r2, #4
 80097c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097cc:	f043 0202 	orr.w	r2, r3, #2
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d006      	beq.n	80097ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7fe fc49 	bl	8008078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d175      	bne.n	80098e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800980a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800980e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800981c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800981e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009822:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009824:	e841 2300 	strex	r3, r2, [r1]
 8009828:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800982a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e4      	bne.n	80097fa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3308      	adds	r3, #8
 8009836:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009846:	f023 0301 	bic.w	r3, r3, #1
 800984a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3308      	adds	r3, #8
 8009854:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009858:	65ba      	str	r2, [r7, #88]	; 0x58
 800985a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800985e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009860:	e841 2300 	strex	r3, r2, [r1]
 8009864:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e1      	bne.n	8009830 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2220      	movs	r2, #32
 8009870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800987e:	2b01      	cmp	r3, #1
 8009880:	d12e      	bne.n	80098e0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009898:	f023 0310 	bic.w	r3, r3, #16
 800989c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80098a6:	647b      	str	r3, [r7, #68]	; 0x44
 80098a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e6      	bne.n	8009888 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	f003 0310 	and.w	r3, r3, #16
 80098c4:	2b10      	cmp	r3, #16
 80098c6:	d103      	bne.n	80098d0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2210      	movs	r2, #16
 80098ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7fe fbd7 	bl	800808c <HAL_UARTEx_RxEventCallback>
 80098de:	e002      	b.n	80098e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7f9 f8a9 	bl	8002a38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d006      	beq.n	80098fc <UART_RxISR_16BIT_FIFOEN+0x254>
 80098ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f47f aefa 	bne.w	80096f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009902:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009906:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800990a:	2b00      	cmp	r3, #0
 800990c:	d045      	beq.n	800999a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009914:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009918:	429a      	cmp	r2, r3
 800991a:	d23e      	bcs.n	800999a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3308      	adds	r3, #8
 8009922:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	623b      	str	r3, [r7, #32]
   return(result);
 800992c:	6a3b      	ldr	r3, [r7, #32]
 800992e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009932:	677b      	str	r3, [r7, #116]	; 0x74
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3308      	adds	r3, #8
 800993a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800993c:	633a      	str	r2, [r7, #48]	; 0x30
 800993e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009944:	e841 2300 	strex	r3, r2, [r1]
 8009948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e5      	bne.n	800991c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a14      	ldr	r2, [pc, #80]	; (80099a4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009954:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	e853 3f00 	ldrex	r3, [r3]
 8009962:	60fb      	str	r3, [r7, #12]
   return(result);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f043 0320 	orr.w	r3, r3, #32
 800996a:	673b      	str	r3, [r7, #112]	; 0x70
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	461a      	mov	r2, r3
 8009972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009974:	61fb      	str	r3, [r7, #28]
 8009976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009978:	69b9      	ldr	r1, [r7, #24]
 800997a:	69fa      	ldr	r2, [r7, #28]
 800997c:	e841 2300 	strex	r3, r2, [r1]
 8009980:	617b      	str	r3, [r7, #20]
   return(result);
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1e6      	bne.n	8009956 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009988:	e007      	b.n	800999a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	699a      	ldr	r2, [r3, #24]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0208 	orr.w	r2, r2, #8
 8009998:	619a      	str	r2, [r3, #24]
}
 800999a:	bf00      	nop
 800999c:	37a0      	adds	r7, #160	; 0xa0
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	0800924f 	.word	0x0800924f

080099a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d101      	bne.n	80099fa <HAL_UARTEx_DisableFifoMode+0x16>
 80099f6:	2302      	movs	r3, #2
 80099f8:	e027      	b.n	8009a4a <HAL_UARTEx_DisableFifoMode+0x66>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2224      	movs	r2, #36	; 0x24
 8009a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f022 0201 	bic.w	r2, r2, #1
 8009a20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d101      	bne.n	8009a6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	e02d      	b.n	8009aca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2224      	movs	r2, #36	; 0x24
 8009a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 0201 	bic.w	r2, r2, #1
 8009a94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	683a      	ldr	r2, [r7, #0]
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f850 	bl	8009b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2220      	movs	r2, #32
 8009abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d101      	bne.n	8009aea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e02d      	b.n	8009b46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2224      	movs	r2, #36	; 0x24
 8009af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 0201 	bic.w	r2, r2, #1
 8009b10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f812 	bl	8009b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2220      	movs	r2, #32
 8009b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d108      	bne.n	8009b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b70:	e031      	b.n	8009bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b72:	2308      	movs	r3, #8
 8009b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b76:	2308      	movs	r3, #8
 8009b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	0e5b      	lsrs	r3, r3, #25
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 0307 	and.w	r3, r3, #7
 8009b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	0f5b      	lsrs	r3, r3, #29
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 0307 	and.w	r3, r3, #7
 8009b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	7b3a      	ldrb	r2, [r7, #12]
 8009b9e:	4911      	ldr	r1, [pc, #68]	; (8009be4 <UARTEx_SetNbDataToProcess+0x94>)
 8009ba0:	5c8a      	ldrb	r2, [r1, r2]
 8009ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ba6:	7b3a      	ldrb	r2, [r7, #12]
 8009ba8:	490f      	ldr	r1, [pc, #60]	; (8009be8 <UARTEx_SetNbDataToProcess+0x98>)
 8009baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	7b7a      	ldrb	r2, [r7, #13]
 8009bbc:	4909      	ldr	r1, [pc, #36]	; (8009be4 <UARTEx_SetNbDataToProcess+0x94>)
 8009bbe:	5c8a      	ldrb	r2, [r1, r2]
 8009bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bc4:	7b7a      	ldrb	r2, [r7, #13]
 8009bc6:	4908      	ldr	r1, [pc, #32]	; (8009be8 <UARTEx_SetNbDataToProcess+0x98>)
 8009bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009bd6:	bf00      	nop
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	08009e34 	.word	0x08009e34
 8009be8:	08009e3c 	.word	0x08009e3c

08009bec <memcmp>:
 8009bec:	b510      	push	{r4, lr}
 8009bee:	3901      	subs	r1, #1
 8009bf0:	4402      	add	r2, r0
 8009bf2:	4290      	cmp	r0, r2
 8009bf4:	d101      	bne.n	8009bfa <memcmp+0xe>
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	e005      	b.n	8009c06 <memcmp+0x1a>
 8009bfa:	7803      	ldrb	r3, [r0, #0]
 8009bfc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	d001      	beq.n	8009c08 <memcmp+0x1c>
 8009c04:	1b18      	subs	r0, r3, r4
 8009c06:	bd10      	pop	{r4, pc}
 8009c08:	3001      	adds	r0, #1
 8009c0a:	e7f2      	b.n	8009bf2 <memcmp+0x6>

08009c0c <memset>:
 8009c0c:	4402      	add	r2, r0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d100      	bne.n	8009c16 <memset+0xa>
 8009c14:	4770      	bx	lr
 8009c16:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1a:	e7f9      	b.n	8009c10 <memset+0x4>

08009c1c <__libc_init_array>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4d0d      	ldr	r5, [pc, #52]	; (8009c54 <__libc_init_array+0x38>)
 8009c20:	4c0d      	ldr	r4, [pc, #52]	; (8009c58 <__libc_init_array+0x3c>)
 8009c22:	1b64      	subs	r4, r4, r5
 8009c24:	10a4      	asrs	r4, r4, #2
 8009c26:	2600      	movs	r6, #0
 8009c28:	42a6      	cmp	r6, r4
 8009c2a:	d109      	bne.n	8009c40 <__libc_init_array+0x24>
 8009c2c:	4d0b      	ldr	r5, [pc, #44]	; (8009c5c <__libc_init_array+0x40>)
 8009c2e:	4c0c      	ldr	r4, [pc, #48]	; (8009c60 <__libc_init_array+0x44>)
 8009c30:	f000 f826 	bl	8009c80 <_init>
 8009c34:	1b64      	subs	r4, r4, r5
 8009c36:	10a4      	asrs	r4, r4, #2
 8009c38:	2600      	movs	r6, #0
 8009c3a:	42a6      	cmp	r6, r4
 8009c3c:	d105      	bne.n	8009c4a <__libc_init_array+0x2e>
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c44:	4798      	blx	r3
 8009c46:	3601      	adds	r6, #1
 8009c48:	e7ee      	b.n	8009c28 <__libc_init_array+0xc>
 8009c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c4e:	4798      	blx	r3
 8009c50:	3601      	adds	r6, #1
 8009c52:	e7f2      	b.n	8009c3a <__libc_init_array+0x1e>
 8009c54:	08009e4c 	.word	0x08009e4c
 8009c58:	08009e4c 	.word	0x08009e4c
 8009c5c:	08009e4c 	.word	0x08009e4c
 8009c60:	08009e50 	.word	0x08009e50

08009c64 <memcpy>:
 8009c64:	440a      	add	r2, r1
 8009c66:	4291      	cmp	r1, r2
 8009c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c6c:	d100      	bne.n	8009c70 <memcpy+0xc>
 8009c6e:	4770      	bx	lr
 8009c70:	b510      	push	{r4, lr}
 8009c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c7a:	4291      	cmp	r1, r2
 8009c7c:	d1f9      	bne.n	8009c72 <memcpy+0xe>
 8009c7e:	bd10      	pop	{r4, pc}

08009c80 <_init>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	bf00      	nop
 8009c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c86:	bc08      	pop	{r3}
 8009c88:	469e      	mov	lr, r3
 8009c8a:	4770      	bx	lr

08009c8c <_fini>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	bf00      	nop
 8009c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c92:	bc08      	pop	{r3}
 8009c94:	469e      	mov	lr, r3
 8009c96:	4770      	bx	lr
