
CTU_SR_Zora_MAVLink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000962c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08009804  08009804  00019804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099bc  080099bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080099bc  080099bc  000199bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099c4  080099c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c4  080099c4  000199c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080099cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  2000000c  080099d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b0  080099d8  000209b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e890  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003394  00000000  00000000  0003e90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  00041ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001496  00000000  00000000  000436d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022716  00000000  00000000  00044b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd06  00000000  00000000  0006727c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecf21  00000000  00000000  00082f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007454  00000000  00000000  0016fea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001772f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080097ec 	.word	0x080097ec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080097ec 	.word	0x080097ec

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <mavlink_comm_send_bytes>:

//required define for the protocol to use "mavlink_comm_send_bytes" function
#define MAVLINK_SEND_UART_BYTES
//convenience function for sending whole data block at once through a channel
//even though it has UART in its name, it has nothing to do with uart itself
static void mavlink_comm_send_bytes(mavlink_channel_t chan, const char *buf, uint16_t len){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]
    if(chan == MAVLINK_COMM_0){
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d105      	bne.n	8000536 <mavlink_comm_send_bytes+0x22>
        HAL_UART_Transmit_IT(&huart1, (uint8_t *)buf, len);
 800052a:	88bb      	ldrh	r3, [r7, #4]
 800052c:	461a      	mov	r2, r3
 800052e:	6839      	ldr	r1, [r7, #0]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <mavlink_comm_send_bytes+0x2c>)
 8000532:	f006 ff37 	bl	80073a4 <HAL_UART_Transmit_IT>
    }
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200001f4 	.word	0x200001f4

08000544 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4053      	eors	r3, r2
 800055a:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	b25a      	sxtb	r2, r3
 8000562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000566:	4053      	eors	r3, r2
 8000568:	b25b      	sxtb	r3, r3
 800056a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	b29b      	uxth	r3, r3
 8000574:	b21a      	sxth	r2, r3
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21b      	sxth	r3, r3
 800057c:	4053      	eors	r3, r2
 800057e:	b21a      	sxth	r2, r3
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	b21b      	sxth	r3, r3
 8000586:	4053      	eors	r3, r2
 8000588:	b21a      	sxth	r2, r3
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	091b      	lsrs	r3, r3, #4
 800058e:	b2db      	uxtb	r3, r3
 8000590:	b21b      	sxth	r3, r3
 8000592:	4053      	eors	r3, r2
 8000594:	b21b      	sxth	r3, r3
 8000596:	b29a      	uxth	r2, r3
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	801a      	strh	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b6:	801a      	strh	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80005d0:	f107 030e 	add.w	r3, r7, #14
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffe7 	bl	80005a8 <crc_init>
	while (length--) {
 80005da:	e009      	b.n	80005f0 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	f107 020e 	add.w	r2, r7, #14
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ffaa 	bl	8000544 <crc_accumulate>
	while (length--) {
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	1e5a      	subs	r2, r3, #1
 80005f4:	807a      	strh	r2, [r7, #2]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f0      	bne.n	80005dc <crc_calculate+0x18>
        }
        return crcTmp;
 80005fa:	89fb      	ldrh	r3, [r7, #14]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	617b      	str	r3, [r7, #20]
	while (length--) {
 8000616:	e007      	b.n	8000628 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	617a      	str	r2, [r7, #20]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	68f9      	ldr	r1, [r7, #12]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff8e 	bl	8000544 <crc_accumulate>
	while (length--) {
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	1e5a      	subs	r2, r3, #1
 800062c:	80fa      	strh	r2, [r7, #6]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f2      	bne.n	8000618 <crc_accumulate_buffer+0x14>
        }
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <mavlink_sha256_init+0x50>)
 8000654:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <mavlink_sha256_init+0x54>)
 800065a:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <mavlink_sha256_init+0x58>)
 8000660:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <mavlink_sha256_init+0x5c>)
 8000666:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <mavlink_sha256_init+0x60>)
 800066c:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <mavlink_sha256_init+0x64>)
 8000672:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <mavlink_sha256_init+0x68>)
 8000678:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <mavlink_sha256_init+0x6c>)
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	6a09e667 	.word	0x6a09e667
 8000690:	bb67ae85 	.word	0xbb67ae85
 8000694:	3c6ef372 	.word	0x3c6ef372
 8000698:	a54ff53a 	.word	0xa54ff53a
 800069c:	510e527f 	.word	0x510e527f
 80006a0:	9b05688c 	.word	0x9b05688c
 80006a4:	1f83d9ab 	.word	0x1f83d9ab
 80006a8:	5be0cd19 	.word	0x5be0cd19

080006ac <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b0cf      	sub	sp, #316	; 0x13c
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ba:	6018      	str	r0, [r3, #0]
 80006bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006c0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80006c4:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 80006c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 80006d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 80006e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 80006f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8000706:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800070a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8000716:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800071a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8000726:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800072a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6a1b      	ldr	r3, [r3, #32]
 8000732:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 8000736:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800073a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800074c:	e016      	b.n	800077c <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 800074e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000758:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	4413      	add	r3, r2
 8000760:	6819      	ldr	r1, [r3, #0]
 8000762:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800076a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800076e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000776:	3301      	adds	r3, #1
 8000778:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800077c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000780:	2b0f      	cmp	r3, #15
 8000782:	dde4      	ble.n	800074e <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000784:	2310      	movs	r3, #16
 8000786:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800078a:	e069      	b.n	8000860 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800078c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000790:	1e9a      	subs	r2, r3, #2
 8000792:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800079a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800079e:	ea4f 4273 	mov.w	r2, r3, ror #17
 80007a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007a6:	1e99      	subs	r1, r3, #2
 80007a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007b4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80007b8:	405a      	eors	r2, r3
 80007ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007be:	1e99      	subs	r1, r3, #2
 80007c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007cc:	0a9b      	lsrs	r3, r3, #10
 80007ce:	405a      	eors	r2, r3
 80007d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007d4:	1fd9      	subs	r1, r3, #7
 80007d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007e2:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80007e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007e8:	f1a3 010f 	sub.w	r1, r3, #15
 80007ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007f8:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80007fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000800:	f1a3 000f 	sub.w	r0, r3, #15
 8000804:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800080c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000810:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000814:	4059      	eors	r1, r3
 8000816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800081a:	f1a3 000f 	sub.w	r0, r3, #15
 800081e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000822:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000826:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800082e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000834:	f1a3 0110 	sub.w	r1, r3, #16
 8000838:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800083c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000840:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000844:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000846:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800084a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800084e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800085a:	3301      	adds	r3, #1
 800085c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000864:	2b3f      	cmp	r3, #63	; 0x3f
 8000866:	dd91      	ble.n	800078c <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800086e:	e078      	b.n	8000962 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000870:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000874:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000878:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800087c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000880:	405a      	eors	r2, r3
 8000882:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000886:	ea4f 6373 	mov.w	r3, r3, ror #25
 800088a:	405a      	eors	r2, r3
 800088c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000890:	441a      	add	r2, r3
 8000892:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000896:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800089a:	4019      	ands	r1, r3
 800089c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008a0:	43d8      	mvns	r0, r3
 80008a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008a6:	4003      	ands	r3, r0
 80008a8:	404b      	eors	r3, r1
 80008aa:	441a      	add	r2, r3
 80008ac:	496e      	ldr	r1, [pc, #440]	; (8000a68 <mavlink_sha256_calc+0x3bc>)
 80008ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008b6:	441a      	add	r2, r3
 80008b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80008bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80008c0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80008c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008c8:	4413      	add	r3, r2
 80008ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80008ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008d2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80008d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008da:	ea4f 3373 	mov.w	r3, r3, ror #13
 80008de:	405a      	eors	r2, r3
 80008e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008e4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80008e8:	405a      	eors	r2, r3
 80008ea:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80008ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008f2:	4059      	eors	r1, r3
 80008f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008f8:	4019      	ands	r1, r3
 80008fa:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80008fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000902:	4003      	ands	r3, r0
 8000904:	404b      	eors	r3, r1
 8000906:	4413      	add	r3, r2
 8000908:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 800090c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000910:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8000914:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000918:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 800091c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000920:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8000924:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000928:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800092c:	4413      	add	r3, r2
 800092e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 800093a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800093e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000942:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000946:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 800094a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800094e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000952:	4413      	add	r3, r2
 8000954:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8000958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800095c:	3301      	adds	r3, #1
 800095e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000966:	2b3f      	cmp	r3, #63	; 0x3f
 8000968:	dd82      	ble.n	8000870 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 800096a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800096e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800097a:	441a      	add	r2, r3
 800097c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000980:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000988:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800098c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000998:	441a      	add	r2, r3
 800099a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800099e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 80009a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	691a      	ldr	r2, [r3, #16]
 80009b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80009b6:	441a      	add	r2, r3
 80009b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 80009c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80009d4:	441a      	add	r2, r3
 80009d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 80009e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009f2:	441a      	add	r2, r3
 80009f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8000a00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a10:	441a      	add	r2, r3
 8000a12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8000a1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6a1a      	ldr	r2, [r3, #32]
 8000a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a2e:	441a      	add	r2, r3
 8000a30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8000a3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a4c:	441a      	add	r2, r3
 8000a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a5a:	bf00      	nop
 8000a5c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	08009828 	.word	0x08009828

08000a6c <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	; 0x70
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d904      	bls.n	8000aa4 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aac:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000aae:	e057      	b.n	8000b60 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8000ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ab2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ab6:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d201      	bcs.n	8000ac4 <mavlink_sha256_update+0x58>
            l = len;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000acc:	4413      	add	r3, r2
 8000ace:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ad0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 fe7c 	bl	80097d0 <memcpy>
	offset += l;
 8000ad8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000adc:	4413      	add	r3, r2
 8000ade:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ae4:	4413      	add	r3, r2
 8000ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000af2:	2b40      	cmp	r3, #64	; 0x40
 8000af4:	d134      	bne.n	8000b60 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3328      	adds	r3, #40	; 0x28
 8000afa:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8000afc:	2300      	movs	r3, #0
 8000afe:	663b      	str	r3, [r7, #96]	; 0x60
 8000b00:	e023      	b.n	8000b4a <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b08:	4413      	add	r3, r2
 8000b0a:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000b0c:	f107 0210 	add.w	r2, r7, #16
 8000b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b1a:	3303      	adds	r3, #3
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b20:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b24:	1c9a      	adds	r2, r3, #2
 8000b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b28:	3301      	adds	r3, #1
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b34:	3302      	adds	r3, #2
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b3c:	3303      	adds	r3, #3
 8000b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b40:	7812      	ldrb	r2, [r2, #0]
 8000b42:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b46:	3301      	adds	r3, #1
 8000b48:	663b      	str	r3, [r7, #96]	; 0x60
 8000b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	ddd8      	ble.n	8000b02 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4619      	mov	r1, r3
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff fda8 	bl	80006ac <mavlink_sha256_calc>
	    offset = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1a4      	bne.n	8000ab0 <mavlink_sha256_update+0x44>
	}
    }
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	3770      	adds	r7, #112	; 0x70
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b098      	sub	sp, #96	; 0x60
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	08db      	lsrs	r3, r3, #3
 8000b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b88:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b90:	3301      	adds	r3, #1
 8000b92:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3308      	adds	r3, #8
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	2247      	movs	r2, #71	; 0x47
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fde5 	bl	8009778 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bb4:	3307      	adds	r3, #7
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	3360      	adds	r3, #96	; 0x60
 8000bba:	443b      	add	r3, r7
 8000bbc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	0a1a      	lsrs	r2, r3, #8
 8000bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bc8:	3306      	adds	r3, #6
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	3360      	adds	r3, #96	; 0x60
 8000bce:	443b      	add	r3, r7
 8000bd0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	0c1a      	lsrs	r2, r3, #16
 8000bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bdc:	3305      	adds	r3, #5
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	3360      	adds	r3, #96	; 0x60
 8000be2:	443b      	add	r3, r7
 8000be4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	0e1a      	lsrs	r2, r3, #24
 8000bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	3360      	adds	r3, #96	; 0x60
 8000bf6:	443b      	add	r3, r7
 8000bf8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c02:	3303      	adds	r3, #3
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	3360      	adds	r3, #96	; 0x60
 8000c08:	443b      	add	r3, r7
 8000c0a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	0a1a      	lsrs	r2, r3, #8
 8000c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c16:	3302      	adds	r3, #2
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	3360      	adds	r3, #96	; 0x60
 8000c1c:	443b      	add	r3, r7
 8000c1e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	0c1a      	lsrs	r2, r3, #16
 8000c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	3360      	adds	r3, #96	; 0x60
 8000c30:	443b      	add	r3, r7
 8000c32:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	0e1b      	lsrs	r3, r3, #24
 8000c3c:	b2d9      	uxtb	r1, r3
 8000c3e:	f107 020c 	add.w	r2, r7, #12
 8000c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c44:	4413      	add	r3, r2
 8000c46:	460a      	mov	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c4c:	f103 0208 	add.w	r2, r3, #8
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4619      	mov	r1, r3
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ff08 	bl	8000a6c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c5e:	78da      	ldrb	r2, [r3, #3]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c6a:	7892      	ldrb	r2, [r2, #2]
 8000c6c:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3302      	adds	r3, #2
 8000c72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c74:	7852      	ldrb	r2, [r2, #1]
 8000c76:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	3303      	adds	r3, #3
 8000c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	3304      	adds	r3, #4
 8000c86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c88:	79d2      	ldrb	r2, [r2, #7]
 8000c8a:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	3305      	adds	r3, #5
 8000c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c92:	7992      	ldrb	r2, [r2, #6]
 8000c94:	701a      	strb	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	3760      	adds	r7, #96	; 0x60
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000caa:	79fa      	ldrb	r2, [r7, #7]
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <mavlink_get_channel_status+0x24>)
 8000cb6:	4413      	add	r3, r2
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	200004bc 	.word	0x200004bc

08000cc8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f44f 7292 	mov.w	r2, #292	; 0x124
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <mavlink_get_channel_buffer+0x24>)
 8000cde:	4413      	add	r3, r2
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	2000051c 	.word	0x2000051c

08000cf0 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b0a0      	sub	sp, #128	; 0x80
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <mavlink_sign_packet+0x20>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <mavlink_sign_packet+0x24>
	    return 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	e04f      	b.n	8000db4 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	785a      	ldrb	r2, [r3, #1]
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d22:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f107 0110 	add.w	r1, r7, #16
 8000d2e:	2206      	movs	r2, #6
 8000d30:	4618      	mov	r0, r3
 8000d32:	f008 fd4d 	bl	80097d0 <memcpy>
	signing->timestamp++;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d3c:	1c54      	adds	r4, r2, #1
 8000d3e:	f143 0500 	adc.w	r5, r3, #0
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fc75 	bl	800063c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f103 0110 	add.w	r1, r3, #16
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe84 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe7d 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8000d72:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fe74 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	2202      	movs	r2, #2
 8000d8a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fe6c 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	2207      	movs	r2, #7
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fe65 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1dda      	adds	r2, r3, #7
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fedf 	bl	8000b70 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8000db2:	230d      	movs	r3, #13
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3780      	adds	r7, #128	; 0x80
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bdb0      	pop	{r4, r5, r7, pc}

08000dbc <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000dc8:	e002      	b.n	8000dd0 <_mav_trim_payload+0x14>
		length--;
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d906      	bls.n	8000de4 <_mav_trim_payload+0x28>
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f2      	beq.n	8000dca <_mav_trim_payload+0xe>
	}
	return length;
 8000de4:	78fb      	ldrb	r3, [r7, #3]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b0aa      	sub	sp, #168	; 0xa8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <mavlink_signature_check+0x16>
		return true;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e13e      	b.n	8001088 <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8000e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e20:	3307      	adds	r3, #7
 8000e22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fc06 	bl	800063c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f103 0110 	add.w	r1, r3, #16
 8000e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe15 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8000e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e46:	220a      	movs	r2, #10
 8000e48:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe0d 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f103 010c 	add.w	r1, r3, #12
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe02 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	2202      	movs	r2, #2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fdf9 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8000e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7e:	2207      	movs	r2, #7
 8000e80:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fdf1 	bl	8000a6c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8000e8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fe6b 	bl	8000b70 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	2206      	movs	r2, #6
 8000ea0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f008 fc57 	bl	8009758 <memcmp>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d005      	beq.n	8000ebc <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return false;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e0e5      	b.n	8001088 <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8000ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8000ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ed6:	1c59      	adds	r1, r3, #1
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	2206      	movs	r2, #6
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f008 fc76 	bl	80097d0 <memcpy>

	if (signing_streams == NULL) {
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d105      	bne.n	8000ef6 <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2203      	movs	r2, #3
 8000eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                return false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e0c8      	b.n	8001088 <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000efc:	e02b      	b.n	8000f56 <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	79d9      	ldrb	r1, [r3, #7]
 8000f02:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f06:	68b8      	ldr	r0, [r7, #8]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4403      	add	r3, r0
 8000f10:	3303      	adds	r3, #3
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4299      	cmp	r1, r3
 8000f16:	d119      	bne.n	8000f4c <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7a19      	ldrb	r1, [r3, #8]
 8000f1c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f20:	68b8      	ldr	r0, [r7, #8]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4413      	add	r3, r2
 8000f28:	4403      	add	r3, r0
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d10c      	bne.n	8000f4c <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8000f32:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3302      	adds	r3, #2
 8000f42:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8000f44:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d00b      	beq.n	8000f64 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000f4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000f50:	3301      	adds	r3, #1
 8000f52:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d3cd      	bcc.n	8000efe <mavlink_signature_check+0x10a>
 8000f62:	e000      	b.n	8000f66 <mavlink_signature_check+0x172>
			break;
 8000f64:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d146      	bne.n	8001000 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	d905      	bls.n	8000f86 <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e080      	b.n	8001088 <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8000f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f8a:	4941      	ldr	r1, [pc, #260]	; (8001090 <mavlink_signature_check+0x29c>)
 8000f8c:	1854      	adds	r4, r2, r1
 8000f8e:	f143 0500 	adc.w	r5, r3, #0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f98:	4294      	cmp	r4, r2
 8000f9a:	eb75 0303 	sbcs.w	r3, r5, r3
 8000f9e:	d205      	bcs.n	8000fac <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e06d      	b.n	8001088 <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8000fac:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	79d8      	ldrb	r0, [r3, #7]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	4413      	add	r3, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3303      	adds	r3, #3
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8000fc4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7a18      	ldrb	r0, [r3, #8]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	4602      	mov	r2, r0
 8000fda:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8000fdc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3302      	adds	r3, #2
 8000fec:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8000ff0:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	801a      	strh	r2, [r3, #0]
 8000ffe:	e021      	b.n	8001044 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800100c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	4413      	add	r3, r2
 800101a:	1d59      	adds	r1, r3, #5
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	2206      	movs	r2, #6
 8001022:	4618      	mov	r0, r3
 8001024:	f008 fbd4 	bl	80097d0 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800102c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001030:	4290      	cmp	r0, r2
 8001032:	eb71 0303 	sbcs.w	r3, r1, r3
 8001036:	d305      	bcc.n	8001044 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2206      	movs	r2, #6
 800103c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        return false;
 8001040:	2300      	movs	r3, #0
 8001042:	e021      	b.n	8001088 <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001044:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	1d58      	adds	r0, r3, #5
 8001054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001058:	3301      	adds	r3, #1
 800105a:	2206      	movs	r2, #6
 800105c:	4619      	mov	r1, r3
 800105e:	f008 fbb7 	bl	80097d0 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800106c:	4290      	cmp	r0, r2
 800106e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001072:	d204      	bcs.n	800107e <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8001074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return true;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	37a8      	adds	r7, #168	; 0xa8
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	005b8d80 	.word	0x005b8d80

08001094 <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	789b      	ldrb	r3, [r3, #2]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	709a      	strb	r2, [r3, #2]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_mav_finalize_message_chan_send>:
 * @brief Finalize a MAVLink message with channel assignment and send
 */
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint32_t msgid,
                                                    const char *packet, 
						    uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b0db      	sub	sp, #364	; 0x16c
 80010b8:	af04      	add	r7, sp, #16
 80010ba:	4604      	mov	r4, r0
 80010bc:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80010c0:	f5a0 70a8 	sub.w	r0, r0, #336	; 0x150
 80010c4:	6001      	str	r1, [r0, #0]
 80010c6:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80010ca:	f5a1 71aa 	sub.w	r1, r1, #340	; 0x154
 80010ce:	600a      	str	r2, [r1, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010d6:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80010da:	4622      	mov	r2, r4
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010e2:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
 80010e6:	460a      	mov	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80010ea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80010ee:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fdd3 	bl	8000ca0 <mavlink_get_channel_status>
 80010fa:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN;
 80010fe:	2309      	movs	r3, #9
 8001100:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint8_t signature_len = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN];
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 800110a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800110e:	7b1b      	ldrb	r3, [r3, #12]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	bf14      	ite	ne
 8001118:	2301      	movne	r3, #1
 800111a:	2300      	moveq	r3, #0
 800111c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001120:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001124:	f083 0301 	eor.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00e      	beq.n	800114c <_mav_finalize_message_chan_send+0x98>
 800112e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d009      	beq.n	800114c <_mav_finalize_message_chan_send+0x98>
 8001138:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <_mav_finalize_message_chan_send+0x98>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <_mav_finalize_message_chan_send+0x9a>
 800114c:	2300      	movs	r3, #0
 800114e:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8001152:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e

        if (mavlink1) {
 800115e:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001162:	2b00      	cmp	r3, #0
 8001164:	d032      	beq.n	80011cc <_mav_finalize_message_chan_send+0x118>
            length = min_length;
 8001166:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800116a:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
            if (msgid > 255) {
 8001174:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001178:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2bff      	cmp	r3, #255	; 0xff
 8001180:	d904      	bls.n	800118c <_mav_finalize_message_chan_send+0xd8>
                // can't send 16 bit messages
                _mav_parse_error(status);
 8001182:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8001186:	f7ff ff85 	bl	8001094 <_mav_parse_error>
 800118a:	e112      	b.n	80013b2 <_mav_finalize_message_chan_send+0x2fe>
                return;
            }
            header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800118c:	2305      	movs	r3, #5
 800118e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
            buf[0] = MAVLINK_STX_MAVLINK1;
 8001192:	23fe      	movs	r3, #254	; 0xfe
 8001194:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
            buf[1] = length;
 8001198:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 800119c:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
            buf[2] = status->current_tx_seq;
 80011a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011a4:	799b      	ldrb	r3, [r3, #6]
 80011a6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
            buf[3] = mavlink_system.sysid;
 80011aa:	4b84      	ldr	r3, [pc, #528]	; (80013bc <_mav_finalize_message_chan_send+0x308>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            buf[4] = mavlink_system.compid;
 80011b2:	4b82      	ldr	r3, [pc, #520]	; (80013bc <_mav_finalize_message_chan_send+0x308>)
 80011b4:	785b      	ldrb	r3, [r3, #1]
 80011b6:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
            buf[5] = msgid & 0xFF;
 80011ba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011be:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 80011ca:	e04e      	b.n	800126a <_mav_finalize_message_chan_send+0x1b6>
        } else {
	    uint8_t incompat_flags = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
	    if (signing) {
 80011d2:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <_mav_finalize_message_chan_send+0x132>
		incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80011da:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
	    }
            length = _mav_trim_payload(packet, length);
 80011e6:	f897 2168 	ldrb.w	r2, [r7, #360]	; 0x168
 80011ea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80011f2:	4611      	mov	r1, r2
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	f7ff fde1 	bl	8000dbc <_mav_trim_payload>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 3168 	strb.w	r3, [r7, #360]	; 0x168
            buf[0] = MAVLINK_STX;
 8001200:	23fd      	movs	r3, #253	; 0xfd
 8001202:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
            buf[1] = length;
 8001206:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 800120a:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
            buf[2] = incompat_flags;
 800120e:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 8001212:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
            buf[3] = 0; // compat_flags
 8001216:	2300      	movs	r3, #0
 8001218:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            buf[4] = status->current_tx_seq;
 800121c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001220:	799b      	ldrb	r3, [r3, #6]
 8001222:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
            buf[5] = mavlink_system.sysid;
 8001226:	4b65      	ldr	r3, [pc, #404]	; (80013bc <_mav_finalize_message_chan_send+0x308>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
            buf[6] = mavlink_system.compid;
 800122e:	4b63      	ldr	r3, [pc, #396]	; (80013bc <_mav_finalize_message_chan_send+0x308>)
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
            buf[7] = msgid & 0xFF;
 8001236:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800123a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
            buf[8] = (msgid >> 8) & 0xFF;
 8001246:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800124a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
            buf[9] = (msgid >> 16) & 0xFF;
 8001258:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800125c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	0c1b      	lsrs	r3, r3, #16
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
        }
	status->current_tx_seq++;
 800126a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800126e:	799b      	ldrb	r3, [r3, #6]
 8001270:	3301      	adds	r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001278:	719a      	strb	r2, [r3, #6]
	checksum = crc_calculate((const uint8_t*)&buf[1], header_len);
 800127a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800127e:	b29a      	uxth	r2, r3
 8001280:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001284:	3301      	adds	r3, #1
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f99b 	bl	80005c4 <crc_calculate>
 800128e:	4603      	mov	r3, r0
 8001290:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
	crc_accumulate_buffer(&checksum, packet, length);
 8001294:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8001298:	b29a      	uxth	r2, r3
 800129a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800129e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80012a2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	f7ff f9ac 	bl	8000604 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 80012ac:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80012b0:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f944 	bl	8000544 <crc_accumulate>
	ck[0] = (uint8_t)(checksum & 0xFF);
 80012bc:	f8b7 3148 	ldrh.w	r3, [r7, #328]	; 0x148
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
	ck[1] = (uint8_t)(checksum >> 8);
 80012c6:	f8b7 3148 	ldrh.w	r3, [r7, #328]	; 0x148
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f887 3139 	strb.w	r3, [r7, #313]	; 0x139

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 80012d4:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01c      	beq.n	8001316 <_mav_finalize_message_chan_send+0x262>
		// possibly add a signature
		signature_len = mavlink_sign_packet(status->signing, signature, buf, header_len+1,
 80012dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012e0:	6918      	ldr	r0, [r3, #16]
 80012e2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80012e6:	3301      	adds	r3, #1
 80012e8:	b2dc      	uxtb	r4, r3
 80012ea:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80012ee:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80012f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001302:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	4623      	mov	r3, r4
 800130c:	f7ff fcf0 	bl	8000cf0 <mavlink_sign_packet>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	}
#endif

    #ifdef MAVLINK_SEND_WHOLE_DATA_OVERRIDE
        //try sending the message in one long packet, instead of multiple small ones
        uint8_t outBuf[MAVLINK_MAX_MESSAGE_LENGTH] = {0};
 8001316:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800131a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	3304      	adds	r3, #4
 8001324:	f44f 728a 	mov.w	r2, #276	; 0x114
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f008 fa24 	bl	8009778 <memset>

        const uint8_t headerLength = MAVLINK_NUM_HEADER_BYTES;
 8001330:	230a      	movs	r3, #10
 8001332:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
        memcpy(&outBuf,&buf,headerLength);
 8001336:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
 800133a:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4618      	mov	r0, r3
 8001344:	f008 fa44 	bl	80097d0 <memcpy>

        memcpy(&outBuf[headerLength], packet, length);
 8001348:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 800134c:	f107 0210 	add.w	r2, r7, #16
 8001350:	18d0      	adds	r0, r2, r3
 8001352:	f897 2168 	ldrb.w	r2, [r7, #360]	; 0x168
 8001356:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800135a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	f008 fa36 	bl	80097d0 <memcpy>

        memcpy(&outBuf[headerLength+length], ck, 2);
 8001364:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
 8001368:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 800136c:	4413      	add	r3, r2
 800136e:	f107 0210 	add.w	r2, r7, #16
 8001372:	4413      	add	r3, r2
 8001374:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 8001378:	801a      	strh	r2, [r3, #0]

        uint16_t bufferLen = header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800137a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800137e:	b29a      	uxth	r2, r3
 8001380:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 8001384:	b29b      	uxth	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b29a      	uxth	r2, r3
 800138a:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800138e:	b29b      	uxth	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	b29b      	uxth	r3, r3
 8001394:	3303      	adds	r3, #3
 8001396:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a

        _mavlink_send_uart(chan, (const char *)outBuf,bufferLen);
 800139a:	f8b7 214a 	ldrh.w	r2, [r7, #330]	; 0x14a
 800139e:	f107 0110 	add.w	r1, r7, #16
 80013a2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013a6:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fb9d 	bl	8001aec <_mavlink_send_uart>
            _mavlink_send_uart(chan, (const char *)signature, signature_len);
        }
        MAVLINK_END_UART_SEND(chan, header_len + 3 + (uint16_t)length + (uint16_t)signature_len);

    #endif
}
 80013b2:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000028 	.word	0x20000028

080013c0 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 80013cc:	f107 030e 	add.w	r3, r7, #14
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8e9 	bl	80005a8 <crc_init>
	msg->checksum = crcTmp;
 80013d6:	89fa      	ldrh	r2, [r7, #14]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	801a      	strh	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 80013f6:	f107 020e 	add.w	r2, r7, #14
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8a0 	bl	8000544 <crc_accumulate>
	msg->checksum = checksum;
 8001404:	89fa      	ldrh	r2, [r7, #14]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	801a      	strh	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	2306      	movs	r3, #6
 8001422:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001424:	e025      	b.n	8001472 <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4413      	add	r3, r2
 800142c:	3301      	adds	r3, #1
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001432:	491f      	ldr	r1, [pc, #124]	; (80014b0 <mavlink_get_msg_entry+0x9c>)
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d203      	bcs.n	8001450 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3b01      	subs	r3, #1
 800144c:	613b      	str	r3, [r7, #16]
                continue;
 800144e:	e010      	b.n	8001472 <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001450:	4917      	ldr	r1, [pc, #92]	; (80014b0 <mavlink_get_msg_entry+0x9c>)
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	d902      	bls.n	800146c <mavlink_get_msg_entry+0x58>
                low = mid;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	617b      	str	r3, [r7, #20]
                continue;
 800146a:	e002      	b.n	8001472 <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	617b      	str	r3, [r7, #20]
            break;
 8001470:	e003      	b.n	800147a <mavlink_get_msg_entry+0x66>
        while (low < high) {
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3d5      	bcc.n	8001426 <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 800147a:	490d      	ldr	r1, [pc, #52]	; (80014b0 <mavlink_get_msg_entry+0x9c>)
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8001490:	2300      	movs	r3, #0
 8001492:	e006      	b.n	80014a2 <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <mavlink_get_msg_entry+0x9c>)
 80014a0:	4413      	add	r3, r2
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	08009928 	.word	0x08009928

080014b4 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	78db      	ldrb	r3, [r3, #3]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	f200 8258 	bhi.w	8001984 <mavlink_frame_char_buffer+0x4d0>
 80014d4:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <mavlink_frame_char_buffer+0x28>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	0800151d 	.word	0x0800151d
 80014e0:	0800151d 	.word	0x0800151d
 80014e4:	0800157b 	.word	0x0800157b
 80014e8:	080015e1 	.word	0x080015e1
 80014ec:	08001619 	.word	0x08001619
 80014f0:	08001631 	.word	0x08001631
 80014f4:	08001649 	.word	0x08001649
 80014f8:	08001661 	.word	0x08001661
 80014fc:	08001679 	.word	0x08001679
 8001500:	080016d3 	.word	0x080016d3
 8001504:	08001717 	.word	0x08001717
 8001508:	0800176b 	.word	0x0800176b
 800150c:	080017a3 	.word	0x080017a3
 8001510:	08001825 	.word	0x08001825
 8001514:	08001825 	.word	0x08001825
 8001518:	080018d7 	.word	0x080018d7
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2bfd      	cmp	r3, #253	; 0xfd
 8001520:	d113      	bne.n	800154a <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2202      	movs	r2, #2
 8001526:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	79fa      	ldrb	r2, [r7, #7]
 8001532:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	7b1b      	ldrb	r3, [r3, #12]
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff ff3c 	bl	80013c0 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001548:	e213      	b.n	8001972 <mavlink_frame_char_buffer+0x4be>
		} else if (c == MAVLINK_STX_MAVLINK1)
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2bfe      	cmp	r3, #254	; 0xfe
 800154e:	f040 8210 	bne.w	8001972 <mavlink_frame_char_buffer+0x4be>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2202      	movs	r2, #2
 8001556:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	79fa      	ldrb	r2, [r7, #7]
 8001562:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	7b1b      	ldrb	r3, [r3, #12]
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	b2da      	uxtb	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7ff ff24 	bl	80013c0 <mavlink_start_checksum>
		break;
 8001578:	e1fb      	b.n	8001972 <mavlink_frame_char_buffer+0x4be>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00f      	beq.n	80015a2 <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	3301      	adds	r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f7ff fd80 	bl	8001094 <_mav_parse_error>
			status->msg_received = 0;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2201      	movs	r2, #1
 800159e:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 80015a0:	e1f0      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
			rxmsg->len = c;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	79fa      	ldrb	r2, [r7, #7]
 80015a6:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2200      	movs	r2, #0
 80015ac:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4619      	mov	r1, r3
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff ff16 	bl	80013e4 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	7b1b      	ldrb	r3, [r3, #12]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2205      	movs	r2, #5
 80015d4:	70da      	strb	r2, [r3, #3]
		break;
 80015d6:	e1d5      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2203      	movs	r2, #3
 80015dc:	70da      	strb	r2, [r3, #3]
		break;
 80015de:	e1d1      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	791b      	ldrb	r3, [r3, #4]
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <mavlink_frame_char_buffer+0x152>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 80015f2:	68b8      	ldr	r0, [r7, #8]
 80015f4:	f7ff fd4e 	bl	8001094 <_mav_parse_error>
			status->msg_received = 0;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2201      	movs	r2, #1
 8001602:	70da      	strb	r2, [r3, #3]
			break;
 8001604:	e1be      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
		}
		mavlink_update_checksum(rxmsg, c);
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4619      	mov	r1, r3
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff feea 	bl	80013e4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2204      	movs	r2, #4
 8001614:	70da      	strb	r2, [r3, #3]
		break;
 8001616:	e1b5      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4619      	mov	r1, r3
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff fede 	bl	80013e4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2205      	movs	r2, #5
 800162c:	70da      	strb	r2, [r3, #3]
		break;
 800162e:	e1a9      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	79fa      	ldrb	r2, [r7, #7]
 8001634:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4619      	mov	r1, r3
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff fed2 	bl	80013e4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2206      	movs	r2, #6
 8001644:	70da      	strb	r2, [r3, #3]
		break;
 8001646:	e19d      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4619      	mov	r1, r3
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fec6 	bl	80013e4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2207      	movs	r2, #7
 800165c:	70da      	strb	r2, [r3, #3]
		break;
 800165e:	e191      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4619      	mov	r1, r3
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff feba 	bl	80013e4 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2208      	movs	r2, #8
 8001674:	70da      	strb	r2, [r3, #3]
		break;
 8001676:	e185      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	b2d9      	uxtb	r1, r3
 8001682:	2000      	movs	r0, #0
 8001684:	4301      	orrs	r1, r0
 8001686:	7251      	strb	r1, [r2, #9]
 8001688:	0a19      	lsrs	r1, r3, #8
 800168a:	b2c9      	uxtb	r1, r1
 800168c:	2000      	movs	r0, #0
 800168e:	4301      	orrs	r1, r0
 8001690:	7291      	strb	r1, [r2, #10]
 8001692:	0c1b      	lsrs	r3, r3, #16
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2100      	movs	r1, #0
 8001698:	430b      	orrs	r3, r1
 800169a:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	4619      	mov	r1, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7ff fe9f 	bl	80013e4 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	7b1b      	ldrb	r3, [r3, #12]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <mavlink_frame_char_buffer+0x216>
			if(rxmsg->len > 0) {
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	78db      	ldrb	r3, [r3, #3]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <mavlink_frame_char_buffer+0x20e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	220b      	movs	r2, #11
 80016be:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 80016c0:	e160      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	220c      	movs	r2, #12
 80016c6:	70da      	strb	r2, [r3, #3]
		break;
 80016c8:	e15c      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2209      	movs	r2, #9
 80016ce:	70da      	strb	r2, [r3, #3]
		break;
 80016d0:	e158      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80016da:	461a      	mov	r2, r3
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	4313      	orrs	r3, r2
 80016e2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	b2d1      	uxtb	r1, r2
 80016ea:	2000      	movs	r0, #0
 80016ec:	4301      	orrs	r1, r0
 80016ee:	7259      	strb	r1, [r3, #9]
 80016f0:	0a11      	lsrs	r1, r2, #8
 80016f2:	b2c9      	uxtb	r1, r1
 80016f4:	2000      	movs	r0, #0
 80016f6:	4301      	orrs	r1, r0
 80016f8:	7299      	strb	r1, [r3, #10]
 80016fa:	0c12      	lsrs	r2, r2, #16
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	2100      	movs	r1, #0
 8001700:	430a      	orrs	r2, r1
 8001702:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4619      	mov	r1, r3
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff fe6b 	bl	80013e4 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	220a      	movs	r2, #10
 8001712:	70da      	strb	r2, [r3, #3]
		break;
 8001714:	e136      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800171e:	461a      	mov	r2, r3
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	4313      	orrs	r3, r2
 8001726:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	b2d1      	uxtb	r1, r2
 800172e:	2000      	movs	r0, #0
 8001730:	4301      	orrs	r1, r0
 8001732:	7259      	strb	r1, [r3, #9]
 8001734:	0a11      	lsrs	r1, r2, #8
 8001736:	b2c9      	uxtb	r1, r1
 8001738:	2000      	movs	r0, #0
 800173a:	4301      	orrs	r1, r0
 800173c:	7299      	strb	r1, [r3, #10]
 800173e:	0c12      	lsrs	r2, r2, #16
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	2100      	movs	r1, #0
 8001744:	430a      	orrs	r2, r1
 8001746:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4619      	mov	r1, r3
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fe49 	bl	80013e4 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	78db      	ldrb	r3, [r3, #3]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <mavlink_frame_char_buffer+0x2ae>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	220b      	movs	r2, #11
 800175e:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001760:	e110      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	220c      	movs	r2, #12
 8001766:	70da      	strb	r2, [r3, #3]
		break;
 8001768:	e10c      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f103 020c 	add.w	r2, r3, #12
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	791b      	ldrb	r3, [r3, #4]
 8001774:	1c59      	adds	r1, r3, #1
 8001776:	b2c8      	uxtb	r0, r1
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	7108      	strb	r0, [r1, #4]
 800177c:	4413      	add	r3, r2
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4619      	mov	r1, r3
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff fe2c 	bl	80013e4 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	791a      	ldrb	r2, [r3, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	78db      	ldrb	r3, [r3, #3]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 80ee 	bne.w	8001976 <mavlink_frame_char_buffer+0x4c2>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	220c      	movs	r2, #12
 800179e:	70da      	strb	r2, [r3, #3]
		}
		break;
 80017a0:	e0e9      	b.n	8001976 <mavlink_frame_char_buffer+0x4c2>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fe32 	bl	8001414 <mavlink_get_msg_entry>
 80017b0:	61b8      	str	r0, [r7, #24]
		uint8_t crc_extra = e?e->crc_extra:0;
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <mavlink_frame_char_buffer+0x30a>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	791b      	ldrb	r3, [r3, #4]
 80017bc:	e000      	b.n	80017c0 <mavlink_frame_char_buffer+0x30c>
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]
		mavlink_update_checksum(rxmsg, crc_extra);
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	4619      	mov	r1, r3
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f7ff fe0c 	bl	80013e4 <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d003      	beq.n	80017e0 <mavlink_frame_char_buffer+0x32c>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	220e      	movs	r2, #14
 80017dc:	70da      	strb	r2, [r3, #3]
 80017de:	e002      	b.n	80017e6 <mavlink_frame_char_buffer+0x332>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	220d      	movs	r2, #13
 80017e4:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80c2 	beq.w	800197a <mavlink_frame_char_buffer+0x4c6>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	791a      	ldrb	r2, [r3, #4]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	799b      	ldrb	r3, [r3, #6]
 80017fe:	429a      	cmp	r2, r3
 8001800:	f080 80bb 	bcs.w	800197a <mavlink_frame_char_buffer+0x4c6>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	330c      	adds	r3, #12
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	7912      	ldrb	r2, [r2, #4]
 800180c:	1898      	adds	r0, r3, r2
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	799b      	ldrb	r3, [r3, #6]
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	791b      	ldrb	r3, [r3, #4]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	461a      	mov	r2, r3
 800181c:	2100      	movs	r1, #0
 800181e:	f007 ffab 	bl	8009778 <memset>
		}
		break;
 8001822:	e0aa      	b.n	800197a <mavlink_frame_char_buffer+0x4c6>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	2b0e      	cmp	r3, #14
 800182a:	d007      	beq.n	800183c <mavlink_frame_char_buffer+0x388>
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	429a      	cmp	r2, r3
 800183a:	d003      	beq.n	8001844 <mavlink_frame_char_buffer+0x390>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2202      	movs	r2, #2
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	e002      	b.n	800184a <mavlink_frame_char_buffer+0x396>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	791b      	ldrb	r3, [r3, #4]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00e      	beq.n	800187c <mavlink_frame_char_buffer+0x3c8>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	220f      	movs	r2, #15
 8001862:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	220d      	movs	r2, #13
 8001868:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b02      	cmp	r3, #2
 8001870:	f000 8085 	beq.w	800197e <mavlink_frame_char_buffer+0x4ca>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 800187a:	e080      	b.n	800197e <mavlink_frame_char_buffer+0x4ca>
			if (status->signing &&
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <mavlink_frame_char_buffer+0x408>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00f      	beq.n	80018ae <mavlink_frame_char_buffer+0x3fa>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	6892      	ldr	r2, [r2, #8]
 8001898:	f3c2 2217 	ubfx	r2, r2, #8, #24
 800189c:	4611      	mov	r1, r2
 800189e:	68b8      	ldr	r0, [r7, #8]
 80018a0:	4798      	blx	r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	f083 0301 	eor.w	r3, r3, #1
 80018a8:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <mavlink_frame_char_buffer+0x408>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d002      	beq.n	80018bc <mavlink_frame_char_buffer+0x408>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2203      	movs	r2, #3
 80018ba:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2201      	movs	r2, #1
 80018c0:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d05a      	beq.n	800197e <mavlink_frame_char_buffer+0x4ca>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80018c8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80018cc:	68f9      	ldr	r1, [r7, #12]
 80018ce:	6838      	ldr	r0, [r7, #0]
 80018d0:	f007 ff7e 	bl	80097d0 <memcpy>
		break;
 80018d4:	e053      	b.n	800197e <mavlink_frame_char_buffer+0x4ca>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	7b5b      	ldrb	r3, [r3, #13]
 80018da:	f1c3 030d 	rsb	r3, r3, #13
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	79fa      	ldrb	r2, [r7, #7]
 80018e4:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	7b5b      	ldrb	r3, [r3, #13]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	7b5b      	ldrb	r3, [r3, #13]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d142      	bne.n	8001982 <mavlink_frame_char_buffer+0x4ce>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	6918      	ldr	r0, [r3, #16]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff fa74 	bl	8000df4 <mavlink_signature_check>
 800190c:	4603      	mov	r3, r0
 800190e:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	f083 0301 	eor.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <mavlink_frame_char_buffer+0x490>
			   	(status->signing->accept_unsigned_callback &&
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00e      	beq.n	8001944 <mavlink_frame_char_buffer+0x490>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	6892      	ldr	r2, [r2, #8]
 8001930:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8001934:	4611      	mov	r1, r2
 8001936:	68b8      	ldr	r0, [r7, #8]
 8001938:	4798      	blx	r3
 800193a:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <mavlink_frame_char_buffer+0x490>
				// accepted via application level override
				sig_ok = true;
 8001940:	2301      	movs	r3, #1
 8001942:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8001944:	7ffb      	ldrb	r3, [r7, #31]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <mavlink_frame_char_buffer+0x49e>
				status->msg_received = MAVLINK_FRAMING_OK;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e002      	b.n	8001958 <mavlink_frame_char_buffer+0x4a4>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2203      	movs	r2, #3
 8001956:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2201      	movs	r2, #1
 800195c:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00e      	beq.n	8001982 <mavlink_frame_char_buffer+0x4ce>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001964:	f44f 7292 	mov.w	r2, #292	; 0x124
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	6838      	ldr	r0, [r7, #0]
 800196c:	f007 ff30 	bl	80097d0 <memcpy>
			}
		}
		break;
 8001970:	e007      	b.n	8001982 <mavlink_frame_char_buffer+0x4ce>
		break;
 8001972:	bf00      	nop
 8001974:	e006      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
		break;
 8001976:	bf00      	nop
 8001978:	e004      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
		break;
 800197a:	bf00      	nop
 800197c:	e002      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
		break;
 800197e:	bf00      	nop
 8001980:	e000      	b.n	8001984 <mavlink_frame_char_buffer+0x4d0>
		break;
 8001982:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d110      	bne.n	80019ae <mavlink_frame_char_buffer+0x4fa>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	799a      	ldrb	r2, [r3, #6]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	891b      	ldrh	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <mavlink_frame_char_buffer+0x4ee>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2200      	movs	r2, #0
 80019a0:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	891b      	ldrh	r3, [r3, #8]
 80019a6:	3301      	adds	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <mavlink_frame_char_buffer+0x508>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	78da      	ldrb	r2, [r3, #3]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d01a      	beq.n	80019f8 <mavlink_frame_char_buffer+0x544>
           r_mavlink_status->parse_state = status->parse_state;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	78da      	ldrb	r2, [r3, #3]
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	791a      	ldrb	r2, [r3, #4]
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	795b      	ldrb	r3, [r3, #5]
 80019d6:	3301      	adds	r3, #1
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	891a      	ldrh	r2, [r3, #8]
 80019e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e4:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	789b      	ldrb	r3, [r3, #2]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	7b1a      	ldrb	r2, [r3, #12]
 80019f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f6:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2200      	movs	r2, #0
 80019fc:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d110      	bne.n	8001a28 <mavlink_frame_char_buffer+0x574>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00d      	beq.n	8001a28 <mavlink_frame_char_buffer+0x574>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	460b      	mov	r3, r1
 8001a44:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f93d 	bl	8000cc8 <mavlink_get_channel_buffer>
 8001a4e:	4604      	mov	r4, r0
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f924 	bl	8000ca0 <mavlink_get_channel_status>
 8001a58:	4601      	mov	r1, r0
 8001a5a:	7bba      	ldrb	r2, [r7, #14]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7ff fd26 	bl	80014b4 <mavlink_frame_char_buffer>
 8001a68:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}

08001a72 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b088      	sub	sp, #32
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	460b      	mov	r3, r1
 8001a82:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8001a84:	7bb9      	ldrb	r1, [r7, #14]
 8001a86:	7bf8      	ldrb	r0, [r7, #15]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f7ff ffd2 	bl	8001a34 <mavlink_frame_char>
 8001a90:	4603      	mov	r3, r0
 8001a92:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001a94:	7ffb      	ldrb	r3, [r7, #31]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d002      	beq.n	8001aa0 <mavlink_parse_char+0x2e>
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d120      	bne.n	8001ae2 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f910 	bl	8000cc8 <mavlink_get_channel_buffer>
 8001aa8:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff f8f7 	bl	8000ca0 <mavlink_get_channel_status>
 8001ab2:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8001ab4:	6978      	ldr	r0, [r7, #20]
 8001ab6:	f7ff faed 	bl	8001094 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8001ac6:	7bbb      	ldrb	r3, [r7, #14]
 8001ac8:	2bfd      	cmp	r3, #253	; 0xfd
 8001aca:	d108      	bne.n	8001ade <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8001ad8:	69b8      	ldr	r0, [r7, #24]
 8001ada:	f7ff fc71 	bl	80013c0 <mavlink_start_checksum>
	    }
	    return 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	4613      	mov	r3, r2
 8001afa:	80bb      	strh	r3, [r7, #4]
#ifdef MAVLINK_SEND_UART_BYTES
	/* this is the more efficient approach, if the platform
	   defines it */
    mavlink_comm_send_bytes(chan, (const uint8_t *)buf, len);
 8001afc:	88ba      	ldrh	r2, [r7, #4]
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd06 	bl	8000514 <mavlink_comm_send_bytes>
	uint16_t i;
	for (i = 0; i < len; i++) {
		mavlink_comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <mavlink_msg_heartbeat_send_struct>:
 * @brief Send a heartbeat message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_heartbeat_send_struct(mavlink_channel_t chan, const mavlink_heartbeat_t* heartbeat)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_heartbeat_send(chan, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)heartbeat, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8001b1c:	79f8      	ldrb	r0, [r7, #7]
 8001b1e:	2332      	movs	r3, #50	; 0x32
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	2309      	movs	r3, #9
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2309      	movs	r3, #9
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f7ff fac2 	bl	80010b4 <_mav_finalize_message_chan_send>
#endif
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	78db      	ldrb	r3, [r3, #3]
 8001b46:	2b09      	cmp	r3, #9
 8001b48:	bf28      	it	cs
 8001b4a:	2309      	movcs	r3, #9
 8001b4c:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8001b4e:	2209      	movs	r2, #9
 8001b50:	2100      	movs	r1, #0
 8001b52:	6838      	ldr	r0, [r7, #0]
 8001b54:	f007 fe10 	bl	8009778 <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	330c      	adds	r3, #12
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	6838      	ldr	r0, [r7, #0]
 8001b62:	f007 fe35 	bl	80097d0 <memcpy>
#endif
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <mavlink_msg_zora_led_status_send_struct>:
 * @brief Send a zora_led_status message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_zora_led_status_send_struct(mavlink_channel_t chan, const mavlink_zora_led_status_t* zora_led_status)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af02      	add	r7, sp, #8
 8001b74:	4603      	mov	r3, r0
 8001b76:	6039      	str	r1, [r7, #0]
 8001b78:	71fb      	strb	r3, [r7, #7]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_zora_led_status_send(chan, zora_led_status->LED_GREEN_STATUS, zora_led_status->LED_ORANGE_STATUS, zora_led_status->LED_RED_STATUS);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ZORA_LED_STATUS, (const char *)zora_led_status, MAVLINK_MSG_ID_ZORA_LED_STATUS_MIN_LEN, MAVLINK_MSG_ID_ZORA_LED_STATUS_LEN, MAVLINK_MSG_ID_ZORA_LED_STATUS_CRC);
 8001b7a:	79f8      	ldrb	r0, [r7, #7]
 8001b7c:	2335      	movs	r3, #53	; 0x35
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2303      	movs	r3, #3
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2303      	movs	r3, #3
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	210a      	movs	r1, #10
 8001b8a:	f7ff fa93 	bl	80010b4 <_mav_finalize_message_chan_send>
#endif
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
    command_long->command = mavlink_msg_command_long_get_command(msg);
    command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
    command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
    command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_LONG_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_LONG_LEN;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	78db      	ldrb	r3, [r3, #3]
 8001ba4:	2b21      	cmp	r3, #33	; 0x21
 8001ba6:	bf28      	it	cs
 8001ba8:	2321      	movcs	r3, #33	; 0x21
 8001baa:	73fb      	strb	r3, [r7, #15]
        memset(command_long, 0, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 8001bac:	2221      	movs	r2, #33	; 0x21
 8001bae:	2100      	movs	r1, #0
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	f007 fde1 	bl	8009778 <memset>
    memcpy(command_long, _MAV_PAYLOAD(msg), len);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	330c      	adds	r3, #12
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6838      	ldr	r0, [r7, #0]
 8001bc0:	f007 fe06 	bl	80097d0 <memcpy>
#endif
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <mavlink_msg_protocol_version_send_struct>:
 * @brief Send a protocol_version message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_protocol_version_send_struct(mavlink_channel_t chan, const mavlink_protocol_version_t* protocol_version)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_protocol_version_send(chan, protocol_version->version, protocol_version->min_version, protocol_version->max_version, protocol_version->spec_version_hash, protocol_version->library_version_hash);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PROTOCOL_VERSION, (const char *)protocol_version, MAVLINK_MSG_ID_PROTOCOL_VERSION_MIN_LEN, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN, MAVLINK_MSG_ID_PROTOCOL_VERSION_CRC);
 8001bd8:	79f8      	ldrb	r0, [r7, #7]
 8001bda:	23d9      	movs	r3, #217	; 0xd9
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	2316      	movs	r3, #22
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2316      	movs	r3, #22
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001bea:	f7ff fa63 	bl	80010b4 <_mav_finalize_message_chan_send>
#endif
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <mavlink_msg_protocol_version_decode>:
 *
 * @param msg The message to decode
 * @param protocol_version C-struct to decode the message contents into
 */
static inline void mavlink_msg_protocol_version_decode(const mavlink_message_t* msg, mavlink_protocol_version_t* protocol_version)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
    protocol_version->min_version = mavlink_msg_protocol_version_get_min_version(msg);
    protocol_version->max_version = mavlink_msg_protocol_version_get_max_version(msg);
    mavlink_msg_protocol_version_get_spec_version_hash(msg, protocol_version->spec_version_hash);
    mavlink_msg_protocol_version_get_library_version_hash(msg, protocol_version->library_version_hash);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN? msg->len : MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	78db      	ldrb	r3, [r3, #3]
 8001c04:	2b16      	cmp	r3, #22
 8001c06:	bf28      	it	cs
 8001c08:	2316      	movcs	r3, #22
 8001c0a:	73fb      	strb	r3, [r7, #15]
        memset(protocol_version, 0, MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN);
 8001c0c:	2216      	movs	r2, #22
 8001c0e:	2100      	movs	r1, #0
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f007 fdb1 	bl	8009778 <memset>
    memcpy(protocol_version, _MAV_PAYLOAD(msg), len);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6838      	ldr	r0, [r7, #0]
 8001c20:	f007 fdd6 	bl	80097d0 <memcpy>
#endif
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <setLEDs>:
#pragma once

#ifndef CTU_SR_ZORA_MAVLINK_MAVLINKCOMMANDS_HPP
#define CTU_SR_ZORA_MAVLINK_MAVLINKCOMMANDS_HPP

static void setLEDs(bool green, bool orange, bool red){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	460b      	mov	r3, r1
 8001c38:	71bb      	strb	r3, [r7, #6]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, green);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	461a      	mov	r2, r3
 8001c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c46:	480a      	ldr	r0, [pc, #40]	; (8001c70 <setLEDs+0x44>)
 8001c48:	f003 f94c 	bl	8004ee4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, orange);
 8001c4c:	79bb      	ldrb	r3, [r7, #6]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <setLEDs+0x44>)
 8001c56:	f003 f945 	bl	8004ee4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, red);
 8001c5a:	797b      	ldrb	r3, [r7, #5]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c62:	4803      	ldr	r0, [pc, #12]	; (8001c70 <setLEDs+0x44>)
 8001c64:	f003 f93e 	bl	8004ee4 <HAL_GPIO_WritePin>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	48000800 	.word	0x48000800

08001c74 <MAVlinkSetLEDs>:

static void MAVlinkSetLEDs(const mavlink_command_long_t * const command){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
    setLEDs((bool)command->param1, (bool)command->param2, (bool)command->param3);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2d8      	uxtb	r0, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2d9      	uxtb	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f7ff ffb4 	bl	8001c2c <setLEDs>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <MAVlinkWriteLEDstatus>:
#ifndef CTU_SR_ZORA_MAVLINK_MAVLINKMESSAGES_H
#define CTU_SR_ZORA_MAVLINK_MAVLINKMESSAGES_H

#include <string.h>

static void MAVlinkWriteLEDstatus(){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

    GPIO_PinState G = HAL_GPIO_ReadPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd6:	4811      	ldr	r0, [pc, #68]	; (8001d1c <MAVlinkWriteLEDstatus+0x50>)
 8001cd8:	f003 f8ec 	bl	8004eb4 <HAL_GPIO_ReadPin>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState O = HAL_GPIO_ReadPin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8001ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <MAVlinkWriteLEDstatus+0x50>)
 8001ce6:	f003 f8e5 	bl	8004eb4 <HAL_GPIO_ReadPin>
 8001cea:	4603      	mov	r3, r0
 8001cec:	71bb      	strb	r3, [r7, #6]
    GPIO_PinState R = HAL_GPIO_ReadPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf2:	480a      	ldr	r0, [pc, #40]	; (8001d1c <MAVlinkWriteLEDstatus+0x50>)
 8001cf4:	f003 f8de 	bl	8004eb4 <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	717b      	strb	r3, [r7, #5]

    mavlink_zora_led_status_t ledStatus = {
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	703b      	strb	r3, [r7, #0]
 8001d00:	79bb      	ldrb	r3, [r7, #6]
 8001d02:	707b      	strb	r3, [r7, #1]
 8001d04:	797b      	ldrb	r3, [r7, #5]
 8001d06:	70bb      	strb	r3, [r7, #2]
            .LED_GREEN_STATUS = G,
            .LED_ORANGE_STATUS = O,
            .LED_RED_STATUS = R
    };

    mavlink_msg_zora_led_status_send_struct(MAVLINK_COMM_0,&ledStatus);
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff ff2e 	bl	8001b6e <mavlink_msg_zora_led_status_send_struct>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	48000800 	.word	0x48000800

08001d20 <MAVLinkSetCurrentSystem>:

//-------------
// USE THIS FUNCTION TO SET THE MAVLINK SYSTEM PARAMETRS
//-------------
//system = mavlink_system defined in MAVLinkSetup.h
static void MAVLinkSetCurrentSystem(mavlink_system_t * system, uint8_t SysId, uint8_t CompId){
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	70bb      	strb	r3, [r7, #2]
    system->sysid = SysId;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	701a      	strb	r2, [r3, #0]
    system->compid = CompId;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	78ba      	ldrb	r2, [r7, #2]
 8001d3a:	705a      	strb	r2, [r3, #1]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <MAVlinkWriteHearbeat>:

static void MAVlinkWriteHearbeat(){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
    unsigned len = mavlink_msg_heartbeat_pack( MAVlinkSystemID,MAVlinkComponentID, &message,MAV_TYPE_ROCKET,MAV_AUTOPILOT_INVALID,MAV_MODE_FLAG_DECODE_POSITION_SAFETY, 0,MAV_STATE_STANDBY);	    // Translate message to buffer	    len = mavlink_msg_to_send_buffer((uint8_t*)buf, &message);
    len = mavlink_msg_to_send_buffer((uint8_t*)buf, &message);

	 */

	mavlink_heartbeat_t heartbeat = {
 8001d4e:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <MAVlinkWriteHearbeat+0x24>)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	            .custom_mode = 0,
	            .system_status = MAV_STATE_STANDBY,
				.mavlink_version = 3
	    };

	    mavlink_msg_heartbeat_send_struct(MAVLINK_COMM_0,&heartbeat);
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff fed7 	bl	8001b10 <mavlink_msg_heartbeat_send_struct>

}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08009804 	.word	0x08009804

08001d70 <MAVlinkWriteProtocolVersion>:

static void MAVlinkWriteProtocolVersion(){
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0

    //TODO: Figure out the correct version hash data
    mavlink_protocol_version_t data = {
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MAVlinkWriteProtocolVersion+0x2c>)
 8001d78:	463c      	mov	r4, r7
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d84:	6020      	str	r0, [r4, #0]
 8001d86:	3404      	adds	r4, #4
 8001d88:	8021      	strh	r1, [r4, #0]
           .min_version = MAVLINK_MSG_ID_PROTOCOL_VERSION,
           .library_version_hash = "TESTTEST",
           .spec_version_hash = "PROTPROT"
    };

    mavlink_msg_protocol_version_send_struct(MAVLINK_COMM_0,&data);
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff ff1c 	bl	8001bcc <mavlink_msg_protocol_version_send_struct>
}
 8001d94:	bf00      	nop
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9c:	08009810 	.word	0x08009810

08001da0 <MAVLinkHandleLongCommands>:

static bool MAVLinkHandleLongCommands(const mavlink_command_long_t * const command){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    switch (command->command){
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8b9b      	ldrh	r3, [r3, #28]
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d01a      	beq.n	8001de6 <MAVLinkHandleLongCommands+0x46>
 8001db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db4:	d11c      	bne.n	8001df0 <MAVLinkHandleLongCommands+0x50>

        //if the command request the system to send a message:
        case MAV_CMD_REQUEST_MESSAGE:
            uint16_t requestedMessageID = (uint16_t)command->param1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc0:	ee17 3a90 	vmov	r3, s15
 8001dc4:	81fb      	strh	r3, [r7, #14]

            switch (requestedMessageID) {
 8001dc6:	89fb      	ldrh	r3, [r7, #14]
 8001dc8:	2b0a      	cmp	r3, #10
 8001dca:	d006      	beq.n	8001dda <MAVLinkHandleLongCommands+0x3a>
 8001dcc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001dd0:	d107      	bne.n	8001de2 <MAVLinkHandleLongCommands+0x42>
                case MAVLINK_MSG_ID_PROTOCOL_VERSION:
                    MAVlinkWriteProtocolVersion();
 8001dd2:	f7ff ffcd 	bl	8001d70 <MAVlinkWriteProtocolVersion>
                    return true;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00b      	b.n	8001df2 <MAVLinkHandleLongCommands+0x52>

                case MAVLINK_MSG_ID_ZORA_LED_STATUS:
                    MAVlinkWriteLEDstatus();
 8001dda:	f7ff ff77 	bl	8001ccc <MAVlinkWriteLEDstatus>
                    return true;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e007      	b.n	8001df2 <MAVLinkHandleLongCommands+0x52>

                default:
                    return false;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e005      	b.n	8001df2 <MAVLinkHandleLongCommands+0x52>

            }
            break;

        case MAV_CMD_SET_LEDS:
            MAVlinkSetLEDs(command); return true;
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff44 	bl	8001c74 <MAVlinkSetLEDs>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <MAVLinkHandleLongCommands+0x52>

        default:
            return false;
 8001df0:	2300      	movs	r3, #0
            break;
    }
    return false;
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <MAVLinkHandleReceivedMessage>:

static bool MAVLinkHandleReceivedMessage(mavlink_message_t * message, mavlink_status_t * messageStatus){
 8001dfc:	b5b0      	push	{r4, r5, r7, lr}
 8001dfe:	b09e      	sub	sp, #120	; 0x78
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    switch (message->msgid) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001e0e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e12:	d014      	beq.n	8001e3e <MAVLinkHandleReceivedMessage+0x42>
 8001e14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e18:	dc3a      	bgt.n	8001e90 <MAVLinkHandleReceivedMessage+0x94>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <MAVLinkHandleReceivedMessage+0x28>
 8001e1e:	2b4c      	cmp	r3, #76	; 0x4c
 8001e20:	d01a      	beq.n	8001e58 <MAVLinkHandleReceivedMessage+0x5c>
 8001e22:	e035      	b.n	8001e90 <MAVLinkHandleReceivedMessage+0x94>
        case MAVLINK_MSG_ID_HEARTBEAT:
            HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001e24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e28:	481c      	ldr	r0, [pc, #112]	; (8001e9c <MAVLinkHandleReceivedMessage+0xa0>)
 8001e2a:	f003 f873 	bl	8004f14 <HAL_GPIO_TogglePin>
            mavlink_heartbeat_t hb;
            mavlink_msg_heartbeat_decode(message,&hb);
 8001e2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e32:	4619      	mov	r1, r3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fe7f 	bl	8001b38 <mavlink_msg_heartbeat_decode>
            return true;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e029      	b.n	8001e92 <MAVLinkHandleReceivedMessage+0x96>

        case MAVLINK_MSG_ID_PROTOCOL_VERSION:
            HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001e3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e42:	4816      	ldr	r0, [pc, #88]	; (8001e9c <MAVLinkHandleReceivedMessage+0xa0>)
 8001e44:	f003 f866 	bl	8004f14 <HAL_GPIO_TogglePin>
            mavlink_protocol_version_t protocol;
            mavlink_msg_protocol_version_decode(message, &protocol);
 8001e48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fed1 	bl	8001bf6 <mavlink_msg_protocol_version_decode>
            return true;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e01c      	b.n	8001e92 <MAVLinkHandleReceivedMessage+0x96>

            //receive message of type Command
        case MAVLINK_MSG_ID_COMMAND_LONG:
            HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8001e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e5c:	480f      	ldr	r0, [pc, #60]	; (8001e9c <MAVLinkHandleReceivedMessage+0xa0>)
 8001e5e:	f003 f859 	bl	8004f14 <HAL_GPIO_TogglePin>
            mavlink_command_long_t _command;
            mavlink_msg_command_long_decode(message, &_command);
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4619      	mov	r1, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fe94 	bl	8001b96 <mavlink_msg_command_long_decode>
            const mavlink_command_long_t command = _command; //convert it to a const data variable to prevent change later
 8001e6e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001e72:	f107 050c 	add.w	r5, r7, #12
 8001e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7e:	682b      	ldr	r3, [r5, #0]
 8001e80:	6023      	str	r3, [r4, #0]


            //parse the command
            return MAVLinkHandleLongCommands(&command);
 8001e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff8a 	bl	8001da0 <MAVLinkHandleLongCommands>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	e000      	b.n	8001e92 <MAVLinkHandleReceivedMessage+0x96>
            break;

        default:
            return false;
 8001e90:	2300      	movs	r3, #0
    }

    return false;
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3778      	adds	r7, #120	; 0x78
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	48000800 	.word	0x48000800

08001ea0 <MAVLinkParseBuffer>:

static void MAVLinkParseBuffer(const uint8_t * receivedBuffer){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0d2      	sub	sp, #328	; 0x148
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001eaa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001eae:	6018      	str	r0, [r3, #0]
    mavlink_message_t message;
    mavlink_status_t messageStatus;

    //figure out what to do when the mavlink parses the buffer before it should end??
    for(uint16_t i = 0; i < UART_RX_Received_NextFreeByteIndex;i++){
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8001eb6:	e026      	b.n	8001f06 <MAVLinkParseBuffer+0x66>
        const uint8_t byte = receivedBuffer[i];
 8001eb8:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001ebc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001ec0:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

        //parse the data until its the message is decoded/refused
        if(mavlink_parse_char(MAVLINK_USART1_CHANNEL_NUM,byte,&message,&messageStatus)){
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	f107 0220 	add.w	r2, r7, #32
 8001ed6:	f897 1145 	ldrb.w	r1, [r7, #325]	; 0x145
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff fdc9 	bl	8001a72 <mavlink_parse_char>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <MAVLinkParseBuffer+0x5c>
            const bool parse = MAVLinkHandleReceivedMessage(&message,&messageStatus);
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff83 	bl	8001dfc <MAVLinkHandleReceivedMessage>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
    for(uint16_t i = 0; i < UART_RX_Received_NextFreeByteIndex;i++){
 8001efc:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8001f00:	3301      	adds	r3, #1
 8001f02:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MAVLinkParseBuffer+0x80>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d3d1      	bcc.n	8001eb8 <MAVLinkParseBuffer+0x18>
        }
    }

}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200004b8 	.word	0x200004b8

08001f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2a:	f000 fe14 	bl	8002b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f2e:	f000 f855 	bl	8001fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f32:	f000 fad1 	bl	80024d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f36:	f000 faa5 	bl	8002484 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f3a:	f000 f899 	bl	8002070 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001f3e:	f000 f985 	bl	800224c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f42:	f000 fa05 	bl	8002350 <MX_TIM4_Init>
  MX_FDCAN2_Init();
 8001f46:	f000 f93b 	bl	80021c0 <MX_FDCAN2_Init>
  MX_USART1_UART_Init();
 8001f4a:	f000 fa4f 	bl	80023ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//SysTick->LOAD = (SystemCoreClock / 1000) - 1; //value which will be reloaded after countdown
	//SysTick->VAL = 0x0;
	//SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; //enable clock source to systick, enable systick interrupt, enable systick

  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0U);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f56:	f002 f812 	bl	8003f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
 8001f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f5e:	f002 f828 	bl	8003fb2 <HAL_NVIC_EnableIRQ>

  HAL_UART_Receive_IT(&huart1,(uint8_t *)&UART_RX_Byte,1);
 8001f62:	2201      	movs	r2, #1
 8001f64:	4917      	ldr	r1, [pc, #92]	; (8001fc4 <main+0xa0>)
 8001f66:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <main+0xa4>)
 8001f68:	f005 fac4 	bl	80074f4 <HAL_UART_Receive_IT>
  // __HAL_UART_ENABLE_IT(&huart1,UART_FLAG_IDLE); //enable IDLE line interrupt for the logic to work
  USART1->CR1 |= USART_CR1_IDLEIE; // //enable IDLE line interrupt for the logic to work
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <main+0xa8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <main+0xa8>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6013      	str	r3, [r2, #0]

  //does not owrk??
  //USART1->ICR |= USART_ICR_IDLECF; //clear the interrupt flag (so that we wont get interrupt instantly. next interrupt will occur only after RX buffer is not empty, eg on received data

  //SET MAVLINK SYSTEM ID AND COMPONENT ID
  MAVLinkSetCurrentSystem(&mavlink_system,MAVlinkSystemID,MAVlinkComponentID);
 8001f78:	220c      	movs	r2, #12
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4814      	ldr	r0, [pc, #80]	; (8001fd0 <main+0xac>)
 8001f7e:	f7ff fecf 	bl	8001d20 <MAVLinkSetCurrentSystem>

  setLEDs(1, 1, 1);
 8001f82:	2201      	movs	r2, #1
 8001f84:	2101      	movs	r1, #1
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff fe50 	bl	8001c2c <setLEDs>

  uint32_t lastTick = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      uint32_t tick = HAL_GetTick();
 8001f90:	f000 fe46 	bl	8002c20 <HAL_GetTick>
 8001f94:	6038      	str	r0, [r7, #0]

      //send Heartbeat every second
      if(tick > (lastTick + 1000)){
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d903      	bls.n	8001faa <main+0x86>
          MAVlinkWriteHearbeat();
 8001fa2:	f7ff fed1 	bl	8001d48 <MAVlinkWriteHearbeat>
    	  //MAVlinkWriteLEDstatus();
          lastTick = tick;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	607b      	str	r3, [r7, #4]
      }

      //wait for incoming data
      if(FLAG_UART_line_IDLE){
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <main+0xb0>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ed      	beq.n	8001f90 <main+0x6c>
          MAVLinkParseBuffer((uint8_t *)UART_RX_Received_Message);
 8001fb4:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <main+0xb4>)
 8001fb6:	f7ff ff73 	bl	8001ea0 <MAVLinkParseBuffer>
          FLAG_UART_line_IDLE = false;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <main+0xb0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
  {
 8001fc0:	e7e6      	b.n	8001f90 <main+0x6c>
 8001fc2:	bf00      	nop
 8001fc4:	200004bb 	.word	0x200004bb
 8001fc8:	200001f4 	.word	0x200001f4
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	20000028 	.word	0x20000028
 8001fd4:	200004ba 	.word	0x200004ba
 8001fd8:	200003a0 	.word	0x200003a0

08001fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b094      	sub	sp, #80	; 0x50
 8001fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe2:	f107 0318 	add.w	r3, r7, #24
 8001fe6:	2238      	movs	r2, #56	; 0x38
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f007 fbc4 	bl	8009778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f002 ffa2 	bl	8004f48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002004:	2301      	movs	r3, #1
 8002006:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800200c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200e:	2302      	movs	r3, #2
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002012:	2303      	movs	r3, #3
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002016:	2301      	movs	r3, #1
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800201a:	2328      	movs	r3, #40	; 0x28
 800201c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800201e:	2302      	movs	r3, #2
 8002020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002022:	2302      	movs	r3, #2
 8002024:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002026:	2302      	movs	r3, #2
 8002028:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202a:	f107 0318 	add.w	r3, r7, #24
 800202e:	4618      	mov	r0, r3
 8002030:	f003 f83e 	bl	80050b0 <HAL_RCC_OscConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800203a:	f000 fad9 	bl	80025f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203e:	230f      	movs	r3, #15
 8002040:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002042:	2303      	movs	r3, #3
 8002044:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2104      	movs	r1, #4
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fb42 	bl	80056e0 <HAL_RCC_ClockConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002062:	f000 fac5 	bl	80025f0 <Error_Handler>
  }
}
 8002066:	bf00      	nop
 8002068:	3750      	adds	r7, #80	; 0x50
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2220      	movs	r2, #32
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f007 fb75 	bl	8009778 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <MX_ADC1_Init+0x13c>)
 8002090:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002096:	4b45      	ldr	r3, [pc, #276]	; (80021ac <MX_ADC1_Init+0x13c>)
 8002098:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800209c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020a4:	4b41      	ldr	r3, [pc, #260]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80020aa:	4b40      	ldr	r3, [pc, #256]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020b0:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020b8:	2204      	movs	r2, #4
 80020ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020c2:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80020c8:	4b38      	ldr	r3, [pc, #224]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020ca:	2204      	movs	r2, #4
 80020cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020d6:	4b35      	ldr	r3, [pc, #212]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020dc:	4b33      	ldr	r3, [pc, #204]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020e2:	4b32      	ldr	r3, [pc, #200]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020f8:	482c      	ldr	r0, [pc, #176]	; (80021ac <MX_ADC1_Init+0x13c>)
 80020fa:	f000 ff77 	bl	8002fec <HAL_ADC_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002104:	f000 fa74 	bl	80025f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4826      	ldr	r0, [pc, #152]	; (80021ac <MX_ADC1_Init+0x13c>)
 8002114:	f001 fd70 	bl	8003bf8 <HAL_ADCEx_MultiModeConfigChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800211e:	f000 fa67 	bl	80025f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002122:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <MX_ADC1_Init+0x140>)
 8002124:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002126:	2306      	movs	r3, #6
 8002128:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800212e:	237f      	movs	r3, #127	; 0x7f
 8002130:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002132:	2304      	movs	r3, #4
 8002134:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	481b      	ldr	r0, [pc, #108]	; (80021ac <MX_ADC1_Init+0x13c>)
 8002140:	f001 f908 	bl	8003354 <HAL_ADC_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800214a:	f000 fa51 	bl	80025f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MX_ADC1_Init+0x144>)
 8002150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002152:	230c      	movs	r3, #12
 8002154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4814      	ldr	r0, [pc, #80]	; (80021ac <MX_ADC1_Init+0x13c>)
 800215c:	f001 f8fa 	bl	8003354 <HAL_ADC_ConfigChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002166:	f000 fa43 	bl	80025f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <MX_ADC1_Init+0x148>)
 800216c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800216e:	2312      	movs	r3, #18
 8002170:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	4619      	mov	r1, r3
 8002176:	480d      	ldr	r0, [pc, #52]	; (80021ac <MX_ADC1_Init+0x13c>)
 8002178:	f001 f8ec 	bl	8003354 <HAL_ADC_ConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002182:	f000 fa35 	bl	80025f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <MX_ADC1_Init+0x14c>)
 8002188:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800218a:	2318      	movs	r3, #24
 800218c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4806      	ldr	r0, [pc, #24]	; (80021ac <MX_ADC1_Init+0x13c>)
 8002194:	f001 f8de 	bl	8003354 <HAL_ADC_ConfigChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800219e:	f000 fa27 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	3730      	adds	r7, #48	; 0x30
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000002c 	.word	0x2000002c
 80021b0:	32601000 	.word	0x32601000
 80021b4:	2e300800 	.word	0x2e300800
 80021b8:	3ac04000 	.word	0x3ac04000
 80021bc:	3ef08000 	.word	0x3ef08000

080021c0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021c6:	4a20      	ldr	r2, [pc, #128]	; (8002248 <MX_FDCAN2_Init+0x88>)
 80021c8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80021d0:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021de:	2200      	movs	r2, #0
 80021e0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80021e2:	4b18      	ldr	r3, [pc, #96]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 160;
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021f0:	22a0      	movs	r2, #160	; 0xa0
 80021f2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 5;
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_FDCAN2_Init+0x84>)
 80021fc:	2205      	movs	r2, #5
 80021fe:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <MX_FDCAN2_Init+0x84>)
 8002202:	2202      	movs	r2, #2
 8002204:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_FDCAN2_Init+0x84>)
 8002208:	2201      	movs	r2, #1
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <MX_FDCAN2_Init+0x84>)
 800220e:	2201      	movs	r2, #1
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_FDCAN2_Init+0x84>)
 8002214:	2201      	movs	r2, #1
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <MX_FDCAN2_Init+0x84>)
 800221a:	2201      	movs	r2, #1
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 3;
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_FDCAN2_Init+0x84>)
 8002220:	2203      	movs	r2, #3
 8002222:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <MX_FDCAN2_Init+0x84>)
 8002226:	2200      	movs	r2, #0
 8002228:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_FDCAN2_Init+0x84>)
 800222c:	2200      	movs	r2, #0
 800222e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002230:	4804      	ldr	r0, [pc, #16]	; (8002244 <MX_FDCAN2_Init+0x84>)
 8002232:	f002 f953 	bl	80044dc <HAL_FDCAN_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800223c:	f000 f9d8 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200000f8 	.word	0x200000f8
 8002248:	40006800 	.word	0x40006800

0800224c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	; 0x38
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800226c:	463b      	mov	r3, r7
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	615a      	str	r2, [r3, #20]
 800227c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800227e:	4b32      	ldr	r3, [pc, #200]	; (8002348 <MX_TIM3_Init+0xfc>)
 8002280:	4a32      	ldr	r2, [pc, #200]	; (800234c <MX_TIM3_Init+0x100>)
 8002282:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8002284:	4b30      	ldr	r3, [pc, #192]	; (8002348 <MX_TIM3_Init+0xfc>)
 8002286:	2207      	movs	r2, #7
 8002288:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <MX_TIM3_Init+0xfc>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <MX_TIM3_Init+0xfc>)
 8002292:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002296:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <MX_TIM3_Init+0xfc>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <MX_TIM3_Init+0xfc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022a4:	4828      	ldr	r0, [pc, #160]	; (8002348 <MX_TIM3_Init+0xfc>)
 80022a6:	f003 fe73 	bl	8005f90 <HAL_TIM_Base_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80022b0:	f000 f99e 	bl	80025f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022be:	4619      	mov	r1, r3
 80022c0:	4821      	ldr	r0, [pc, #132]	; (8002348 <MX_TIM3_Init+0xfc>)
 80022c2:	f004 f9b1 	bl	8006628 <HAL_TIM_ConfigClockSource>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80022cc:	f000 f990 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022d0:	481d      	ldr	r0, [pc, #116]	; (8002348 <MX_TIM3_Init+0xfc>)
 80022d2:	f003 feb4 	bl	800603e <HAL_TIM_PWM_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80022dc:	f000 f988 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4619      	mov	r1, r3
 80022ee:	4816      	ldr	r0, [pc, #88]	; (8002348 <MX_TIM3_Init+0xfc>)
 80022f0:	f004 ff34 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80022fa:	f000 f979 	bl	80025f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fe:	2360      	movs	r3, #96	; 0x60
 8002300:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230e:	463b      	mov	r3, r7
 8002310:	2200      	movs	r2, #0
 8002312:	4619      	mov	r1, r3
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <MX_TIM3_Init+0xfc>)
 8002316:	f004 f873 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002320:	f000 f966 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002324:	463b      	mov	r3, r7
 8002326:	2204      	movs	r2, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4807      	ldr	r0, [pc, #28]	; (8002348 <MX_TIM3_Init+0xfc>)
 800232c:	f004 f868 	bl	8006400 <HAL_TIM_PWM_ConfigChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002336:	f000 f95b 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800233a:	4803      	ldr	r0, [pc, #12]	; (8002348 <MX_TIM3_Init+0xfc>)
 800233c:	f000 faaa 	bl	8002894 <HAL_TIM_MspPostInit>

}
 8002340:	bf00      	nop
 8002342:	3738      	adds	r7, #56	; 0x38
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000015c 	.word	0x2000015c
 800234c:	40000400 	.word	0x40000400

08002350 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM4_Init+0x94>)
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <MX_TIM4_Init+0x98>)
 8002372:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <MX_TIM4_Init+0x94>)
 8002376:	229f      	movs	r2, #159	; 0x9f
 8002378:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_TIM4_Init+0x94>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_TIM4_Init+0x94>)
 8002382:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002386:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <MX_TIM4_Init+0x94>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <MX_TIM4_Init+0x94>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002394:	4813      	ldr	r0, [pc, #76]	; (80023e4 <MX_TIM4_Init+0x94>)
 8002396:	f003 fdfb 	bl	8005f90 <HAL_TIM_Base_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80023a0:	f000 f926 	bl	80025f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <MX_TIM4_Init+0x94>)
 80023b2:	f004 f939 	bl	8006628 <HAL_TIM_ConfigClockSource>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80023bc:	f000 f918 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_TIM4_Init+0x94>)
 80023ce:	f004 fec5 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80023d8:	f000 f90a 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200001a8 	.word	0x200001a8
 80023e8:	40000800 	.word	0x40000800

080023ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <MX_USART1_UART_Init+0x90>)
 80023f2:	4a23      	ldr	r2, [pc, #140]	; (8002480 <MX_USART1_UART_Init+0x94>)
 80023f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <MX_USART1_UART_Init+0x90>)
 80023f8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80023fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023fe:	4b1f      	ldr	r3, [pc, #124]	; (800247c <MX_USART1_UART_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <MX_USART1_UART_Init+0x90>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <MX_USART1_UART_Init+0x90>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <MX_USART1_UART_Init+0x90>)
 8002412:	220c      	movs	r2, #12
 8002414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <MX_USART1_UART_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800241c:	4b17      	ldr	r3, [pc, #92]	; (800247c <MX_USART1_UART_Init+0x90>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <MX_USART1_UART_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <MX_USART1_UART_Init+0x90>)
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <MX_USART1_UART_Init+0x90>)
 8002430:	2200      	movs	r2, #0
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002434:	4811      	ldr	r0, [pc, #68]	; (800247c <MX_USART1_UART_Init+0x90>)
 8002436:	f004 ff65 	bl	8007304 <HAL_UART_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002440:	f000 f8d6 	bl	80025f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002444:	2100      	movs	r1, #0
 8002446:	480d      	ldr	r0, [pc, #52]	; (800247c <MX_USART1_UART_Init+0x90>)
 8002448:	f007 f8bb 	bl	80095c2 <HAL_UARTEx_SetTxFifoThreshold>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002452:	f000 f8cd 	bl	80025f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002456:	2100      	movs	r1, #0
 8002458:	4808      	ldr	r0, [pc, #32]	; (800247c <MX_USART1_UART_Init+0x90>)
 800245a:	f007 f8f0 	bl	800963e <HAL_UARTEx_SetRxFifoThreshold>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002464:	f000 f8c4 	bl	80025f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <MX_USART1_UART_Init+0x90>)
 800246a:	f007 f871 	bl	8009550 <HAL_UARTEx_DisableFifoMode>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002474:	f000 f8bc 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200001f4 	.word	0x200001f4
 8002480:	40013800 	.word	0x40013800

08002484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <MX_DMA_Init+0x50>)
 800248c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248e:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <MX_DMA_Init+0x50>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	6493      	str	r3, [r2, #72]	; 0x48
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_DMA_Init+0x50>)
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_DMA_Init+0x50>)
 80024a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a6:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <MX_DMA_Init+0x50>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6493      	str	r3, [r2, #72]	; 0x48
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_DMA_Init+0x50>)
 80024b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	200b      	movs	r0, #11
 80024c0:	f001 fd5d 	bl	8003f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024c4:	200b      	movs	r0, #11
 80024c6:	f001 fd74 	bl	8003fb2 <HAL_NVIC_EnableIRQ>

}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000

080024d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ee:	4b2b      	ldr	r3, [pc, #172]	; (800259c <MX_GPIO_Init+0xc4>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	4a2a      	ldr	r2, [pc, #168]	; (800259c <MX_GPIO_Init+0xc4>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <MX_GPIO_Init+0xc4>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <MX_GPIO_Init+0xc4>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	4a24      	ldr	r2, [pc, #144]	; (800259c <MX_GPIO_Init+0xc4>)
 800250c:	f043 0320 	orr.w	r3, r3, #32
 8002510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <MX_GPIO_Init+0xc4>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	4b1f      	ldr	r3, [pc, #124]	; (800259c <MX_GPIO_Init+0xc4>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	4a1e      	ldr	r2, [pc, #120]	; (800259c <MX_GPIO_Init+0xc4>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <MX_GPIO_Init+0xc4>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_GPIO_Init+0xc4>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	4a18      	ldr	r2, [pc, #96]	; (800259c <MX_GPIO_Init+0xc4>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_GPIO_Init+0xc4>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ORANGE_Pin|LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800254e:	2200      	movs	r2, #0
 8002550:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002554:	4812      	ldr	r0, [pc, #72]	; (80025a0 <MX_GPIO_Init+0xc8>)
 8002556:	f002 fcc5 	bl	8004ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_ORANGE_Pin LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_ORANGE_Pin|LED_RED_Pin|LED_GREEN_Pin;
 800255a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800255e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	480b      	ldr	r0, [pc, #44]	; (80025a0 <MX_GPIO_Init+0xc8>)
 8002574:	f002 fb1c 	bl	8004bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002582:	2301      	movs	r3, #1
 8002584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	4804      	ldr	r0, [pc, #16]	; (80025a0 <MX_GPIO_Init+0xc8>)
 800258e:	f002 fb0f 	bl	8004bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	48000800 	.word	0x48000800

080025a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


//when the uart finishes recieving all data = one byte
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

    //set the recived byte to the buffer and increase the index
    UART_RX_Buffer[UART_RX_Buffer_NextFreeByteIndex] = UART_RX_Byte;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_UART_RxCpltCallback+0x3c>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_UART_RxCpltCallback+0x40>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2d9      	uxtb	r1, r3
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_UART_RxCpltCallback+0x44>)
 80025bc:	5499      	strb	r1, [r3, r2]
    UART_RX_Buffer_NextFreeByteIndex++;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_UART_RxCpltCallback+0x3c>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_UART_RxCpltCallback+0x3c>)
 80025ca:	801a      	strh	r2, [r3, #0]

    //restart interrupt
    HAL_UART_Receive_IT(&huart1,(uint8_t *)&UART_RX_Byte,1);
 80025cc:	2201      	movs	r2, #1
 80025ce:	4905      	ldr	r1, [pc, #20]	; (80025e4 <HAL_UART_RxCpltCallback+0x40>)
 80025d0:	4806      	ldr	r0, [pc, #24]	; (80025ec <HAL_UART_RxCpltCallback+0x48>)
 80025d2:	f004 ff8f 	bl	80074f4 <HAL_UART_Receive_IT>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000039c 	.word	0x2000039c
 80025e4:	200004bb 	.word	0x200004bb
 80025e8:	20000284 	.word	0x20000284
 80025ec:	200001f4 	.word	0x200001f4

080025f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f4:	b672      	cpsid	i
}
 80025f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <Error_Handler+0x8>
	...

080025fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_MspInit+0x44>)
 8002604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_MspInit+0x44>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6613      	str	r3, [r2, #96]	; 0x60
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_MspInit+0x44>)
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_MspInit+0x44>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	4a08      	ldr	r2, [pc, #32]	; (8002640 <HAL_MspInit+0x44>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6593      	str	r3, [r2, #88]	; 0x58
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_MspInit+0x44>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002632:	f002 fd2d 	bl	8005090 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000

08002644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b09e      	sub	sp, #120	; 0x78
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	2250      	movs	r2, #80	; 0x50
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f007 f887 	bl	8009778 <memset>
  if(hadc->Instance==ADC1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002672:	d15f      	bne.n	8002734 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002678:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800267a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800267e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	4618      	mov	r0, r3
 8002686:	f003 fa47 	bl	8005b18 <HAL_RCCEx_PeriphCLKConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002690:	f7ff ffae 	bl	80025f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_ADC_MspInit+0xf8>)
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	4a28      	ldr	r2, [pc, #160]	; (800273c <HAL_ADC_MspInit+0xf8>)
 800269a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800269e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_ADC_MspInit+0xf8>)
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_ADC_MspInit+0xf8>)
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_ADC_MspInit+0xf8>)
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_ADC_MspInit+0xf8>)
 80026ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80026c4:	f641 0303 	movw	r3, #6147	; 0x1803
 80026c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ca:	2303      	movs	r3, #3
 80026cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026d6:	4619      	mov	r1, r3
 80026d8:	4819      	ldr	r0, [pc, #100]	; (8002740 <HAL_ADC_MspInit+0xfc>)
 80026da:	f002 fa69 	bl	8004bb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_ADC_MspInit+0x100>)
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_ADC_MspInit+0x104>)
 80026e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <HAL_ADC_MspInit+0x100>)
 80026e6:	2205      	movs	r2, #5
 80026e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_ADC_MspInit+0x100>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_ADC_MspInit+0x100>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_ADC_MspInit+0x100>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_ADC_MspInit+0x100>)
 80026fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002702:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_ADC_MspInit+0x100>)
 8002706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800270a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_ADC_MspInit+0x100>)
 800270e:	2220      	movs	r2, #32
 8002710:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_ADC_MspInit+0x100>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002718:	480a      	ldr	r0, [pc, #40]	; (8002744 <HAL_ADC_MspInit+0x100>)
 800271a:	f001 fc65 	bl	8003fe8 <HAL_DMA_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002724:	f7ff ff64 	bl	80025f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a06      	ldr	r2, [pc, #24]	; (8002744 <HAL_ADC_MspInit+0x100>)
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <HAL_ADC_MspInit+0x100>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002734:	bf00      	nop
 8002736:	3778      	adds	r7, #120	; 0x78
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	48000400 	.word	0x48000400
 8002744:	20000098 	.word	0x20000098
 8002748:	40020008 	.word	0x40020008

0800274c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b09e      	sub	sp, #120	; 0x78
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2250      	movs	r2, #80	; 0x50
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f007 f803 	bl	8009778 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a23      	ldr	r2, [pc, #140]	; (8002804 <HAL_FDCAN_MspInit+0xb8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d13f      	bne.n	80027fc <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800277c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002780:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002786:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4618      	mov	r0, r3
 800278e:	f003 f9c3 	bl	8005b18 <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002798:	f7ff ff2a 	bl	80025f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <HAL_FDCAN_MspInit+0xbc>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_FDCAN_MspInit+0xbc>)
 80027a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027a6:	6593      	str	r3, [r2, #88]	; 0x58
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <HAL_FDCAN_MspInit+0xbc>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <HAL_FDCAN_MspInit+0xbc>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	4a13      	ldr	r2, [pc, #76]	; (8002808 <HAL_FDCAN_MspInit+0xbc>)
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_FDCAN_MspInit+0xbc>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027cc:	2360      	movs	r3, #96	; 0x60
 80027ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80027dc:	2309      	movs	r3, #9
 80027de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027e4:	4619      	mov	r1, r3
 80027e6:	4809      	ldr	r0, [pc, #36]	; (800280c <HAL_FDCAN_MspInit+0xc0>)
 80027e8:	f002 f9e2 	bl	8004bb0 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2100      	movs	r1, #0
 80027f0:	2056      	movs	r0, #86	; 0x56
 80027f2:	f001 fbc4 	bl	8003f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80027f6:	2056      	movs	r0, #86	; 0x56
 80027f8:	f001 fbdb 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80027fc:	bf00      	nop
 80027fe:	3778      	adds	r7, #120	; 0x78
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40006800 	.word	0x40006800
 8002808:	40021000 	.word	0x40021000
 800280c:	48000400 	.word	0x48000400

08002810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1a      	ldr	r2, [pc, #104]	; (8002888 <HAL_TIM_Base_MspInit+0x78>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d114      	bne.n	800284c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_TIM_Base_MspInit+0x7c>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	4a19      	ldr	r2, [pc, #100]	; (800288c <HAL_TIM_Base_MspInit+0x7c>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_TIM_Base_MspInit+0x7c>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	201d      	movs	r0, #29
 8002840:	f001 fb9d 	bl	8003f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002844:	201d      	movs	r0, #29
 8002846:	f001 fbb4 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800284a:	e018      	b.n	800287e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_TIM_Base_MspInit+0x80>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d113      	bne.n	800287e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <HAL_TIM_Base_MspInit+0x7c>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	4a0c      	ldr	r2, [pc, #48]	; (800288c <HAL_TIM_Base_MspInit+0x7c>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6593      	str	r3, [r2, #88]	; 0x58
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_TIM_Base_MspInit+0x7c>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	201e      	movs	r0, #30
 8002874:	f001 fb83 	bl	8003f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002878:	201e      	movs	r0, #30
 800287a:	f001 fb9a 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40000400 	.word	0x40000400
 800288c:	40021000 	.word	0x40021000
 8002890:	40000800 	.word	0x40000800

08002894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <HAL_TIM_MspPostInit+0x64>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d11b      	bne.n	80028ee <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_TIM_MspPostInit+0x68>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	4a10      	ldr	r2, [pc, #64]	; (80028fc <HAL_TIM_MspPostInit+0x68>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_TIM_MspPostInit+0x68>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ce:	23c0      	movs	r3, #192	; 0xc0
 80028d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028de:	2302      	movs	r3, #2
 80028e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	4619      	mov	r1, r3
 80028e8:	4805      	ldr	r0, [pc, #20]	; (8002900 <HAL_TIM_MspPostInit+0x6c>)
 80028ea:	f002 f961 	bl	8004bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028ee:	bf00      	nop
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40021000 	.word	0x40021000
 8002900:	48000800 	.word	0x48000800

08002904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b09e      	sub	sp, #120	; 0x78
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	2250      	movs	r2, #80	; 0x50
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f006 ff27 	bl	8009778 <memset>
  if(huart->Instance==USART1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <HAL_UART_MspInit+0xb4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d13d      	bne.n	80029b0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002934:	2301      	movs	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4618      	mov	r0, r3
 8002942:	f003 f8e9 	bl	8005b18 <HAL_RCCEx_PeriphCLKConfig>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800294c:	f7ff fe50 	bl	80025f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_UART_MspInit+0xb8>)
 8002952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_UART_MspInit+0xb8>)
 8002956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295a:	6613      	str	r3, [r2, #96]	; 0x60
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_UART_MspInit+0xb8>)
 800295e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_UART_MspInit+0xb8>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_UART_MspInit+0xb8>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_UART_MspInit+0xb8>)
 8002976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002980:	2330      	movs	r3, #48	; 0x30
 8002982:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002990:	2307      	movs	r3, #7
 8002992:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002998:	4619      	mov	r1, r3
 800299a:	4809      	ldr	r0, [pc, #36]	; (80029c0 <HAL_UART_MspInit+0xbc>)
 800299c:	f002 f908 	bl	8004bb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2100      	movs	r1, #0
 80029a4:	2025      	movs	r0, #37	; 0x25
 80029a6:	f001 faea 	bl	8003f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029aa:	2025      	movs	r0, #37	; 0x25
 80029ac:	f001 fb01 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029b0:	bf00      	nop
 80029b2:	3778      	adds	r7, #120	; 0x78
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40021000 	.word	0x40021000
 80029c0:	48000800 	.word	0x48000800

080029c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029c8:	e7fe      	b.n	80029c8 <NMI_Handler+0x4>

080029ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <HardFault_Handler+0x4>

080029d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <MemManage_Handler+0x4>

080029d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029da:	e7fe      	b.n	80029da <BusFault_Handler+0x4>

080029dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <UsageFault_Handler+0x4>

080029e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a10:	f000 f8f4 	bl	8002bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <DMA1_Channel1_IRQHandler+0x10>)
 8002a1e:	f001 fc4b 	bl	80042b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000098 	.word	0x20000098

08002a2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <TIM3_IRQHandler+0x10>)
 8002a32:	f003 fb65 	bl	8006100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2000015c 	.word	0x2000015c

08002a40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <TIM4_IRQHandler+0x10>)
 8002a46:	f003 fb5b 	bl	8006100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200001a8 	.word	0x200001a8

08002a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

    //wait fro the line to go idle
    if(USART1->ISR & UART_FLAG_IDLE){
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <USART1_IRQHandler+0x5c>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <USART1_IRQHandler+0x52>
        USART1->ICR |= USART_ICR_IDLECF; //clear the interrupt flag
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <USART1_IRQHandler+0x5c>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <USART1_IRQHandler+0x5c>)
 8002a6a:	f043 0310 	orr.w	r3, r3, #16
 8002a6e:	6213      	str	r3, [r2, #32]

        //signalize that the received data can be processed
        FLAG_UART_line_IDLE = 1;
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <USART1_IRQHandler+0x60>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]

        //copy the data from the buffer to the parsing buffer
        memcpy((uint8_t *)&UART_RX_Received_Message,(uint8_t *)&UART_RX_Buffer,UART_RX_Buffer_NextFreeByteIndex);
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <USART1_IRQHandler+0x64>)
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	490f      	ldr	r1, [pc, #60]	; (8002abc <USART1_IRQHandler+0x68>)
 8002a80:	480f      	ldr	r0, [pc, #60]	; (8002ac0 <USART1_IRQHandler+0x6c>)
 8002a82:	f006 fea5 	bl	80097d0 <memcpy>

        UART_RX_Received_NextFreeByteIndex = UART_RX_Buffer_NextFreeByteIndex;
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <USART1_IRQHandler+0x64>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <USART1_IRQHandler+0x70>)
 8002a8e:	801a      	strh	r2, [r3, #0]


        // set the RX buffer data to 0 and reset the position
        memset((uint8_t *)&UART_RX_Buffer,(uint8_t)0,UART_RX_Buffer_NextFreeByteIndex);
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <USART1_IRQHandler+0x64>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4808      	ldr	r0, [pc, #32]	; (8002abc <USART1_IRQHandler+0x68>)
 8002a9c:	f006 fe6c 	bl	8009778 <memset>
        UART_RX_Buffer_NextFreeByteIndex = 0;
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <USART1_IRQHandler+0x64>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]
    }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aa6:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <USART1_IRQHandler+0x74>)
 8002aa8:	f004 fd7a 	bl	80075a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	200004ba 	.word	0x200004ba
 8002ab8:	2000039c 	.word	0x2000039c
 8002abc:	20000284 	.word	0x20000284
 8002ac0:	200003a0 	.word	0x200003a0
 8002ac4:	200004b8 	.word	0x200004b8
 8002ac8:	200001f4 	.word	0x200001f4

08002acc <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <FDCAN2_IT0_IRQHandler+0x10>)
 8002ad2:	f001 fe5d 	bl	8004790 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200000f8 	.word	0x200000f8

08002ae0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <SystemInit+0x20>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <SystemInit+0x20>)
 8002aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b04:	480d      	ldr	r0, [pc, #52]	; (8002b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b08:	480d      	ldr	r0, [pc, #52]	; (8002b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b0a:	490e      	ldr	r1, [pc, #56]	; (8002b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b0c:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <LoopForever+0xe>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b10:	e002      	b.n	8002b18 <LoopCopyDataInit>

08002b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b16:	3304      	adds	r3, #4

08002b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b1c:	d3f9      	bcc.n	8002b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b20:	4c0b      	ldr	r4, [pc, #44]	; (8002b50 <LoopForever+0x16>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b24:	e001      	b.n	8002b2a <LoopFillZerobss>

08002b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b28:	3204      	adds	r2, #4

08002b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b2c:	d3fb      	bcc.n	8002b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b2e:	f7ff ffd7 	bl	8002ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b32:	f006 fe29 	bl	8009788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b36:	f7ff f9f5 	bl	8001f24 <main>

08002b3a <LoopForever>:

LoopForever:
    b LoopForever
 8002b3a:	e7fe      	b.n	8002b3a <LoopForever>
  ldr   r0, =_estack
 8002b3c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002b48:	080099cc 	.word	0x080099cc
  ldr r2, =_sbss
 8002b4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002b50:	200009b0 	.word	0x200009b0

08002b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC1_2_IRQHandler>

08002b56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b60:	2003      	movs	r0, #3
 8002b62:	f001 fa01 	bl	8003f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b66:	200f      	movs	r0, #15
 8002b68:	f000 f80e 	bl	8002b88 <HAL_InitTick>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	71fb      	strb	r3, [r7, #7]
 8002b76:	e001      	b.n	8002b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b78:	f7ff fd40 	bl	80025fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b7c:	79fb      	ldrb	r3, [r7, #7]

}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_InitTick+0x68>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d022      	beq.n	8002be2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_InitTick+0x6c>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_InitTick+0x68>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 fa0c 	bl	8003fce <HAL_SYSTICK_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10f      	bne.n	8002bdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d809      	bhi.n	8002bd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bca:	f001 f9d8 	bl	8003f7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_InitTick+0x70>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e007      	b.n	8002be6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e004      	b.n	8002be6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e001      	b.n	8002be6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000008 	.word	0x20000008
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_IncTick+0x1c>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_IncTick+0x20>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a03      	ldr	r2, [pc, #12]	; (8002c18 <HAL_IncTick+0x1c>)
 8002c0c:	6013      	str	r3, [r2, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	200009ac 	.word	0x200009ac
 8002c1c:	20000008 	.word	0x20000008

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	200009ac 	.word	0x200009ac

08002c38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3360      	adds	r3, #96	; 0x60
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <LL_ADC_SetOffset+0x44>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002cd8:	bf00      	nop
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	03fff000 	.word	0x03fff000

08002ce8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3360      	adds	r3, #96	; 0x60
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3360      	adds	r3, #96	; 0x60
 8002d24:	461a      	mov	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3360      	adds	r3, #96	; 0x60
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3360      	adds	r3, #96	; 0x60
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	615a      	str	r2, [r3, #20]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3330      	adds	r3, #48	; 0x30
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	4413      	add	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	211f      	movs	r1, #31
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	0e9b      	lsrs	r3, r3, #26
 8002e14:	f003 011f 	and.w	r1, r3, #31
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	431a      	orrs	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3314      	adds	r3, #20
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	0e5b      	lsrs	r3, r3, #25
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	4413      	add	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	0d1b      	lsrs	r3, r3, #20
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2107      	movs	r1, #7
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	401a      	ands	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	0d1b      	lsrs	r3, r3, #20
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a0f      	ldr	r2, [pc, #60]	; (8002ed8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10a      	bne.n	8002eb6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002eb4:	e00a      	b.n	8002ecc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	407f0000 	.word	0x407f0000

08002edc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6093      	str	r3, [r2, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f14:	d101      	bne.n	8002f1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <LL_ADC_IsEnabled+0x18>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <LL_ADC_IsEnabled+0x1a>
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d101      	bne.n	8002fb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d101      	bne.n	8002fdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1a1      	b.n	800334a <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fb15 	bl	8002644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff67 	bl	8002f00 <LL_ADC_IsDeepPowerDownEnabled>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d004      	beq.n	8003042 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff4d 	bl	8002edc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff82 	bl	8002f50 <LL_ADC_IsInternalRegulatorEnabled>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d115      	bne.n	800307e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff66 	bl	8002f28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800305c:	4b9a      	ldr	r3, [pc, #616]	; (80032c8 <HAL_ADC_Init+0x2dc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	4a9a      	ldr	r2, [pc, #616]	; (80032cc <HAL_ADC_Init+0x2e0>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	3301      	adds	r3, #1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003070:	e002      	b.n	8003078 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	3b01      	subs	r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f9      	bne.n	8003072 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff64 	bl	8002f50 <LL_ADC_IsInternalRegulatorEnabled>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff75 	bl	8002f9e <LL_ADC_REG_IsConversionOngoing>
 80030b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 813a 	bne.w	8003338 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 8136 	bne.w	8003338 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030d4:	f043 0202 	orr.w	r2, r3, #2
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff49 	bl	8002f78 <LL_ADC_IsEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d137      	bne.n	800315c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f4:	d004      	beq.n	8003100 <HAL_ADC_Init+0x114>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <HAL_ADC_Init+0x2e4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10f      	bne.n	8003120 <HAL_ADC_Init+0x134>
 8003100:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003104:	f7ff ff38 	bl	8002f78 <LL_ADC_IsEnabled>
 8003108:	4604      	mov	r4, r0
 800310a:	4871      	ldr	r0, [pc, #452]	; (80032d0 <HAL_ADC_Init+0x2e4>)
 800310c:	f7ff ff34 	bl	8002f78 <LL_ADC_IsEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	4323      	orrs	r3, r4
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e008      	b.n	8003132 <HAL_ADC_Init+0x146>
 8003120:	486c      	ldr	r0, [pc, #432]	; (80032d4 <HAL_ADC_Init+0x2e8>)
 8003122:	f7ff ff29 	bl	8002f78 <LL_ADC_IsEnabled>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d012      	beq.n	800315c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800313e:	d004      	beq.n	800314a <HAL_ADC_Init+0x15e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a62      	ldr	r2, [pc, #392]	; (80032d0 <HAL_ADC_Init+0x2e4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_ADC_Init+0x162>
 800314a:	4a63      	ldr	r2, [pc, #396]	; (80032d8 <HAL_ADC_Init+0x2ec>)
 800314c:	e000      	b.n	8003150 <HAL_ADC_Init+0x164>
 800314e:	4a63      	ldr	r2, [pc, #396]	; (80032dc <HAL_ADC_Init+0x2f0>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f7ff fd6e 	bl	8002c38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7f5b      	ldrb	r3, [r3, #29]
 8003160:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003166:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800316c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003172:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800317a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003186:	2b01      	cmp	r3, #1
 8003188:	d106      	bne.n	8003198 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	3b01      	subs	r3, #1
 8003190:	045b      	lsls	r3, r3, #17
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	4b49      	ldr	r3, [pc, #292]	; (80032e0 <HAL_ADC_Init+0x2f4>)
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	69b9      	ldr	r1, [r7, #24]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fedb 	bl	8002f9e <LL_ADC_REG_IsConversionOngoing>
 80031e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fee8 	bl	8002fc4 <LL_ADC_INJ_IsConversionOngoing>
 80031f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d17b      	bne.n	80032f4 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d178      	bne.n	80032f4 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003206:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800320e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800321e:	f023 0302 	bic.w	r3, r3, #2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	430b      	orrs	r3, r1
 800322a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d017      	beq.n	8003264 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003242:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800324c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003250:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6911      	ldr	r1, [r2, #16]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	430b      	orrs	r3, r1
 800325e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003262:	e013      	b.n	800328c <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003272:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003288:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003292:	2b01      	cmp	r3, #1
 8003294:	d126      	bne.n	80032e4 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032b2:	4311      	orrs	r1, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032b8:	430a      	orrs	r2, r1
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	611a      	str	r2, [r3, #16]
 80032c6:	e015      	b.n	80032f4 <HAL_ADC_Init+0x308>
 80032c8:	20000000 	.word	0x20000000
 80032cc:	053e2d63 	.word	0x053e2d63
 80032d0:	50000100 	.word	0x50000100
 80032d4:	50000400 	.word	0x50000400
 80032d8:	50000300 	.word	0x50000300
 80032dc:	50000700 	.word	0x50000700
 80032e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d10c      	bne.n	8003316 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f023 010f 	bic.w	r1, r3, #15
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	1e5a      	subs	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
 8003314:	e007      	b.n	8003326 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 020f 	bic.w	r2, r2, #15
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	65da      	str	r2, [r3, #92]	; 0x5c
 8003336:	e007      	b.n	8003348 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	f043 0210 	orr.w	r2, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003348:	7ffb      	ldrb	r3, [r7, #31]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3724      	adds	r7, #36	; 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd90      	pop	{r4, r7, pc}
 8003352:	bf00      	nop

08003354 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b0b6      	sub	sp, #216	; 0xd8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800336e:	2b01      	cmp	r3, #1
 8003370:	d102      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x24>
 8003372:	2302      	movs	r3, #2
 8003374:	f000 bc04 	b.w	8003b80 <HAL_ADC_ConfigChannel+0x82c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fe0a 	bl	8002f9e <LL_ADC_REG_IsConversionOngoing>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 83e8 	bne.w	8003b62 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f7ff fd1c 	bl	8002ddc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fdf8 	bl	8002f9e <LL_ADC_REG_IsConversionOngoing>
 80033ae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fe04 	bl	8002fc4 <LL_ADC_INJ_IsConversionOngoing>
 80033bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 81d9 	bne.w	800377c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 81d4 	bne.w	800377c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033dc:	d10f      	bne.n	80033fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	4619      	mov	r1, r3
 80033ea:	f7ff fd23 	bl	8002e34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fcdd 	bl	8002db6 <LL_ADC_SetSamplingTimeCommonConfig>
 80033fc:	e00e      	b.n	800341c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	461a      	mov	r2, r3
 800340c:	f7ff fd12 	bl	8002e34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fccd 	bl	8002db6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	08db      	lsrs	r3, r3, #3
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b04      	cmp	r3, #4
 800343c:	d022      	beq.n	8003484 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6919      	ldr	r1, [r3, #16]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800344e:	f7ff fc27 	bl	8002ca0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff fc73 	bl	8002d4a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6919      	ldr	r1, [r3, #16]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	7f1b      	ldrb	r3, [r3, #28]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <HAL_ADC_ConfigChannel+0x126>
 8003474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003478:	e000      	b.n	800347c <HAL_ADC_ConfigChannel+0x128>
 800347a:	2300      	movs	r3, #0
 800347c:	461a      	mov	r2, r3
 800347e:	f7ff fc7f 	bl	8002d80 <LL_ADC_SetOffsetSaturation>
 8003482:	e17b      	b.n	800377c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fc2c 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 8003490:	4603      	mov	r3, r0
 8003492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x15c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fc21 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 80034a6:	4603      	mov	r3, r0
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	f003 021f 	and.w	r2, r3, #31
 80034ae:	e01e      	b.n	80034ee <HAL_ADC_ConfigChannel+0x19a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fc16 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 80034bc:	4603      	mov	r3, r0
 80034be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80034de:	2320      	movs	r3, #32
 80034e0:	e004      	b.n	80034ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80034e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x1b2>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	0e9b      	lsrs	r3, r3, #26
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	e018      	b.n	8003538 <HAL_ADC_ConfigChannel+0x1e4>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800351a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800351e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800352a:	2320      	movs	r3, #32
 800352c:	e004      	b.n	8003538 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800352e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003538:	429a      	cmp	r2, r3
 800353a:	d106      	bne.n	800354a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2200      	movs	r2, #0
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fbe5 	bl	8002d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fbc9 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x222>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fbbe 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 800356c:	4603      	mov	r3, r0
 800356e:	0e9b      	lsrs	r3, r3, #26
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	e01e      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x260>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fbb3 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 8003582:	4603      	mov	r3, r0
 8003584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003594:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800359c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80035a4:	2320      	movs	r3, #32
 80035a6:	e004      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80035a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x278>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0e9b      	lsrs	r3, r3, #26
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	e018      	b.n	80035fe <HAL_ADC_ConfigChannel+0x2aa>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80035e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80035e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e004      	b.n	80035fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80035f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035fe:	429a      	cmp	r2, r3
 8003600:	d106      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2200      	movs	r2, #0
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fb82 	bl	8002d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2102      	movs	r1, #2
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fb66 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_ADC_ConfigChannel+0x2e8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2102      	movs	r1, #2
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fb5b 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 8003632:	4603      	mov	r3, r0
 8003634:	0e9b      	lsrs	r3, r3, #26
 8003636:	f003 021f 	and.w	r2, r3, #31
 800363a:	e01e      	b.n	800367a <HAL_ADC_ConfigChannel+0x326>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2102      	movs	r1, #2
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fb50 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800365a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800365e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800366a:	2320      	movs	r3, #32
 800366c:	e004      	b.n	8003678 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800366e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x33e>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0e9b      	lsrs	r3, r3, #26
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	e016      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x36c>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80036aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80036b2:	2320      	movs	r3, #32
 80036b4:	e004      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80036b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d106      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2200      	movs	r2, #0
 80036ca:	2102      	movs	r1, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fb21 	bl	8002d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2103      	movs	r1, #3
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fb05 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 80036de:	4603      	mov	r3, r0
 80036e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x3aa>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2103      	movs	r1, #3
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fafa 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 80036f4:	4603      	mov	r3, r0
 80036f6:	0e9b      	lsrs	r3, r3, #26
 80036f8:	f003 021f 	and.w	r2, r3, #31
 80036fc:	e017      	b.n	800372e <HAL_ADC_ConfigChannel+0x3da>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2103      	movs	r1, #3
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff faef 	bl	8002ce8 <LL_ADC_GetOffsetChannel>
 800370a:	4603      	mov	r3, r0
 800370c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003718:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800371a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003720:	2320      	movs	r3, #32
 8003722:	e003      	b.n	800372c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003736:	2b00      	cmp	r3, #0
 8003738:	d105      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x3f2>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	0e9b      	lsrs	r3, r3, #26
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	e011      	b.n	800376a <HAL_ADC_ConfigChannel+0x416>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003756:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800375e:	2320      	movs	r3, #32
 8003760:	e003      	b.n	800376a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	fab3 f383 	clz	r3, r3
 8003768:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800376a:	429a      	cmp	r2, r3
 800376c:	d106      	bne.n	800377c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2200      	movs	r2, #0
 8003774:	2103      	movs	r1, #3
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff facc 	bl	8002d14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fbf9 	bl	8002f78 <LL_ADC_IsEnabled>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	f040 813d 	bne.w	8003a08 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6819      	ldr	r1, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f7ff fb76 	bl	8002e8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4aa2      	ldr	r2, [pc, #648]	; (8003a30 <HAL_ADC_ConfigChannel+0x6dc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	f040 812e 	bne.w	8003a08 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x480>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0e9b      	lsrs	r3, r3, #26
 80037c2:	3301      	adds	r3, #1
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	bf94      	ite	ls
 80037cc:	2301      	movls	r3, #1
 80037ce:	2300      	movhi	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e019      	b.n	8003808 <HAL_ADC_ConfigChannel+0x4b4>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80037e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80037e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e003      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80037f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2b09      	cmp	r3, #9
 8003800:	bf94      	ite	ls
 8003802:	2301      	movls	r3, #1
 8003804:	2300      	movhi	r3, #0
 8003806:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003808:	2b00      	cmp	r3, #0
 800380a:	d079      	beq.n	8003900 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003814:	2b00      	cmp	r3, #0
 8003816:	d107      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x4d4>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	3301      	adds	r3, #1
 8003820:	069b      	lsls	r3, r3, #26
 8003822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003826:	e015      	b.n	8003854 <HAL_ADC_ConfigChannel+0x500>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003838:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800383a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e003      	b.n	800384c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	3301      	adds	r3, #1
 800384e:	069b      	lsls	r3, r3, #26
 8003850:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x520>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0e9b      	lsrs	r3, r3, #26
 8003866:	3301      	adds	r3, #1
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2101      	movs	r1, #1
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	e017      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x550>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003884:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800388c:	2320      	movs	r3, #32
 800388e:	e003      	b.n	8003898 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	2101      	movs	r1, #1
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	ea42 0103 	orr.w	r1, r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x576>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0e9b      	lsrs	r3, r3, #26
 80038ba:	3301      	adds	r3, #1
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	051b      	lsls	r3, r3, #20
 80038c8:	e018      	b.n	80038fc <HAL_ADC_ConfigChannel+0x5a8>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80038e2:	2320      	movs	r3, #32
 80038e4:	e003      	b.n	80038ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80038e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	4613      	mov	r3, r2
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4413      	add	r3, r2
 80038fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038fc:	430b      	orrs	r3, r1
 80038fe:	e07e      	b.n	80039fe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003908:	2b00      	cmp	r3, #0
 800390a:	d107      	bne.n	800391c <HAL_ADC_ConfigChannel+0x5c8>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0e9b      	lsrs	r3, r3, #26
 8003912:	3301      	adds	r3, #1
 8003914:	069b      	lsls	r3, r3, #26
 8003916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800391a:	e015      	b.n	8003948 <HAL_ADC_ConfigChannel+0x5f4>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e003      	b.n	8003940 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	069b      	lsls	r3, r3, #26
 8003944:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x614>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	0e9b      	lsrs	r3, r3, #26
 800395a:	3301      	adds	r3, #1
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2101      	movs	r1, #1
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	e017      	b.n	8003998 <HAL_ADC_ConfigChannel+0x644>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	61fb      	str	r3, [r7, #28]
  return result;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003980:	2320      	movs	r3, #32
 8003982:	e003      	b.n	800398c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	2101      	movs	r1, #1
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	ea42 0103 	orr.w	r1, r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10d      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x670>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0e9b      	lsrs	r3, r3, #26
 80039ae:	3301      	adds	r3, #1
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	4613      	mov	r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	3b1e      	subs	r3, #30
 80039bc:	051b      	lsls	r3, r3, #20
 80039be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039c2:	e01b      	b.n	80039fc <HAL_ADC_ConfigChannel+0x6a8>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	613b      	str	r3, [r7, #16]
  return result;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e003      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	f003 021f 	and.w	r2, r3, #31
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	3b1e      	subs	r3, #30
 80039f6:	051b      	lsls	r3, r3, #20
 80039f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039fc:	430b      	orrs	r3, r1
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	6892      	ldr	r2, [r2, #8]
 8003a02:	4619      	mov	r1, r3
 8003a04:	f7ff fa16 	bl	8002e34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_ADC_ConfigChannel+0x6e0>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80af 	beq.w	8003b74 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a1e:	d004      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x6d6>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_ADC_ConfigChannel+0x6e4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10a      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x6ec>
 8003a2a:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <HAL_ADC_ConfigChannel+0x6e8>)
 8003a2c:	e009      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x6ee>
 8003a2e:	bf00      	nop
 8003a30:	407f0000 	.word	0x407f0000
 8003a34:	80080000 	.word	0x80080000
 8003a38:	50000100 	.word	0x50000100
 8003a3c:	50000300 	.word	0x50000300
 8003a40:	4b51      	ldr	r3, [pc, #324]	; (8003b88 <HAL_ADC_ConfigChannel+0x834>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f91e 	bl	8002c84 <LL_ADC_GetCommonPathInternalCh>
 8003a48:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a4e      	ldr	r2, [pc, #312]	; (8003b8c <HAL_ADC_ConfigChannel+0x838>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_ADC_ConfigChannel+0x70c>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a4d      	ldr	r2, [pc, #308]	; (8003b90 <HAL_ADC_ConfigChannel+0x83c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d134      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d12e      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a74:	d17e      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a7e:	d004      	beq.n	8003a8a <HAL_ADC_ConfigChannel+0x736>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a43      	ldr	r2, [pc, #268]	; (8003b94 <HAL_ADC_ConfigChannel+0x840>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x73a>
 8003a8a:	4a43      	ldr	r2, [pc, #268]	; (8003b98 <HAL_ADC_ConfigChannel+0x844>)
 8003a8c:	e000      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x73c>
 8003a8e:	4a3e      	ldr	r2, [pc, #248]	; (8003b88 <HAL_ADC_ConfigChannel+0x834>)
 8003a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f7ff f8df 	bl	8002c5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aa0:	4b3e      	ldr	r3, [pc, #248]	; (8003b9c <HAL_ADC_ConfigChannel+0x848>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	4a3e      	ldr	r2, [pc, #248]	; (8003ba0 <HAL_ADC_ConfigChannel+0x84c>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aba:	e002      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f9      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ac8:	e054      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a35      	ldr	r2, [pc, #212]	; (8003ba4 <HAL_ADC_ConfigChannel+0x850>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d120      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x7c2>
 8003ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d11a      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae8:	d144      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af2:	d004      	beq.n	8003afe <HAL_ADC_ConfigChannel+0x7aa>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a26      	ldr	r2, [pc, #152]	; (8003b94 <HAL_ADC_ConfigChannel+0x840>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x7ae>
 8003afe:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <HAL_ADC_ConfigChannel+0x844>)
 8003b00:	e000      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x7b0>
 8003b02:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <HAL_ADC_ConfigChannel+0x834>)
 8003b04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f7ff f8a5 	bl	8002c5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b14:	e02e      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a23      	ldr	r2, [pc, #140]	; (8003ba8 <HAL_ADC_ConfigChannel+0x854>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d129      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d123      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <HAL_ADC_ConfigChannel+0x840>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01e      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b3e:	d004      	beq.n	8003b4a <HAL_ADC_ConfigChannel+0x7f6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <HAL_ADC_ConfigChannel+0x840>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x7fa>
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_ADC_ConfigChannel+0x844>)
 8003b4c:	e000      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x7fc>
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <HAL_ADC_ConfigChannel+0x834>)
 8003b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7ff f87f 	bl	8002c5e <LL_ADC_SetCommonPathInternalCh>
 8003b60:	e008      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b7c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	37d8      	adds	r7, #216	; 0xd8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	50000700 	.word	0x50000700
 8003b8c:	c3210000 	.word	0xc3210000
 8003b90:	90c00010 	.word	0x90c00010
 8003b94:	50000100 	.word	0x50000100
 8003b98:	50000300 	.word	0x50000300
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	053e2d63 	.word	0x053e2d63
 8003ba4:	c7520000 	.word	0xc7520000
 8003ba8:	cb840000 	.word	0xcb840000

08003bac <LL_ADC_IsEnabled>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <LL_ADC_IsEnabled+0x18>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <LL_ADC_IsEnabled+0x1a>
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d101      	bne.n	8003bea <LL_ADC_REG_IsConversionOngoing+0x18>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b0a1      	sub	sp, #132	; 0x84
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e0cb      	b.n	8003dae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003c22:	2300      	movs	r3, #0
 8003c24:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c2e:	d102      	bne.n	8003c36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c30:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	e001      	b.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10b      	bne.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0aa      	b.n	8003dae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ffb9 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 8003c60:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff ffb3 	bl	8003bd2 <LL_ADC_REG_IsConversionOngoing>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 808c 	bne.w	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 8088 	bne.w	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c84:	d004      	beq.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a4b      	ldr	r2, [pc, #300]	; (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003c90:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003c92:	e000      	b.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003c94:	4b4a      	ldr	r3, [pc, #296]	; (8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003c96:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d041      	beq.n	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cb2:	035b      	lsls	r3, r3, #13
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc4:	d004      	beq.n	8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3b      	ldr	r2, [pc, #236]	; (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10f      	bne.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003cd0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003cd4:	f7ff ff6a 	bl	8003bac <LL_ADC_IsEnabled>
 8003cd8:	4604      	mov	r4, r0
 8003cda:	4837      	ldr	r0, [pc, #220]	; (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003cdc:	f7ff ff66 	bl	8003bac <LL_ADC_IsEnabled>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4323      	orrs	r3, r4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e008      	b.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003cf0:	4834      	ldr	r0, [pc, #208]	; (8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003cf2:	f7ff ff5b 	bl	8003bac <LL_ADC_IsEnabled>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d04c      	beq.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d0e:	f023 030f 	bic.w	r3, r3, #15
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	6811      	ldr	r1, [r2, #0]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	6892      	ldr	r2, [r2, #8]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d20:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d22:	e03d      	b.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d38:	d004      	beq.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10f      	bne.n	8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003d44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d48:	f7ff ff30 	bl	8003bac <LL_ADC_IsEnabled>
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	481a      	ldr	r0, [pc, #104]	; (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d50:	f7ff ff2c 	bl	8003bac <LL_ADC_IsEnabled>
 8003d54:	4603      	mov	r3, r0
 8003d56:	4323      	orrs	r3, r4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e008      	b.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003d64:	4817      	ldr	r0, [pc, #92]	; (8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003d66:	f7ff ff21 	bl	8003bac <LL_ADC_IsEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d012      	beq.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d82:	f023 030f 	bic.w	r3, r3, #15
 8003d86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d8a:	e009      	b.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d9e:	e000      	b.n	8003da2 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003daa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3784      	adds	r7, #132	; 0x84
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd90      	pop	{r4, r7, pc}
 8003db6:	bf00      	nop
 8003db8:	50000100 	.word	0x50000100
 8003dbc:	50000300 	.word	0x50000300
 8003dc0:	50000700 	.word	0x50000700
 8003dc4:	50000400 	.word	0x50000400

08003dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <__NVIC_SetPriorityGrouping+0x44>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de4:	4013      	ands	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dfa:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	60d3      	str	r3, [r2, #12]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <__NVIC_GetPriorityGrouping+0x18>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	f003 0307 	and.w	r3, r3, #7
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	db0b      	blt.n	8003e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	4907      	ldr	r1, [pc, #28]	; (8003e64 <__NVIC_EnableIRQ+0x38>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	e000e100 	.word	0xe000e100

08003e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	6039      	str	r1, [r7, #0]
 8003e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	db0a      	blt.n	8003e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	490c      	ldr	r1, [pc, #48]	; (8003eb4 <__NVIC_SetPriority+0x4c>)
 8003e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e86:	0112      	lsls	r2, r2, #4
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e90:	e00a      	b.n	8003ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4908      	ldr	r1, [pc, #32]	; (8003eb8 <__NVIC_SetPriority+0x50>)
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	3b04      	subs	r3, #4
 8003ea0:	0112      	lsls	r2, r2, #4
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	761a      	strb	r2, [r3, #24]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000e100 	.word	0xe000e100
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f1c3 0307 	rsb	r3, r3, #7
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	bf28      	it	cs
 8003eda:	2304      	movcs	r3, #4
 8003edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d902      	bls.n	8003eec <NVIC_EncodePriority+0x30>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3b03      	subs	r3, #3
 8003eea:	e000      	b.n	8003eee <NVIC_EncodePriority+0x32>
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43da      	mvns	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	401a      	ands	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	43d9      	mvns	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f14:	4313      	orrs	r3, r2
         );
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3724      	adds	r7, #36	; 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f34:	d301      	bcc.n	8003f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f36:	2301      	movs	r3, #1
 8003f38:	e00f      	b.n	8003f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <SysTick_Config+0x40>)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f42:	210f      	movs	r1, #15
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f48:	f7ff ff8e 	bl	8003e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <SysTick_Config+0x40>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f52:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <SysTick_Config+0x40>)
 8003f54:	2207      	movs	r2, #7
 8003f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	e000e010 	.word	0xe000e010

08003f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ff29 	bl	8003dc8 <__NVIC_SetPriorityGrouping>
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	4603      	mov	r3, r0
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f8c:	f7ff ff40 	bl	8003e10 <__NVIC_GetPriorityGrouping>
 8003f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	6978      	ldr	r0, [r7, #20]
 8003f98:	f7ff ff90 	bl	8003ebc <NVIC_EncodePriority>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff ff5f 	bl	8003e68 <__NVIC_SetPriority>
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	4603      	mov	r3, r0
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff33 	bl	8003e2c <__NVIC_EnableIRQ>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ffa4 	bl	8003f24 <SysTick_Config>
 8003fdc:	4603      	mov	r3, r0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e08d      	b.n	8004116 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_DMA_Init+0x138>)
 8004002:	429a      	cmp	r2, r3
 8004004:	d80f      	bhi.n	8004026 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	4b45      	ldr	r3, [pc, #276]	; (8004124 <HAL_DMA_Init+0x13c>)
 800400e:	4413      	add	r3, r2
 8004010:	4a45      	ldr	r2, [pc, #276]	; (8004128 <HAL_DMA_Init+0x140>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	009a      	lsls	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a42      	ldr	r2, [pc, #264]	; (800412c <HAL_DMA_Init+0x144>)
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
 8004024:	e00e      	b.n	8004044 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	4b40      	ldr	r3, [pc, #256]	; (8004130 <HAL_DMA_Init+0x148>)
 800402e:	4413      	add	r3, r2
 8004030:	4a3d      	ldr	r2, [pc, #244]	; (8004128 <HAL_DMA_Init+0x140>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	009a      	lsls	r2, r3, #2
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a3c      	ldr	r2, [pc, #240]	; (8004134 <HAL_DMA_Init+0x14c>)
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9be 	bl	8004418 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a4:	d102      	bne.n	80040ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d010      	beq.n	80040ec <HAL_DMA_Init+0x104>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d80c      	bhi.n	80040ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f9de 	bl	8004494 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	e008      	b.n	80040fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40020407 	.word	0x40020407
 8004124:	bffdfff8 	.word	0xbffdfff8
 8004128:	cccccccd 	.word	0xcccccccd
 800412c:	40020000 	.word	0x40020000
 8004130:	bffdfbf8 	.word	0xbffdfbf8
 8004134:	40020400 	.word	0x40020400

08004138 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d005      	beq.n	800415c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2204      	movs	r2, #4
 8004154:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e037      	b.n	80041cc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 020e 	bic.w	r2, r2, #14
 800416a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2101      	movs	r1, #1
 800419a:	fa01 f202 	lsl.w	r2, r1, r2
 800419e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041a8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00c      	beq.n	80041cc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041ca:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d00d      	beq.n	800421e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2204      	movs	r2, #4
 8004206:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	e047      	b.n	80042ae <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 020e 	bic.w	r2, r2, #14
 800422c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f003 021f 	and.w	r2, r3, #31
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f202 	lsl.w	r2, r1, r2
 8004260:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800426a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00c      	beq.n	800428e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004282:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800428c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
    }
  }
  return status;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2204      	movs	r2, #4
 80042da:	409a      	lsls	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d026      	beq.n	8004332 <HAL_DMA_IRQHandler+0x7a>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d021      	beq.n	8004332 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d107      	bne.n	800430c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0204 	bic.w	r2, r2, #4
 800430a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	2104      	movs	r1, #4
 800431a:	fa01 f202 	lsl.w	r2, r1, r2
 800431e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	2b00      	cmp	r3, #0
 8004326:	d071      	beq.n	800440c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004330:	e06c      	b.n	800440c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2202      	movs	r2, #2
 800433c:	409a      	lsls	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d02e      	beq.n	80043a4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d029      	beq.n	80043a4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 020a 	bic.w	r2, r2, #10
 800436c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f003 021f 	and.w	r2, r3, #31
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	2102      	movs	r1, #2
 8004384:	fa01 f202 	lsl.w	r2, r1, r2
 8004388:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d038      	beq.n	800440c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043a2:	e033      	b.n	800440c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2208      	movs	r2, #8
 80043ae:	409a      	lsls	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d02a      	beq.n	800440e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d025      	beq.n	800440e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 020e 	bic.w	r2, r2, #14
 80043d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f003 021f 	and.w	r2, r3, #31
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2101      	movs	r1, #1
 80043e0:	fa01 f202 	lsl.w	r2, r1, r2
 80043e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800440c:	bf00      	nop
 800440e:	bf00      	nop
}
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	4b16      	ldr	r3, [pc, #88]	; (8004480 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004428:	429a      	cmp	r2, r3
 800442a:	d802      	bhi.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e001      	b.n	8004436 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004434:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	3b08      	subs	r3, #8
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	089b      	lsrs	r3, r3, #2
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004462:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2201      	movs	r2, #1
 800446c:	409a      	lsls	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40020407 	.word	0x40020407
 8004484:	40020800 	.word	0x40020800
 8004488:	40020820 	.word	0x40020820
 800448c:	cccccccd 	.word	0xcccccccd
 8004490:	40020880 	.word	0x40020880

08004494 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	461a      	mov	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044b6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2201      	movs	r2, #1
 80044c2:	409a      	lsls	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	1000823f 	.word	0x1000823f
 80044d8:	40020940 	.word	0x40020940

080044dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e147      	b.n	800477e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fe f922 	bl	800274c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0210 	bic.w	r2, r2, #16
 8004516:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004518:	f7fe fb82 	bl	8002c20 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800451e:	e012      	b.n	8004546 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004520:	f7fe fb7e 	bl	8002c20 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b0a      	cmp	r3, #10
 800452c:	d90b      	bls.n	8004546 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2203      	movs	r2, #3
 800453e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e11b      	b.n	800477e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d0e5      	beq.n	8004520 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004564:	f7fe fb5c 	bl	8002c20 <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800456a:	e012      	b.n	8004592 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800456c:	f7fe fb58 	bl	8002c20 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b0a      	cmp	r3, #10
 8004578:	d90b      	bls.n	8004592 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2203      	movs	r2, #3
 800458a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0f5      	b.n	800477e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0e5      	beq.n	800456c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0202 	orr.w	r2, r2, #2
 80045ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a74      	ldr	r2, [pc, #464]	; (8004788 <HAL_FDCAN_Init+0x2ac>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d103      	bne.n	80045c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80045ba:	4a74      	ldr	r2, [pc, #464]	; (800478c <HAL_FDCAN_Init+0x2b0>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7c1b      	ldrb	r3, [r3, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d108      	bne.n	80045dc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d8:	619a      	str	r2, [r3, #24]
 80045da:	e007      	b.n	80045ec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	7c5b      	ldrb	r3, [r3, #17]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d108      	bne.n	8004606 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004602:	619a      	str	r2, [r3, #24]
 8004604:	e007      	b.n	8004616 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004614:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7c9b      	ldrb	r3, [r3, #18]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d108      	bne.n	8004630 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800462c:	619a      	str	r2, [r3, #24]
 800462e:	e007      	b.n	8004640 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800463e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004664:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0210 	bic.w	r2, r2, #16
 8004674:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d108      	bne.n	8004690 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0204 	orr.w	r2, r2, #4
 800468c:	619a      	str	r2, [r3, #24]
 800468e:	e02c      	b.n	80046ea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d028      	beq.n	80046ea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d01c      	beq.n	80046da <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046ae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0210 	orr.w	r2, r2, #16
 80046be:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d110      	bne.n	80046ea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0220 	orr.w	r2, r2, #32
 80046d6:	619a      	str	r2, [r3, #24]
 80046d8:	e007      	b.n	80046ea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0220 	orr.w	r2, r2, #32
 80046e8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046fa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004702:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	3b01      	subs	r3, #1
 800470c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004712:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004714:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471e:	d115      	bne.n	800474c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	3b01      	subs	r3, #1
 800472c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800472e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	3b01      	subs	r3, #1
 8004736:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004738:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	3b01      	subs	r3, #1
 8004742:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004748:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800474a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f9c2 	bl	8004aec <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40006400 	.word	0x40006400
 800478c:	40006500 	.word	0x40006500

08004790 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	4013      	ands	r3, r2
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	6a3a      	ldr	r2, [r7, #32]
 80047c4:	4013      	ands	r3, r2
 80047c6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	4013      	ands	r3, r2
 80047de:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80047ea:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004802:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4013      	ands	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00d      	beq.n	800483a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d006      	beq.n	800483a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2240      	movs	r2, #64	; 0x40
 8004832:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f939 	bl	8004aac <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d014      	beq.n	8004880 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800485e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004876:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004878:	6939      	ldr	r1, [r7, #16]
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8f7 	bl	8004a6e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800488e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f8b6 	bl	8004a02 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80048a4:	6a39      	ldr	r1, [r7, #32]
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f8b6 	bl	8004a18 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80048ba:	69f9      	ldr	r1, [r7, #28]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f8b6 	bl	8004a2e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00e      	beq.n	80048ee <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8ab 	bl	8004a44 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01a      	beq.n	8004932 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004906:	2b00      	cmp	r3, #0
 8004908:	d013      	beq.n	8004932 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004912:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4013      	ands	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2280      	movs	r2, #128	; 0x80
 8004928:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800492a:	68f9      	ldr	r1, [r7, #12]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f893 	bl	8004a58 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00e      	beq.n	800495e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004956:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f893 	bl	8004a84 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00e      	beq.n	800498a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004982:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f887 	bl	8004a98 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d011      	beq.n	80049bc <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80049ca:	6979      	ldr	r1, [r7, #20]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f881 	bl	8004ad4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f863 	bl	8004ac0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80049fa:	bf00      	nop
 80049fc:	3728      	adds	r7, #40	; 0x28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004af4:	4b2c      	ldr	r3, [pc, #176]	; (8004ba8 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004af6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2b      	ldr	r2, [pc, #172]	; (8004bac <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d103      	bne.n	8004b0a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004b08:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b18:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	041a      	lsls	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3e:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	061a      	lsls	r2, r3, #24
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e005      	b.n	8004b8c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d3f3      	bcc.n	8004b80 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	4000a400 	.word	0x4000a400
 8004bac:	40006800 	.word	0x40006800

08004bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bbe:	e15a      	b.n	8004e76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 814c 	beq.w	8004e70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d005      	beq.n	8004bf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d130      	bne.n	8004c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4013      	ands	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c26:	2201      	movs	r2, #1
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4013      	ands	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	f003 0201 	and.w	r2, r3, #1
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d017      	beq.n	8004c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	2203      	movs	r2, #3
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4013      	ands	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d123      	bne.n	8004ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	08da      	lsrs	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3208      	adds	r2, #8
 8004ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	220f      	movs	r2, #15
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	08da      	lsrs	r2, r3, #3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3208      	adds	r2, #8
 8004cdc:	6939      	ldr	r1, [r7, #16]
 8004cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	2203      	movs	r2, #3
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 0203 	and.w	r2, r3, #3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 80a6 	beq.w	8004e70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d24:	4b5b      	ldr	r3, [pc, #364]	; (8004e94 <HAL_GPIO_Init+0x2e4>)
 8004d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d28:	4a5a      	ldr	r2, [pc, #360]	; (8004e94 <HAL_GPIO_Init+0x2e4>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6613      	str	r3, [r2, #96]	; 0x60
 8004d30:	4b58      	ldr	r3, [pc, #352]	; (8004e94 <HAL_GPIO_Init+0x2e4>)
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d3c:	4a56      	ldr	r2, [pc, #344]	; (8004e98 <HAL_GPIO_Init+0x2e8>)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	089b      	lsrs	r3, r3, #2
 8004d42:	3302      	adds	r3, #2
 8004d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	220f      	movs	r2, #15
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d66:	d01f      	beq.n	8004da8 <HAL_GPIO_Init+0x1f8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a4c      	ldr	r2, [pc, #304]	; (8004e9c <HAL_GPIO_Init+0x2ec>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d019      	beq.n	8004da4 <HAL_GPIO_Init+0x1f4>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a4b      	ldr	r2, [pc, #300]	; (8004ea0 <HAL_GPIO_Init+0x2f0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <HAL_GPIO_Init+0x1f0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a4a      	ldr	r2, [pc, #296]	; (8004ea4 <HAL_GPIO_Init+0x2f4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00d      	beq.n	8004d9c <HAL_GPIO_Init+0x1ec>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a49      	ldr	r2, [pc, #292]	; (8004ea8 <HAL_GPIO_Init+0x2f8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d007      	beq.n	8004d98 <HAL_GPIO_Init+0x1e8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a48      	ldr	r2, [pc, #288]	; (8004eac <HAL_GPIO_Init+0x2fc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d101      	bne.n	8004d94 <HAL_GPIO_Init+0x1e4>
 8004d90:	2305      	movs	r3, #5
 8004d92:	e00a      	b.n	8004daa <HAL_GPIO_Init+0x1fa>
 8004d94:	2306      	movs	r3, #6
 8004d96:	e008      	b.n	8004daa <HAL_GPIO_Init+0x1fa>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	e006      	b.n	8004daa <HAL_GPIO_Init+0x1fa>
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e004      	b.n	8004daa <HAL_GPIO_Init+0x1fa>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e002      	b.n	8004daa <HAL_GPIO_Init+0x1fa>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_GPIO_Init+0x1fa>
 8004da8:	2300      	movs	r3, #0
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	f002 0203 	and.w	r2, r2, #3
 8004db0:	0092      	lsls	r2, r2, #2
 8004db2:	4093      	lsls	r3, r2
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dba:	4937      	ldr	r1, [pc, #220]	; (8004e98 <HAL_GPIO_Init+0x2e8>)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dc8:	4b39      	ldr	r3, [pc, #228]	; (8004eb0 <HAL_GPIO_Init+0x300>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dec:	4a30      	ldr	r2, [pc, #192]	; (8004eb0 <HAL_GPIO_Init+0x300>)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004df2:	4b2f      	ldr	r3, [pc, #188]	; (8004eb0 <HAL_GPIO_Init+0x300>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e16:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <HAL_GPIO_Init+0x300>)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e1c:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <HAL_GPIO_Init+0x300>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e40:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_GPIO_Init+0x300>)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e46:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <HAL_GPIO_Init+0x300>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e6a:	4a11      	ldr	r2, [pc, #68]	; (8004eb0 <HAL_GPIO_Init+0x300>)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3301      	adds	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f47f ae9d 	bne.w	8004bc0 <HAL_GPIO_Init+0x10>
  }
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	48000400 	.word	0x48000400
 8004ea0:	48000800 	.word	0x48000800
 8004ea4:	48000c00 	.word	0x48000c00
 8004ea8:	48001000 	.word	0x48001000
 8004eac:	48001400 	.word	0x48001400
 8004eb0:	40010400 	.word	0x40010400

08004eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	887b      	ldrh	r3, [r7, #2]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
 8004ed0:	e001      	b.n	8004ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	807b      	strh	r3, [r7, #2]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ef4:	787b      	ldrb	r3, [r7, #1]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004efa:	887a      	ldrh	r2, [r7, #2]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f00:	e002      	b.n	8004f08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f02:	887a      	ldrh	r2, [r7, #2]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f26:	887a      	ldrh	r2, [r7, #2]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	041a      	lsls	r2, r3, #16
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	43d9      	mvns	r1, r3
 8004f32:	887b      	ldrh	r3, [r7, #2]
 8004f34:	400b      	ands	r3, r1
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	619a      	str	r2, [r3, #24]
}
 8004f3c:	bf00      	nop
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d141      	bne.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f56:	4b4b      	ldr	r3, [pc, #300]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f62:	d131      	bne.n	8004fc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f64:	4b47      	ldr	r3, [pc, #284]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6a:	4a46      	ldr	r2, [pc, #280]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f74:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f7c:	4a41      	ldr	r2, [pc, #260]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f84:	4b40      	ldr	r3, [pc, #256]	; (8005088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2232      	movs	r2, #50	; 0x32
 8004f8a:	fb02 f303 	mul.w	r3, r2, r3
 8004f8e:	4a3f      	ldr	r2, [pc, #252]	; (800508c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	0c9b      	lsrs	r3, r3, #18
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f9a:	e002      	b.n	8004fa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fa2:	4b38      	ldr	r3, [pc, #224]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fae:	d102      	bne.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f2      	bne.n	8004f9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fb6:	4b33      	ldr	r3, [pc, #204]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc2:	d158      	bne.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e057      	b.n	8005078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fc8:	4b2e      	ldr	r3, [pc, #184]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fce:	4a2d      	ldr	r2, [pc, #180]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fd8:	e04d      	b.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe0:	d141      	bne.n	8005066 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fe2:	4b28      	ldr	r3, [pc, #160]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fee:	d131      	bne.n	8005054 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ff0:	4b24      	ldr	r3, [pc, #144]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff6:	4a23      	ldr	r2, [pc, #140]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005000:	4b20      	ldr	r3, [pc, #128]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005008:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800500e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005010:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2232      	movs	r2, #50	; 0x32
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	4a1c      	ldr	r2, [pc, #112]	; (800508c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	0c9b      	lsrs	r3, r3, #18
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005026:	e002      	b.n	800502e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3b01      	subs	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800502e:	4b15      	ldr	r3, [pc, #84]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503a:	d102      	bne.n	8005042 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f2      	bne.n	8005028 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504e:	d112      	bne.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e011      	b.n	8005078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800505a:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005064:	e007      	b.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005066:	4b07      	ldr	r3, [pc, #28]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800506e:	4a05      	ldr	r2, [pc, #20]	; (8005084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005074:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40007000 	.word	0x40007000
 8005088:	20000000 	.word	0x20000000
 800508c:	431bde83 	.word	0x431bde83

08005090 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a04      	ldr	r2, [pc, #16]	; (80050ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800509a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800509e:	6093      	str	r3, [r2, #8]
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40007000 	.word	0x40007000

080050b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e306      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d075      	beq.n	80051ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ce:	4b97      	ldr	r3, [pc, #604]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
 80050d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d8:	4b94      	ldr	r3, [pc, #592]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	d102      	bne.n	80050ee <HAL_RCC_OscConfig+0x3e>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d002      	beq.n	80050f4 <HAL_RCC_OscConfig+0x44>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d10b      	bne.n	800510c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	4b8d      	ldr	r3, [pc, #564]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d05b      	beq.n	80051b8 <HAL_RCC_OscConfig+0x108>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d157      	bne.n	80051b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e2e1      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005114:	d106      	bne.n	8005124 <HAL_RCC_OscConfig+0x74>
 8005116:	4b85      	ldr	r3, [pc, #532]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a84      	ldr	r2, [pc, #528]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e01d      	b.n	8005160 <HAL_RCC_OscConfig+0xb0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0x98>
 800512e:	4b7f      	ldr	r3, [pc, #508]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a7e      	ldr	r2, [pc, #504]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b7c      	ldr	r3, [pc, #496]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a7b      	ldr	r2, [pc, #492]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0xb0>
 8005148:	4b78      	ldr	r3, [pc, #480]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a77      	ldr	r2, [pc, #476]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 800514e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b75      	ldr	r3, [pc, #468]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a74      	ldr	r2, [pc, #464]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fd fd5a 	bl	8002c20 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005170:	f7fd fd56 	bl	8002c20 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e2a6      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005182:	4b6a      	ldr	r3, [pc, #424]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0xc0>
 800518e:	e014      	b.n	80051ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fd fd46 	bl	8002c20 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005198:	f7fd fd42 	bl	8002c20 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e292      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051aa:	4b60      	ldr	r3, [pc, #384]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0xe8>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d075      	beq.n	80052b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c6:	4b59      	ldr	r3, [pc, #356]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051d0:	4b56      	ldr	r3, [pc, #344]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d102      	bne.n	80051e6 <HAL_RCC_OscConfig+0x136>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d002      	beq.n	80051ec <HAL_RCC_OscConfig+0x13c>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d11f      	bne.n	800522c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ec:	4b4f      	ldr	r3, [pc, #316]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_OscConfig+0x154>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e265      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005204:	4b49      	ldr	r3, [pc, #292]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	4946      	ldr	r1, [pc, #280]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005214:	4313      	orrs	r3, r2
 8005216:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005218:	4b45      	ldr	r3, [pc, #276]	; (8005330 <HAL_RCC_OscConfig+0x280>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f7fd fcb3 	bl	8002b88 <HAL_InitTick>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d043      	beq.n	80052b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e251      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d023      	beq.n	800527c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005234:	4b3d      	ldr	r3, [pc, #244]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a3c      	ldr	r2, [pc, #240]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 800523a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fd fcee 	bl	8002c20 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005248:	f7fd fcea 	bl	8002c20 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e23a      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800525a:	4b34      	ldr	r3, [pc, #208]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f0      	beq.n	8005248 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005266:	4b31      	ldr	r3, [pc, #196]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	061b      	lsls	r3, r3, #24
 8005274:	492d      	ldr	r1, [pc, #180]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005276:	4313      	orrs	r3, r2
 8005278:	604b      	str	r3, [r1, #4]
 800527a:	e01a      	b.n	80052b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527c:	4b2b      	ldr	r3, [pc, #172]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2a      	ldr	r2, [pc, #168]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd fcca 	bl	8002c20 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005290:	f7fd fcc6 	bl	8002c20 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e216      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052a2:	4b22      	ldr	r3, [pc, #136]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x1e0>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d041      	beq.n	8005342 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01c      	beq.n	8005300 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052c6:	4b19      	ldr	r3, [pc, #100]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80052c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052cc:	4a17      	ldr	r2, [pc, #92]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d6:	f7fd fca3 	bl	8002c20 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052de:	f7fd fc9f 	bl	8002c20 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e1ef      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052f0:	4b0e      	ldr	r3, [pc, #56]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 80052f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0ef      	beq.n	80052de <HAL_RCC_OscConfig+0x22e>
 80052fe:	e020      	b.n	8005342 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005306:	4a09      	ldr	r2, [pc, #36]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005310:	f7fd fc86 	bl	8002c20 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005316:	e00d      	b.n	8005334 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005318:	f7fd fc82 	bl	8002c20 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d906      	bls.n	8005334 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e1d2      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
 800532a:	bf00      	nop
 800532c:	40021000 	.word	0x40021000
 8005330:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005334:	4b8c      	ldr	r3, [pc, #560]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1ea      	bne.n	8005318 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 80a6 	beq.w	800549c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005350:	2300      	movs	r3, #0
 8005352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005354:	4b84      	ldr	r3, [pc, #528]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_OscConfig+0x2b4>
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x2b6>
 8005364:	2300      	movs	r3, #0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536a:	4b7f      	ldr	r3, [pc, #508]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	4a7e      	ldr	r2, [pc, #504]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005374:	6593      	str	r3, [r2, #88]	; 0x58
 8005376:	4b7c      	ldr	r3, [pc, #496]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005382:	2301      	movs	r3, #1
 8005384:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005386:	4b79      	ldr	r3, [pc, #484]	; (800556c <HAL_RCC_OscConfig+0x4bc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d118      	bne.n	80053c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005392:	4b76      	ldr	r3, [pc, #472]	; (800556c <HAL_RCC_OscConfig+0x4bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a75      	ldr	r2, [pc, #468]	; (800556c <HAL_RCC_OscConfig+0x4bc>)
 8005398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800539e:	f7fd fc3f 	bl	8002c20 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a6:	f7fd fc3b 	bl	8002c20 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e18b      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b8:	4b6c      	ldr	r3, [pc, #432]	; (800556c <HAL_RCC_OscConfig+0x4bc>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f0      	beq.n	80053a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d108      	bne.n	80053de <HAL_RCC_OscConfig+0x32e>
 80053cc:	4b66      	ldr	r3, [pc, #408]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d2:	4a65      	ldr	r2, [pc, #404]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053dc:	e024      	b.n	8005428 <HAL_RCC_OscConfig+0x378>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d110      	bne.n	8005408 <HAL_RCC_OscConfig+0x358>
 80053e6:	4b60      	ldr	r3, [pc, #384]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	4a5e      	ldr	r2, [pc, #376]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80053ee:	f043 0304 	orr.w	r3, r3, #4
 80053f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053f6:	4b5c      	ldr	r3, [pc, #368]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	4a5a      	ldr	r2, [pc, #360]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005406:	e00f      	b.n	8005428 <HAL_RCC_OscConfig+0x378>
 8005408:	4b57      	ldr	r3, [pc, #348]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	4a56      	ldr	r2, [pc, #344]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005418:	4b53      	ldr	r3, [pc, #332]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	4a52      	ldr	r2, [pc, #328]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005420:	f023 0304 	bic.w	r3, r3, #4
 8005424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d016      	beq.n	800545e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005430:	f7fd fbf6 	bl	8002c20 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005436:	e00a      	b.n	800544e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005438:	f7fd fbf2 	bl	8002c20 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	; 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e140      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544e:	4b46      	ldr	r3, [pc, #280]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0ed      	beq.n	8005438 <HAL_RCC_OscConfig+0x388>
 800545c:	e015      	b.n	800548a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fd fbdf 	bl	8002c20 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005464:	e00a      	b.n	800547c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fd fbdb 	bl	8002c20 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f241 3288 	movw	r2, #5000	; 0x1388
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e129      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800547c:	4b3a      	ldr	r3, [pc, #232]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ed      	bne.n	8005466 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800548a:	7ffb      	ldrb	r3, [r7, #31]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d105      	bne.n	800549c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005490:	4b35      	ldr	r3, [pc, #212]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005494:	4a34      	ldr	r2, [pc, #208]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800549a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d03c      	beq.n	8005522 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01c      	beq.n	80054ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054b0:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80054b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b6:	4a2c      	ldr	r2, [pc, #176]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c0:	f7fd fbae 	bl	8002c20 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054c8:	f7fd fbaa 	bl	8002c20 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0fa      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054da:	4b23      	ldr	r3, [pc, #140]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80054dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ef      	beq.n	80054c8 <HAL_RCC_OscConfig+0x418>
 80054e8:	e01b      	b.n	8005522 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054ea:	4b1f      	ldr	r3, [pc, #124]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80054ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054f0:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fa:	f7fd fb91 	bl	8002c20 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005502:	f7fd fb8d 	bl	8002c20 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e0dd      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ef      	bne.n	8005502 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80d1 	beq.w	80056ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800552c:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b0c      	cmp	r3, #12
 8005536:	f000 808b 	beq.w	8005650 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d15e      	bne.n	8005600 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a08      	ldr	r2, [pc, #32]	; (8005568 <HAL_RCC_OscConfig+0x4b8>)
 8005548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554e:	f7fd fb67 	bl	8002c20 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005554:	e00c      	b.n	8005570 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005556:	f7fd fb63 	bl	8002c20 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d905      	bls.n	8005570 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e0b3      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
 8005568:	40021000 	.word	0x40021000
 800556c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005570:	4b59      	ldr	r3, [pc, #356]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ec      	bne.n	8005556 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800557c:	4b56      	ldr	r3, [pc, #344]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	4b56      	ldr	r3, [pc, #344]	; (80056dc <HAL_RCC_OscConfig+0x62c>)
 8005582:	4013      	ands	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6a11      	ldr	r1, [r2, #32]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800558c:	3a01      	subs	r2, #1
 800558e:	0112      	lsls	r2, r2, #4
 8005590:	4311      	orrs	r1, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005596:	0212      	lsls	r2, r2, #8
 8005598:	4311      	orrs	r1, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800559e:	0852      	lsrs	r2, r2, #1
 80055a0:	3a01      	subs	r2, #1
 80055a2:	0552      	lsls	r2, r2, #21
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055aa:	0852      	lsrs	r2, r2, #1
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0652      	lsls	r2, r2, #25
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055b6:	06d2      	lsls	r2, r2, #27
 80055b8:	430a      	orrs	r2, r1
 80055ba:	4947      	ldr	r1, [pc, #284]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c0:	4b45      	ldr	r3, [pc, #276]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a44      	ldr	r2, [pc, #272]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055cc:	4b42      	ldr	r3, [pc, #264]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a41      	ldr	r2, [pc, #260]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 80055d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fd fb22 	bl	8002c20 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fd fb1e 	bl	8002c20 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e06e      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f2:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x530>
 80055fe:	e066      	b.n	80056ce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005600:	4b35      	ldr	r3, [pc, #212]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a34      	ldr	r2, [pc, #208]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 8005606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800560c:	4b32      	ldr	r3, [pc, #200]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a31      	ldr	r2, [pc, #196]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005618:	4b2f      	ldr	r3, [pc, #188]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a2e      	ldr	r2, [pc, #184]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 800561e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005626:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fd fafa 	bl	8002c20 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fd faf6 	bl	8002c20 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e046      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005642:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x580>
 800564e:	e03e      	b.n	80056ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e039      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800565c:	4b1e      	ldr	r3, [pc, #120]	; (80056d8 <HAL_RCC_OscConfig+0x628>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f003 0203 	and.w	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	429a      	cmp	r2, r3
 800566e:	d12c      	bne.n	80056ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	3b01      	subs	r3, #1
 800567c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d123      	bne.n	80056ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d11b      	bne.n	80056ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d113      	bne.n	80056ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	3b01      	subs	r3, #1
 80056b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d109      	bne.n	80056ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	3b01      	subs	r3, #1
 80056c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d001      	beq.n	80056ce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40021000 	.word	0x40021000
 80056dc:	019f800c 	.word	0x019f800c

080056e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e11e      	b.n	8005936 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056f8:	4b91      	ldr	r3, [pc, #580]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d910      	bls.n	8005728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b8e      	ldr	r3, [pc, #568]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 020f 	bic.w	r2, r3, #15
 800570e:	498c      	ldr	r1, [pc, #560]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005716:	4b8a      	ldr	r3, [pc, #552]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e106      	b.n	8005936 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d073      	beq.n	800581c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b03      	cmp	r3, #3
 800573a:	d129      	bne.n	8005790 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573c:	4b81      	ldr	r3, [pc, #516]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0f4      	b.n	8005936 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800574c:	f000 f99e 	bl	8005a8c <RCC_GetSysClockFreqFromPLLSource>
 8005750:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4a7c      	ldr	r2, [pc, #496]	; (8005948 <HAL_RCC_ClockConfig+0x268>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d93f      	bls.n	80057da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800575a:	4b7a      	ldr	r3, [pc, #488]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800576e:	2b00      	cmp	r3, #0
 8005770:	d033      	beq.n	80057da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005776:	2b00      	cmp	r3, #0
 8005778:	d12f      	bne.n	80057da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800577a:	4b72      	ldr	r3, [pc, #456]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005782:	4a70      	ldr	r2, [pc, #448]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 8005784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005788:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800578a:	2380      	movs	r3, #128	; 0x80
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e024      	b.n	80057da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d107      	bne.n	80057a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005798:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0c6      	b.n	8005936 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057a8:	4b66      	ldr	r3, [pc, #408]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0be      	b.n	8005936 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80057b8:	f000 f8ce 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4a61      	ldr	r2, [pc, #388]	; (8005948 <HAL_RCC_ClockConfig+0x268>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d909      	bls.n	80057da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057c6:	4b5f      	ldr	r3, [pc, #380]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ce:	4a5d      	ldr	r2, [pc, #372]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 80057d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80057d6:	2380      	movs	r3, #128	; 0x80
 80057d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057da:	4b5a      	ldr	r3, [pc, #360]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f023 0203 	bic.w	r2, r3, #3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4957      	ldr	r1, [pc, #348]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ec:	f7fd fa18 	bl	8002c20 <HAL_GetTick>
 80057f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f2:	e00a      	b.n	800580a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f4:	f7fd fa14 	bl	8002c20 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e095      	b.n	8005936 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580a:	4b4e      	ldr	r3, [pc, #312]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 020c 	and.w	r2, r3, #12
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	429a      	cmp	r2, r3
 800581a:	d1eb      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d023      	beq.n	8005870 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005834:	4b43      	ldr	r3, [pc, #268]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	4a42      	ldr	r2, [pc, #264]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800583a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800583e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800584c:	4b3d      	ldr	r3, [pc, #244]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005854:	4a3b      	ldr	r2, [pc, #236]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 8005856:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800585a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800585c:	4b39      	ldr	r3, [pc, #228]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4936      	ldr	r1, [pc, #216]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
 800586e:	e008      	b.n	8005882 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2b80      	cmp	r3, #128	; 0x80
 8005874:	d105      	bne.n	8005882 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005876:	4b33      	ldr	r3, [pc, #204]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	4a32      	ldr	r2, [pc, #200]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 800587c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005880:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005882:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d21d      	bcs.n	80058cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005890:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f023 020f 	bic.w	r2, r3, #15
 8005898:	4929      	ldr	r1, [pc, #164]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	4313      	orrs	r3, r2
 800589e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058a0:	f7fd f9be 	bl	8002c20 <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	e00a      	b.n	80058be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a8:	f7fd f9ba 	bl	8002c20 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e03b      	b.n	8005936 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b20      	ldr	r3, [pc, #128]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d1ed      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d8:	4b1a      	ldr	r3, [pc, #104]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4917      	ldr	r1, [pc, #92]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058f6:	4b13      	ldr	r3, [pc, #76]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	490f      	ldr	r1, [pc, #60]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800590a:	f000 f825 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 800590e:	4602      	mov	r2, r0
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	490c      	ldr	r1, [pc, #48]	; (800594c <HAL_RCC_ClockConfig+0x26c>)
 800591c:	5ccb      	ldrb	r3, [r1, r3]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <HAL_RCC_ClockConfig+0x270>)
 8005928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800592a:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <HAL_RCC_ClockConfig+0x274>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fd f92a 	bl	8002b88 <HAL_InitTick>
 8005934:	4603      	mov	r3, r0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40022000 	.word	0x40022000
 8005944:	40021000 	.word	0x40021000
 8005948:	04c4b400 	.word	0x04c4b400
 800594c:	0800997c 	.word	0x0800997c
 8005950:	20000000 	.word	0x20000000
 8005954:	20000004 	.word	0x20000004

08005958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800595e:	4b2c      	ldr	r3, [pc, #176]	; (8005a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 030c 	and.w	r3, r3, #12
 8005966:	2b04      	cmp	r3, #4
 8005968:	d102      	bne.n	8005970 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800596a:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	e047      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005970:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
 8005978:	2b08      	cmp	r3, #8
 800597a:	d102      	bne.n	8005982 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800597c:	4b26      	ldr	r3, [pc, #152]	; (8005a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	e03e      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005982:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b0c      	cmp	r3, #12
 800598c:	d136      	bne.n	80059fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800598e:	4b20      	ldr	r3, [pc, #128]	; (8005a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005998:	4b1d      	ldr	r3, [pc, #116]	; (8005a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	3301      	adds	r3, #1
 80059a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d10c      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059ac:	4a1a      	ldr	r2, [pc, #104]	; (8005a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059b6:	68d2      	ldr	r2, [r2, #12]
 80059b8:	0a12      	lsrs	r2, r2, #8
 80059ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059be:	fb02 f303 	mul.w	r3, r2, r3
 80059c2:	617b      	str	r3, [r7, #20]
      break;
 80059c4:	e00c      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059c6:	4a13      	ldr	r2, [pc, #76]	; (8005a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ce:	4a10      	ldr	r2, [pc, #64]	; (8005a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d0:	68d2      	ldr	r2, [r2, #12]
 80059d2:	0a12      	lsrs	r2, r2, #8
 80059d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059d8:	fb02 f303 	mul.w	r3, r2, r3
 80059dc:	617b      	str	r3, [r7, #20]
      break;
 80059de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	0e5b      	lsrs	r3, r3, #25
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	3301      	adds	r3, #1
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	e001      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a00:	693b      	ldr	r3, [r7, #16]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	007a1200 	.word	0x007a1200

08005a1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000000 	.word	0x20000000

08005a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a38:	f7ff fff0 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	4904      	ldr	r1, [pc, #16]	; (8005a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	0800998c 	.word	0x0800998c

08005a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a64:	f7ff ffda 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	0adb      	lsrs	r3, r3, #11
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4904      	ldr	r1, [pc, #16]	; (8005a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40021000 	.word	0x40021000
 8005a88:	0800998c 	.word	0x0800998c

08005a8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a92:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d10c      	bne.n	8005aca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ab0:	4a17      	ldr	r2, [pc, #92]	; (8005b10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab8:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aba:	68d2      	ldr	r2, [r2, #12]
 8005abc:	0a12      	lsrs	r2, r2, #8
 8005abe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	617b      	str	r3, [r7, #20]
    break;
 8005ac8:	e00c      	b.n	8005ae4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad2:	4a0e      	ldr	r2, [pc, #56]	; (8005b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ad4:	68d2      	ldr	r2, [r2, #12]
 8005ad6:	0a12      	lsrs	r2, r2, #8
 8005ad8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005adc:	fb02 f303 	mul.w	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]
    break;
 8005ae2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	0e5b      	lsrs	r3, r3, #25
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	3301      	adds	r3, #1
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005afe:	687b      	ldr	r3, [r7, #4]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	007a1200 	.word	0x007a1200
 8005b14:	00f42400 	.word	0x00f42400

08005b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b20:	2300      	movs	r3, #0
 8005b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b24:	2300      	movs	r3, #0
 8005b26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8098 	beq.w	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b36:	2300      	movs	r3, #0
 8005b38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b3a:	4b43      	ldr	r3, [pc, #268]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10d      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b46:	4b40      	ldr	r3, [pc, #256]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4a:	4a3f      	ldr	r2, [pc, #252]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b50:	6593      	str	r3, [r2, #88]	; 0x58
 8005b52:	4b3d      	ldr	r3, [pc, #244]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b62:	4b3a      	ldr	r3, [pc, #232]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a39      	ldr	r2, [pc, #228]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b6e:	f7fd f857 	bl	8002c20 <HAL_GetTick>
 8005b72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b74:	e009      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b76:	f7fd f853 	bl	8002c20 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d902      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	74fb      	strb	r3, [r7, #19]
        break;
 8005b88:	e005      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b8a:	4b30      	ldr	r3, [pc, #192]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0ef      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b96:	7cfb      	ldrb	r3, [r7, #19]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d159      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b9c:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01e      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d019      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bb8:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bc4:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bd4:	4b1c      	ldr	r3, [pc, #112]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bda:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005be4:	4a18      	ldr	r2, [pc, #96]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf6:	f7fd f813 	bl	8002c20 <HAL_GetTick>
 8005bfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bfc:	e00b      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfe:	f7fd f80f 	bl	8002c20 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d902      	bls.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	74fb      	strb	r3, [r7, #19]
            break;
 8005c14:	e006      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0ec      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c24:	7cfb      	ldrb	r3, [r7, #19]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c2a:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c38:	4903      	ldr	r1, [pc, #12]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c40:	e008      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c42:	7cfb      	ldrb	r3, [r7, #19]
 8005c44:	74bb      	strb	r3, [r7, #18]
 8005c46:	e005      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c50:	7cfb      	ldrb	r3, [r7, #19]
 8005c52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c54:	7c7b      	ldrb	r3, [r7, #17]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d105      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c5a:	4ba7      	ldr	r3, [pc, #668]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5e:	4aa6      	ldr	r2, [pc, #664]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c72:	4ba1      	ldr	r3, [pc, #644]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f023 0203 	bic.w	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	499d      	ldr	r1, [pc, #628]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c94:	4b98      	ldr	r3, [pc, #608]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9a:	f023 020c 	bic.w	r2, r3, #12
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	4995      	ldr	r1, [pc, #596]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cb6:	4b90      	ldr	r3, [pc, #576]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	498c      	ldr	r1, [pc, #560]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cd8:	4b87      	ldr	r3, [pc, #540]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	4984      	ldr	r1, [pc, #528]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0310 	and.w	r3, r3, #16
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cfa:	4b7f      	ldr	r3, [pc, #508]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	497b      	ldr	r1, [pc, #492]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d1c:	4b76      	ldr	r3, [pc, #472]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	4973      	ldr	r1, [pc, #460]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d3e:	4b6e      	ldr	r3, [pc, #440]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	496a      	ldr	r1, [pc, #424]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d60:	4b65      	ldr	r3, [pc, #404]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	4962      	ldr	r1, [pc, #392]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d82:	4b5d      	ldr	r3, [pc, #372]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	4959      	ldr	r1, [pc, #356]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005da4:	4b54      	ldr	r3, [pc, #336]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005daa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	4951      	ldr	r1, [pc, #324]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d015      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dc6:	4b4c      	ldr	r3, [pc, #304]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4948      	ldr	r1, [pc, #288]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de4:	d105      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de6:	4b44      	ldr	r3, [pc, #272]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	4a43      	ldr	r2, [pc, #268]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d015      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dfe:	4b3e      	ldr	r3, [pc, #248]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	493a      	ldr	r1, [pc, #232]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e1c:	d105      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e1e:	4b36      	ldr	r3, [pc, #216]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	4a35      	ldr	r2, [pc, #212]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e28:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d015      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e36:	4b30      	ldr	r3, [pc, #192]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e44:	492c      	ldr	r1, [pc, #176]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e54:	d105      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e56:	4b28      	ldr	r3, [pc, #160]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e60:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d015      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e6e:	4b22      	ldr	r3, [pc, #136]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	491e      	ldr	r1, [pc, #120]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e8c:	d105      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e98:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d015      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb4:	4910      	ldr	r1, [pc, #64]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec4:	d105      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	4a0b      	ldr	r2, [pc, #44]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d018      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	4902      	ldr	r1, [pc, #8]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	e001      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f02:	d105      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f04:	4b21      	ldr	r3, [pc, #132]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4a20      	ldr	r2, [pc, #128]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d015      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	4918      	ldr	r1, [pc, #96]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3a:	d105      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f3c:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	4a12      	ldr	r2, [pc, #72]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d015      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f54:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f62:	490a      	ldr	r1, [pc, #40]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f72:	d105      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f80:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000

08005f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e049      	b.n	8006036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fc fc2a 	bl	8002810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f000 fc60 	bl	8006894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e049      	b.n	80060e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f841 	bl	80060ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3304      	adds	r3, #4
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f000 fc09 	bl	8006894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b02      	cmp	r3, #2
 8006114:	d122      	bne.n	800615c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b02      	cmp	r3, #2
 8006122:	d11b      	bne.n	800615c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0202 	mvn.w	r2, #2
 800612c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fb88 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fb7a 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fb8b 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b04      	cmp	r3, #4
 8006168:	d122      	bne.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b04      	cmp	r3, #4
 8006176:	d11b      	bne.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0204 	mvn.w	r2, #4
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fb5e 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fb50 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fb61 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d122      	bne.n	8006204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d11b      	bne.n	8006204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0208 	mvn.w	r2, #8
 80061d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2204      	movs	r2, #4
 80061da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fb34 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fb26 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb37 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	2b10      	cmp	r3, #16
 8006210:	d122      	bne.n	8006258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b10      	cmp	r3, #16
 800621e:	d11b      	bne.n	8006258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0210 	mvn.w	r2, #16
 8006228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2208      	movs	r2, #8
 800622e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fb0a 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fafc 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fb0d 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b01      	cmp	r3, #1
 8006264:	d10e      	bne.n	8006284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d107      	bne.n	8006284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0201 	mvn.w	r2, #1
 800627c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fad6 	bl	8006830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628e:	2b80      	cmp	r3, #128	; 0x80
 8006290:	d10e      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629c:	2b80      	cmp	r3, #128	; 0x80
 800629e:	d107      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 ffee 	bl	800728c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062be:	d10e      	bne.n	80062de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ca:	2b80      	cmp	r3, #128	; 0x80
 80062cc:	d107      	bne.n	80062de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 ffe1 	bl	80072a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b40      	cmp	r3, #64	; 0x40
 80062ea:	d10e      	bne.n	800630a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d107      	bne.n	800630a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fabb 	bl	8006880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b20      	cmp	r3, #32
 8006316:	d10e      	bne.n	8006336 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b20      	cmp	r3, #32
 8006324:	d107      	bne.n	8006336 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f06f 0220 	mvn.w	r2, #32
 800632e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 ffa1 	bl	8007278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006344:	d10f      	bne.n	8006366 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006354:	d107      	bne.n	8006366 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800635e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 ffa7 	bl	80072b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006374:	d10f      	bne.n	8006396 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006384:	d107      	bne.n	8006396 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800638e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 ff99 	bl	80072c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063a4:	d10f      	bne.n	80063c6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063b4:	d107      	bne.n	80063c6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80063be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 ff8b 	bl	80072dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063d4:	d10f      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063e4:	d107      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80063ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 ff7d 	bl	80072f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800641a:	2302      	movs	r3, #2
 800641c:	e0ff      	b.n	800661e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b14      	cmp	r3, #20
 800642a:	f200 80f0 	bhi.w	800660e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006489 	.word	0x08006489
 8006438:	0800660f 	.word	0x0800660f
 800643c:	0800660f 	.word	0x0800660f
 8006440:	0800660f 	.word	0x0800660f
 8006444:	080064c9 	.word	0x080064c9
 8006448:	0800660f 	.word	0x0800660f
 800644c:	0800660f 	.word	0x0800660f
 8006450:	0800660f 	.word	0x0800660f
 8006454:	0800650b 	.word	0x0800650b
 8006458:	0800660f 	.word	0x0800660f
 800645c:	0800660f 	.word	0x0800660f
 8006460:	0800660f 	.word	0x0800660f
 8006464:	0800654b 	.word	0x0800654b
 8006468:	0800660f 	.word	0x0800660f
 800646c:	0800660f 	.word	0x0800660f
 8006470:	0800660f 	.word	0x0800660f
 8006474:	0800658d 	.word	0x0800658d
 8006478:	0800660f 	.word	0x0800660f
 800647c:	0800660f 	.word	0x0800660f
 8006480:	0800660f 	.word	0x0800660f
 8006484:	080065cd 	.word	0x080065cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fa9e 	bl	80069d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0208 	orr.w	r2, r2, #8
 80064a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0204 	bic.w	r2, r2, #4
 80064b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6999      	ldr	r1, [r3, #24]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	691a      	ldr	r2, [r3, #16]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	619a      	str	r2, [r3, #24]
      break;
 80064c6:	e0a5      	b.n	8006614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fb18 	bl	8006b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6999      	ldr	r1, [r3, #24]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	021a      	lsls	r2, r3, #8
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	619a      	str	r2, [r3, #24]
      break;
 8006508:	e084      	b.n	8006614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fb8b 	bl	8006c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0208 	orr.w	r2, r2, #8
 8006524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0204 	bic.w	r2, r2, #4
 8006534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69d9      	ldr	r1, [r3, #28]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	61da      	str	r2, [r3, #28]
      break;
 8006548:	e064      	b.n	8006614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fbfd 	bl	8006d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69d9      	ldr	r1, [r3, #28]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	021a      	lsls	r2, r3, #8
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	61da      	str	r2, [r3, #28]
      break;
 800658a:	e043      	b.n	8006614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fc70 	bl	8006e78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0208 	orr.w	r2, r2, #8
 80065a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0204 	bic.w	r2, r2, #4
 80065b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80065ca:	e023      	b.n	8006614 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fcba 	bl	8006f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	021a      	lsls	r2, r3, #8
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800660c:	e002      	b.n	8006614 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	75fb      	strb	r3, [r7, #23]
      break;
 8006612:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800661c:	7dfb      	ldrb	r3, [r7, #23]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop

08006628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_TIM_ConfigClockSource+0x1c>
 8006640:	2302      	movs	r3, #2
 8006642:	e0e6      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x1ea>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a67      	ldr	r2, [pc, #412]	; (800681c <HAL_TIM_ConfigClockSource+0x1f4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	f000 80b1 	beq.w	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 8006684:	4a65      	ldr	r2, [pc, #404]	; (800681c <HAL_TIM_ConfigClockSource+0x1f4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	f200 80b6 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800668c:	4a64      	ldr	r2, [pc, #400]	; (8006820 <HAL_TIM_ConfigClockSource+0x1f8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	f000 80a9 	beq.w	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 8006694:	4a62      	ldr	r2, [pc, #392]	; (8006820 <HAL_TIM_ConfigClockSource+0x1f8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	f200 80ae 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800669c:	4a61      	ldr	r2, [pc, #388]	; (8006824 <HAL_TIM_ConfigClockSource+0x1fc>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	f000 80a1 	beq.w	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 80066a4:	4a5f      	ldr	r2, [pc, #380]	; (8006824 <HAL_TIM_ConfigClockSource+0x1fc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	f200 80a6 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 80066ac:	4a5e      	ldr	r2, [pc, #376]	; (8006828 <HAL_TIM_ConfigClockSource+0x200>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	f000 8099 	beq.w	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 80066b4:	4a5c      	ldr	r2, [pc, #368]	; (8006828 <HAL_TIM_ConfigClockSource+0x200>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	f200 809e 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 80066bc:	4a5b      	ldr	r2, [pc, #364]	; (800682c <HAL_TIM_ConfigClockSource+0x204>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	f000 8091 	beq.w	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 80066c4:	4a59      	ldr	r2, [pc, #356]	; (800682c <HAL_TIM_ConfigClockSource+0x204>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	f200 8096 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 80066cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066d0:	f000 8089 	beq.w	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 80066d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066d8:	f200 808e 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 80066dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e0:	d03e      	beq.n	8006760 <HAL_TIM_ConfigClockSource+0x138>
 80066e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e6:	f200 8087 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ee:	f000 8086 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x1d6>
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f6:	d87f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 80066f8:	2b70      	cmp	r3, #112	; 0x70
 80066fa:	d01a      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x10a>
 80066fc:	2b70      	cmp	r3, #112	; 0x70
 80066fe:	d87b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 8006700:	2b60      	cmp	r3, #96	; 0x60
 8006702:	d050      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x17e>
 8006704:	2b60      	cmp	r3, #96	; 0x60
 8006706:	d877      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 8006708:	2b50      	cmp	r3, #80	; 0x50
 800670a:	d03c      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x15e>
 800670c:	2b50      	cmp	r3, #80	; 0x50
 800670e:	d873      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	d058      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x19e>
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d86f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	d064      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 800671c:	2b30      	cmp	r3, #48	; 0x30
 800671e:	d86b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 8006720:	2b20      	cmp	r3, #32
 8006722:	d060      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 8006724:	2b20      	cmp	r3, #32
 8006726:	d867      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d05c      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 800672c:	2b10      	cmp	r3, #16
 800672e:	d05a      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 8006730:	e062      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6899      	ldr	r1, [r3, #8]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f000 fceb 	bl	800711c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	609a      	str	r2, [r3, #8]
      break;
 800675e:	e04f      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	6899      	ldr	r1, [r3, #8]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f000 fcd4 	bl	800711c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006782:	609a      	str	r2, [r3, #8]
      break;
 8006784:	e03c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	461a      	mov	r2, r3
 8006794:	f000 fc46 	bl	8007024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2150      	movs	r1, #80	; 0x50
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fc9f 	bl	80070e2 <TIM_ITRx_SetConfig>
      break;
 80067a4:	e02c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 fc65 	bl	8007082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2160      	movs	r1, #96	; 0x60
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fc8f 	bl	80070e2 <TIM_ITRx_SetConfig>
      break;
 80067c4:	e01c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 fc26 	bl	8007024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2140      	movs	r1, #64	; 0x40
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fc7f 	bl	80070e2 <TIM_ITRx_SetConfig>
      break;
 80067e4:	e00c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f000 fc76 	bl	80070e2 <TIM_ITRx_SetConfig>
      break;
 80067f6:	e003      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
      break;
 80067fc:	e000      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80067fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	00100070 	.word	0x00100070
 8006820:	00100050 	.word	0x00100050
 8006824:	00100040 	.word	0x00100040
 8006828:	00100030 	.word	0x00100030
 800682c:	00100020 	.word	0x00100020

08006830 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a42      	ldr	r2, [pc, #264]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3f      	ldr	r2, [pc, #252]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3e      	ldr	r2, [pc, #248]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3d      	ldr	r2, [pc, #244]	; (80069bc <TIM_Base_SetConfig+0x128>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3c      	ldr	r2, [pc, #240]	; (80069c0 <TIM_Base_SetConfig+0x12c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d108      	bne.n	80068e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a31      	ldr	r2, [pc, #196]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d01f      	beq.n	800692e <TIM_Base_SetConfig+0x9a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f4:	d01b      	beq.n	800692e <TIM_Base_SetConfig+0x9a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2e      	ldr	r2, [pc, #184]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d017      	beq.n	800692e <TIM_Base_SetConfig+0x9a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2d      	ldr	r2, [pc, #180]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d013      	beq.n	800692e <TIM_Base_SetConfig+0x9a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2c      	ldr	r2, [pc, #176]	; (80069bc <TIM_Base_SetConfig+0x128>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00f      	beq.n	800692e <TIM_Base_SetConfig+0x9a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2c      	ldr	r2, [pc, #176]	; (80069c4 <TIM_Base_SetConfig+0x130>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00b      	beq.n	800692e <TIM_Base_SetConfig+0x9a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a2b      	ldr	r2, [pc, #172]	; (80069c8 <TIM_Base_SetConfig+0x134>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d007      	beq.n	800692e <TIM_Base_SetConfig+0x9a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a2a      	ldr	r2, [pc, #168]	; (80069cc <TIM_Base_SetConfig+0x138>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d003      	beq.n	800692e <TIM_Base_SetConfig+0x9a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a25      	ldr	r2, [pc, #148]	; (80069c0 <TIM_Base_SetConfig+0x12c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d108      	bne.n	8006940 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a12      	ldr	r2, [pc, #72]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <TIM_Base_SetConfig+0x100>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a13      	ldr	r2, [pc, #76]	; (80069bc <TIM_Base_SetConfig+0x128>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00f      	beq.n	8006994 <TIM_Base_SetConfig+0x100>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a13      	ldr	r2, [pc, #76]	; (80069c4 <TIM_Base_SetConfig+0x130>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00b      	beq.n	8006994 <TIM_Base_SetConfig+0x100>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a12      	ldr	r2, [pc, #72]	; (80069c8 <TIM_Base_SetConfig+0x134>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d007      	beq.n	8006994 <TIM_Base_SetConfig+0x100>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a11      	ldr	r2, [pc, #68]	; (80069cc <TIM_Base_SetConfig+0x138>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_Base_SetConfig+0x100>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <TIM_Base_SetConfig+0x12c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d103      	bne.n	800699c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	615a      	str	r2, [r3, #20]
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40015000 	.word	0x40015000
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800

080069d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f023 0201 	bic.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 0302 	bic.w	r3, r3, #2
 8006a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a30      	ldr	r2, [pc, #192]	; (8006aec <TIM_OC1_SetConfig+0x11c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d013      	beq.n	8006a58 <TIM_OC1_SetConfig+0x88>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a2f      	ldr	r2, [pc, #188]	; (8006af0 <TIM_OC1_SetConfig+0x120>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00f      	beq.n	8006a58 <TIM_OC1_SetConfig+0x88>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a2e      	ldr	r2, [pc, #184]	; (8006af4 <TIM_OC1_SetConfig+0x124>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00b      	beq.n	8006a58 <TIM_OC1_SetConfig+0x88>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a2d      	ldr	r2, [pc, #180]	; (8006af8 <TIM_OC1_SetConfig+0x128>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d007      	beq.n	8006a58 <TIM_OC1_SetConfig+0x88>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <TIM_OC1_SetConfig+0x12c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d003      	beq.n	8006a58 <TIM_OC1_SetConfig+0x88>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a2b      	ldr	r2, [pc, #172]	; (8006b00 <TIM_OC1_SetConfig+0x130>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d10c      	bne.n	8006a72 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0308 	bic.w	r3, r3, #8
 8006a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 0304 	bic.w	r3, r3, #4
 8006a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <TIM_OC1_SetConfig+0x11c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <TIM_OC1_SetConfig+0xd2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a1c      	ldr	r2, [pc, #112]	; (8006af0 <TIM_OC1_SetConfig+0x120>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00f      	beq.n	8006aa2 <TIM_OC1_SetConfig+0xd2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <TIM_OC1_SetConfig+0x124>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00b      	beq.n	8006aa2 <TIM_OC1_SetConfig+0xd2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <TIM_OC1_SetConfig+0x128>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d007      	beq.n	8006aa2 <TIM_OC1_SetConfig+0xd2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <TIM_OC1_SetConfig+0x12c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d003      	beq.n	8006aa2 <TIM_OC1_SetConfig+0xd2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <TIM_OC1_SetConfig+0x130>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d111      	bne.n	8006ac6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	621a      	str	r2, [r3, #32]
}
 8006ae0:	bf00      	nop
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40013400 	.word	0x40013400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40014400 	.word	0x40014400
 8006afc:	40014800 	.word	0x40014800
 8006b00:	40015000 	.word	0x40015000

08006b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	f023 0210 	bic.w	r2, r3, #16
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0320 	bic.w	r3, r3, #32
 8006b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a2c      	ldr	r2, [pc, #176]	; (8006c14 <TIM_OC2_SetConfig+0x110>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_OC2_SetConfig+0x74>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a2b      	ldr	r2, [pc, #172]	; (8006c18 <TIM_OC2_SetConfig+0x114>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_OC2_SetConfig+0x74>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <TIM_OC2_SetConfig+0x118>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d10d      	bne.n	8006b94 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a1f      	ldr	r2, [pc, #124]	; (8006c14 <TIM_OC2_SetConfig+0x110>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d013      	beq.n	8006bc4 <TIM_OC2_SetConfig+0xc0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <TIM_OC2_SetConfig+0x114>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00f      	beq.n	8006bc4 <TIM_OC2_SetConfig+0xc0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <TIM_OC2_SetConfig+0x11c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00b      	beq.n	8006bc4 <TIM_OC2_SetConfig+0xc0>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <TIM_OC2_SetConfig+0x120>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d007      	beq.n	8006bc4 <TIM_OC2_SetConfig+0xc0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <TIM_OC2_SetConfig+0x124>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_OC2_SetConfig+0xc0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a17      	ldr	r2, [pc, #92]	; (8006c1c <TIM_OC2_SetConfig+0x118>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d113      	bne.n	8006bec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40012c00 	.word	0x40012c00
 8006c18:	40013400 	.word	0x40013400
 8006c1c:	40015000 	.word	0x40015000
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800

08006c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	021b      	lsls	r3, r3, #8
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a2b      	ldr	r2, [pc, #172]	; (8006d38 <TIM_OC3_SetConfig+0x10c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d007      	beq.n	8006c9e <TIM_OC3_SetConfig+0x72>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a2a      	ldr	r2, [pc, #168]	; (8006d3c <TIM_OC3_SetConfig+0x110>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d003      	beq.n	8006c9e <TIM_OC3_SetConfig+0x72>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a29      	ldr	r2, [pc, #164]	; (8006d40 <TIM_OC3_SetConfig+0x114>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d10d      	bne.n	8006cba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a1e      	ldr	r2, [pc, #120]	; (8006d38 <TIM_OC3_SetConfig+0x10c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <TIM_OC3_SetConfig+0xbe>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a1d      	ldr	r2, [pc, #116]	; (8006d3c <TIM_OC3_SetConfig+0x110>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00f      	beq.n	8006cea <TIM_OC3_SetConfig+0xbe>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	; (8006d44 <TIM_OC3_SetConfig+0x118>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00b      	beq.n	8006cea <TIM_OC3_SetConfig+0xbe>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a1c      	ldr	r2, [pc, #112]	; (8006d48 <TIM_OC3_SetConfig+0x11c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d007      	beq.n	8006cea <TIM_OC3_SetConfig+0xbe>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <TIM_OC3_SetConfig+0x120>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d003      	beq.n	8006cea <TIM_OC3_SetConfig+0xbe>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <TIM_OC3_SetConfig+0x114>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d113      	bne.n	8006d12 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	621a      	str	r2, [r3, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40013400 	.word	0x40013400
 8006d40:	40015000 	.word	0x40015000
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40014400 	.word	0x40014400
 8006d4c:	40014800 	.word	0x40014800

08006d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	031b      	lsls	r3, r3, #12
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a2c      	ldr	r2, [pc, #176]	; (8006e60 <TIM_OC4_SetConfig+0x110>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d007      	beq.n	8006dc4 <TIM_OC4_SetConfig+0x74>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a2b      	ldr	r2, [pc, #172]	; (8006e64 <TIM_OC4_SetConfig+0x114>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d003      	beq.n	8006dc4 <TIM_OC4_SetConfig+0x74>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <TIM_OC4_SetConfig+0x118>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d10d      	bne.n	8006de0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	031b      	lsls	r3, r3, #12
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <TIM_OC4_SetConfig+0x110>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <TIM_OC4_SetConfig+0xc0>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a1e      	ldr	r2, [pc, #120]	; (8006e64 <TIM_OC4_SetConfig+0x114>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00f      	beq.n	8006e10 <TIM_OC4_SetConfig+0xc0>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a1e      	ldr	r2, [pc, #120]	; (8006e6c <TIM_OC4_SetConfig+0x11c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00b      	beq.n	8006e10 <TIM_OC4_SetConfig+0xc0>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a1d      	ldr	r2, [pc, #116]	; (8006e70 <TIM_OC4_SetConfig+0x120>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d007      	beq.n	8006e10 <TIM_OC4_SetConfig+0xc0>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <TIM_OC4_SetConfig+0x124>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_OC4_SetConfig+0xc0>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <TIM_OC4_SetConfig+0x118>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d113      	bne.n	8006e38 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	019b      	lsls	r3, r3, #6
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	019b      	lsls	r3, r3, #6
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40012c00 	.word	0x40012c00
 8006e64:	40013400 	.word	0x40013400
 8006e68:	40015000 	.word	0x40015000
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40014400 	.word	0x40014400
 8006e74:	40014800 	.word	0x40014800

08006e78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a19      	ldr	r2, [pc, #100]	; (8006f34 <TIM_OC5_SetConfig+0xbc>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d013      	beq.n	8006efa <TIM_OC5_SetConfig+0x82>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a18      	ldr	r2, [pc, #96]	; (8006f38 <TIM_OC5_SetConfig+0xc0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00f      	beq.n	8006efa <TIM_OC5_SetConfig+0x82>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a17      	ldr	r2, [pc, #92]	; (8006f3c <TIM_OC5_SetConfig+0xc4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <TIM_OC5_SetConfig+0x82>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a16      	ldr	r2, [pc, #88]	; (8006f40 <TIM_OC5_SetConfig+0xc8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d007      	beq.n	8006efa <TIM_OC5_SetConfig+0x82>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a15      	ldr	r2, [pc, #84]	; (8006f44 <TIM_OC5_SetConfig+0xcc>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_OC5_SetConfig+0x82>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <TIM_OC5_SetConfig+0xd0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d109      	bne.n	8006f0e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	621a      	str	r2, [r3, #32]
}
 8006f28:	bf00      	nop
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	40012c00 	.word	0x40012c00
 8006f38:	40013400 	.word	0x40013400
 8006f3c:	40014000 	.word	0x40014000
 8006f40:	40014400 	.word	0x40014400
 8006f44:	40014800 	.word	0x40014800
 8006f48:	40015000 	.word	0x40015000

08006f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	051b      	lsls	r3, r3, #20
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a1a      	ldr	r2, [pc, #104]	; (800700c <TIM_OC6_SetConfig+0xc0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <TIM_OC6_SetConfig+0x84>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a19      	ldr	r2, [pc, #100]	; (8007010 <TIM_OC6_SetConfig+0xc4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00f      	beq.n	8006fd0 <TIM_OC6_SetConfig+0x84>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a18      	ldr	r2, [pc, #96]	; (8007014 <TIM_OC6_SetConfig+0xc8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_OC6_SetConfig+0x84>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a17      	ldr	r2, [pc, #92]	; (8007018 <TIM_OC6_SetConfig+0xcc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_OC6_SetConfig+0x84>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a16      	ldr	r2, [pc, #88]	; (800701c <TIM_OC6_SetConfig+0xd0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_OC6_SetConfig+0x84>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a15      	ldr	r2, [pc, #84]	; (8007020 <TIM_OC6_SetConfig+0xd4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d109      	bne.n	8006fe4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	029b      	lsls	r3, r3, #10
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00
 8007010:	40013400 	.word	0x40013400
 8007014:	40014000 	.word	0x40014000
 8007018:	40014400 	.word	0x40014400
 800701c:	40014800 	.word	0x40014800
 8007020:	40015000 	.word	0x40015000

08007024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f023 0201 	bic.w	r2, r3, #1
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800704e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f023 030a 	bic.w	r3, r3, #10
 8007060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	621a      	str	r2, [r3, #32]
}
 8007076:	bf00      	nop
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007082:	b480      	push	{r7}
 8007084:	b087      	sub	sp, #28
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0210 	bic.w	r2, r3, #16
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	031b      	lsls	r3, r3, #12
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	621a      	str	r2, [r3, #32]
}
 80070d6:	bf00      	nop
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80070f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	f043 0307 	orr.w	r3, r3, #7
 8007108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007136:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	021a      	lsls	r2, r3, #8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	431a      	orrs	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4313      	orrs	r3, r2
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	609a      	str	r2, [r3, #8]
}
 8007150:	bf00      	nop
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007170:	2302      	movs	r3, #2
 8007172:	e06f      	b.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a31      	ldr	r2, [pc, #196]	; (8007260 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d009      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a30      	ldr	r2, [pc, #192]	; (8007264 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d004      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a2e      	ldr	r2, [pc, #184]	; (8007268 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d108      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d01d      	beq.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f4:	d018      	beq.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1c      	ldr	r2, [pc, #112]	; (800726c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d013      	beq.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1a      	ldr	r2, [pc, #104]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00e      	beq.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a15      	ldr	r2, [pc, #84]	; (8007264 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d009      	beq.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a16      	ldr	r2, [pc, #88]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d004      	beq.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a11      	ldr	r2, [pc, #68]	; (8007268 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d10c      	bne.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800722e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	40012c00 	.word	0x40012c00
 8007264:	40013400 	.word	0x40013400
 8007268:	40015000 	.word	0x40015000
 800726c:	40000400 	.word	0x40000400
 8007270:	40000800 	.word	0x40000800
 8007274:	40014000 	.word	0x40014000

08007278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e042      	b.n	800739c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800731c:	2b00      	cmp	r3, #0
 800731e:	d106      	bne.n	800732e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7fb faeb 	bl	8002904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2224      	movs	r2, #36	; 0x24
 8007332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0201 	bic.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fc62 	bl	8007c10 <UART_SetConfig>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e022      	b.n	800739c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 ff52 	bl	8008208 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0201 	orr.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 ffd9 	bl	800834c <UART_CheckIdleState>
 800739a:	4603      	mov	r3, r0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b091      	sub	sp, #68	; 0x44
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	f040 808c 	bne.w	80074d6 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <HAL_UART_Transmit_IT+0x26>
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e084      	b.n	80074d8 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_UART_Transmit_IT+0x38>
 80073d8:	2302      	movs	r3, #2
 80073da:	e07d      	b.n	80074d8 <HAL_UART_Transmit_IT+0x134>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2221      	movs	r2, #33	; 0x21
 800740c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007418:	d12e      	bne.n	8007478 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007422:	d107      	bne.n	8007434 <HAL_UART_Transmit_IT+0x90>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a2d      	ldr	r2, [pc, #180]	; (80074e4 <HAL_UART_Transmit_IT+0x140>)
 8007430:	675a      	str	r2, [r3, #116]	; 0x74
 8007432:	e002      	b.n	800743a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4a2c      	ldr	r2, [pc, #176]	; (80074e8 <HAL_UART_Transmit_IT+0x144>)
 8007438:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3308      	adds	r3, #8
 8007448:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007458:	63bb      	str	r3, [r7, #56]	; 0x38
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007462:	637a      	str	r2, [r7, #52]	; 0x34
 8007464:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e5      	bne.n	8007442 <HAL_UART_Transmit_IT+0x9e>
 8007476:	e02c      	b.n	80074d2 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007480:	d107      	bne.n	8007492 <HAL_UART_Transmit_IT+0xee>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d103      	bne.n	8007492 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4a17      	ldr	r2, [pc, #92]	; (80074ec <HAL_UART_Transmit_IT+0x148>)
 800748e:	675a      	str	r2, [r3, #116]	; 0x74
 8007490:	e002      	b.n	8007498 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4a16      	ldr	r2, [pc, #88]	; (80074f0 <HAL_UART_Transmit_IT+0x14c>)
 8007496:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	613b      	str	r3, [r7, #16]
   return(result);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074be:	623b      	str	r3, [r7, #32]
 80074c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	69f9      	ldr	r1, [r7, #28]
 80074c4:	6a3a      	ldr	r2, [r7, #32]
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	e000      	b.n	80074d8 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80074d6:	2302      	movs	r3, #2
  }
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3744      	adds	r7, #68	; 0x44
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	08008b1b 	.word	0x08008b1b
 80074e8:	08008a3b 	.word	0x08008a3b
 80074ec:	08008979 	.word	0x08008979
 80074f0:	080088c1 	.word	0x080088c1

080074f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007508:	2b20      	cmp	r3, #32
 800750a:	d142      	bne.n	8007592 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_UART_Receive_IT+0x24>
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e03b      	b.n	8007594 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_UART_Receive_IT+0x36>
 8007526:	2302      	movs	r3, #2
 8007528:	e034      	b.n	8007594 <HAL_UART_Receive_IT+0xa0>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a17      	ldr	r2, [pc, #92]	; (800759c <HAL_UART_Receive_IT+0xa8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d01f      	beq.n	8007582 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d018      	beq.n	8007582 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	613b      	str	r3, [r7, #16]
   return(result);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	623b      	str	r3, [r7, #32]
 8007570:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	69f9      	ldr	r1, [r7, #28]
 8007574:	6a3a      	ldr	r2, [r7, #32]
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	61bb      	str	r3, [r7, #24]
   return(result);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e6      	bne.n	8007550 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	461a      	mov	r2, r3
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 fff3 	bl	8008574 <UART_Start_Receive_IT>
 800758e:	4603      	mov	r3, r0
 8007590:	e000      	b.n	8007594 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007592:	2302      	movs	r3, #2
  }
}
 8007594:	4618      	mov	r0, r3
 8007596:	3728      	adds	r7, #40	; 0x28
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40008000 	.word	0x40008000

080075a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b0ba      	sub	sp, #232	; 0xe8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80075ce:	4013      	ands	r3, r2
 80075d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d11b      	bne.n	8007614 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d015      	beq.n	8007614 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d105      	bne.n	8007600 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d009      	beq.n	8007614 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 82d6 	beq.w	8007bb6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
      }
      return;
 8007612:	e2d0      	b.n	8007bb6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 811f 	beq.w	800785c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800761e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007622:	4b8b      	ldr	r3, [pc, #556]	; (8007850 <HAL_UART_IRQHandler+0x2b0>)
 8007624:	4013      	ands	r3, r2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800762a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800762e:	4b89      	ldr	r3, [pc, #548]	; (8007854 <HAL_UART_IRQHandler+0x2b4>)
 8007630:	4013      	ands	r3, r2
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8112 	beq.w	800785c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d011      	beq.n	8007668 <HAL_UART_IRQHandler+0xc8>
 8007644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2201      	movs	r2, #1
 8007656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800765e:	f043 0201 	orr.w	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d011      	beq.n	8007698 <HAL_UART_IRQHandler+0xf8>
 8007674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2202      	movs	r2, #2
 8007686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800768e:	f043 0204 	orr.w	r2, r3, #4
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d011      	beq.n	80076c8 <HAL_UART_IRQHandler+0x128>
 80076a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2204      	movs	r2, #4
 80076b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076be:	f043 0202 	orr.w	r2, r3, #2
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d017      	beq.n	8007704 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d105      	bne.n	80076ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076e4:	4b5a      	ldr	r3, [pc, #360]	; (8007850 <HAL_UART_IRQHandler+0x2b0>)
 80076e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2208      	movs	r2, #8
 80076f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076fa:	f043 0208 	orr.w	r2, r3, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800770c:	2b00      	cmp	r3, #0
 800770e:	d012      	beq.n	8007736 <HAL_UART_IRQHandler+0x196>
 8007710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00c      	beq.n	8007736 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800772c:	f043 0220 	orr.w	r2, r3, #32
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 823c 	beq.w	8007bba <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b00      	cmp	r3, #0
 800774c:	d013      	beq.n	8007776 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800774e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800775a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800775e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d007      	beq.n	8007776 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800777c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d005      	beq.n	800779a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800778e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007792:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04f      	beq.n	800783a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 f814 	bl	80087c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d141      	bne.n	8007832 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1d9      	bne.n	80077ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d013      	beq.n	800782a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007806:	4a14      	ldr	r2, [pc, #80]	; (8007858 <HAL_UART_IRQHandler+0x2b8>)
 8007808:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800780e:	4618      	mov	r0, r3
 8007810:	f7fc fceb 	bl	80041ea <HAL_DMA_Abort_IT>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d017      	beq.n	800784a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007828:	e00f      	b.n	800784a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f9da 	bl	8007be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007830:	e00b      	b.n	800784a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f9d6 	bl	8007be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007838:	e007      	b.n	800784a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f9d2 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007848:	e1b7      	b.n	8007bba <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784a:	bf00      	nop
    return;
 800784c:	e1b5      	b.n	8007bba <HAL_UART_IRQHandler+0x61a>
 800784e:	bf00      	nop
 8007850:	10000001 	.word	0x10000001
 8007854:	04000120 	.word	0x04000120
 8007858:	08008895 	.word	0x08008895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007860:	2b01      	cmp	r3, #1
 8007862:	f040 814a 	bne.w	8007afa <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 8143 	beq.w	8007afa <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 813c 	beq.w	8007afa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2210      	movs	r2, #16
 8007888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007894:	2b40      	cmp	r3, #64	; 0x40
 8007896:	f040 80b5 	bne.w	8007a04 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 8187 	beq.w	8007bbe <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078ba:	429a      	cmp	r2, r3
 80078bc:	f080 817f 	bcs.w	8007bbe <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f040 8086 	bne.w	80079e8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800790a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800791e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1da      	bne.n	80078dc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3308      	adds	r3, #8
 800792c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007938:	f023 0301 	bic.w	r3, r3, #1
 800793c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3308      	adds	r3, #8
 8007946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800794a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800794e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800795c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e1      	bne.n	8007926 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3308      	adds	r3, #8
 8007968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3308      	adds	r3, #8
 8007982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800798c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e3      	bne.n	8007962 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b8:	f023 0310 	bic.w	r3, r3, #16
 80079bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80079cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e4      	bne.n	80079a8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fc fba8 	bl	8004138 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f8fb 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a02:	e0dc      	b.n	8007bbe <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80ce 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007a26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80c9 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a52:	647b      	str	r3, [r7, #68]	; 0x44
 8007a54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e4      	bne.n	8007a30 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	623b      	str	r3, [r7, #32]
   return(result);
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e1      	bne.n	8007a66 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0310 	bic.w	r3, r3, #16
 8007aca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	69b9      	ldr	r1, [r7, #24]
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e4      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f880 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007af8:	e063      	b.n	8007bc2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00e      	beq.n	8007b24 <HAL_UART_IRQHandler+0x584>
 8007b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d008      	beq.n	8007b24 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 fcf9 	bl	8009514 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b22:	e051      	b.n	8007bc8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d014      	beq.n	8007b5a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d105      	bne.n	8007b48 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d03a      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
    }
    return;
 8007b58:	e035      	b.n	8007bc6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <HAL_UART_IRQHandler+0x5da>
 8007b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 f846 	bl	8008c04 <UART_EndTransmit_IT>
    return;
 8007b78:	e026      	b.n	8007bc8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_UART_IRQHandler+0x5fa>
 8007b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fcd2 	bl	800953c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b98:	e016      	b.n	8007bc8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d010      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x628>
 8007ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da0c      	bge.n	8007bc8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 fcba 	bl	8009528 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bb4:	e008      	b.n	8007bc8 <HAL_UART_IRQHandler+0x628>
      return;
 8007bb6:	bf00      	nop
 8007bb8:	e006      	b.n	8007bc8 <HAL_UART_IRQHandler+0x628>
    return;
 8007bba:	bf00      	nop
 8007bbc:	e004      	b.n	8007bc8 <HAL_UART_IRQHandler+0x628>
      return;
 8007bbe:	bf00      	nop
 8007bc0:	e002      	b.n	8007bc8 <HAL_UART_IRQHandler+0x628>
      return;
 8007bc2:	bf00      	nop
 8007bc4:	e000      	b.n	8007bc8 <HAL_UART_IRQHandler+0x628>
    return;
 8007bc6:	bf00      	nop
  }
}
 8007bc8:	37e8      	adds	r7, #232	; 0xe8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop

08007bd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c14:	b08c      	sub	sp, #48	; 0x30
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	4baa      	ldr	r3, [pc, #680]	; (8007ee8 <UART_SetConfig+0x2d8>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	6812      	ldr	r2, [r2, #0]
 8007c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a9f      	ldr	r2, [pc, #636]	; (8007eec <UART_SetConfig+0x2dc>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007c86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c90:	430b      	orrs	r3, r1
 8007c92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	f023 010f 	bic.w	r1, r3, #15
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a90      	ldr	r2, [pc, #576]	; (8007ef0 <UART_SetConfig+0x2e0>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d125      	bne.n	8007d00 <UART_SetConfig+0xf0>
 8007cb4:	4b8f      	ldr	r3, [pc, #572]	; (8007ef4 <UART_SetConfig+0x2e4>)
 8007cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d81a      	bhi.n	8007cf8 <UART_SetConfig+0xe8>
 8007cc2:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <UART_SetConfig+0xb8>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007cd9 	.word	0x08007cd9
 8007ccc:	08007ce9 	.word	0x08007ce9
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007cf1 	.word	0x08007cf1
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cde:	e116      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce6:	e112      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cee:	e10e      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf6:	e10a      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007cf8:	2310      	movs	r3, #16
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfe:	e106      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a7c      	ldr	r2, [pc, #496]	; (8007ef8 <UART_SetConfig+0x2e8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d138      	bne.n	8007d7c <UART_SetConfig+0x16c>
 8007d0a:	4b7a      	ldr	r3, [pc, #488]	; (8007ef4 <UART_SetConfig+0x2e4>)
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d10:	f003 030c 	and.w	r3, r3, #12
 8007d14:	2b0c      	cmp	r3, #12
 8007d16:	d82d      	bhi.n	8007d74 <UART_SetConfig+0x164>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x110>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d55 	.word	0x08007d55
 8007d24:	08007d75 	.word	0x08007d75
 8007d28:	08007d75 	.word	0x08007d75
 8007d2c:	08007d75 	.word	0x08007d75
 8007d30:	08007d65 	.word	0x08007d65
 8007d34:	08007d75 	.word	0x08007d75
 8007d38:	08007d75 	.word	0x08007d75
 8007d3c:	08007d75 	.word	0x08007d75
 8007d40:	08007d5d 	.word	0x08007d5d
 8007d44:	08007d75 	.word	0x08007d75
 8007d48:	08007d75 	.word	0x08007d75
 8007d4c:	08007d75 	.word	0x08007d75
 8007d50:	08007d6d 	.word	0x08007d6d
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5a:	e0d8      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d62:	e0d4      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007d64:	2304      	movs	r3, #4
 8007d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6a:	e0d0      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d72:	e0cc      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007d74:	2310      	movs	r3, #16
 8007d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7a:	e0c8      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a5e      	ldr	r2, [pc, #376]	; (8007efc <UART_SetConfig+0x2ec>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d125      	bne.n	8007dd2 <UART_SetConfig+0x1c2>
 8007d86:	4b5b      	ldr	r3, [pc, #364]	; (8007ef4 <UART_SetConfig+0x2e4>)
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d90:	2b30      	cmp	r3, #48	; 0x30
 8007d92:	d016      	beq.n	8007dc2 <UART_SetConfig+0x1b2>
 8007d94:	2b30      	cmp	r3, #48	; 0x30
 8007d96:	d818      	bhi.n	8007dca <UART_SetConfig+0x1ba>
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d00a      	beq.n	8007db2 <UART_SetConfig+0x1a2>
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d814      	bhi.n	8007dca <UART_SetConfig+0x1ba>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <UART_SetConfig+0x19a>
 8007da4:	2b10      	cmp	r3, #16
 8007da6:	d008      	beq.n	8007dba <UART_SetConfig+0x1aa>
 8007da8:	e00f      	b.n	8007dca <UART_SetConfig+0x1ba>
 8007daa:	2300      	movs	r3, #0
 8007dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007db0:	e0ad      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007db2:	2302      	movs	r3, #2
 8007db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007db8:	e0a9      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007dba:	2304      	movs	r3, #4
 8007dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc0:	e0a5      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc8:	e0a1      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007dca:	2310      	movs	r3, #16
 8007dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd0:	e09d      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a4a      	ldr	r2, [pc, #296]	; (8007f00 <UART_SetConfig+0x2f0>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d125      	bne.n	8007e28 <UART_SetConfig+0x218>
 8007ddc:	4b45      	ldr	r3, [pc, #276]	; (8007ef4 <UART_SetConfig+0x2e4>)
 8007dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007de6:	2bc0      	cmp	r3, #192	; 0xc0
 8007de8:	d016      	beq.n	8007e18 <UART_SetConfig+0x208>
 8007dea:	2bc0      	cmp	r3, #192	; 0xc0
 8007dec:	d818      	bhi.n	8007e20 <UART_SetConfig+0x210>
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	d00a      	beq.n	8007e08 <UART_SetConfig+0x1f8>
 8007df2:	2b80      	cmp	r3, #128	; 0x80
 8007df4:	d814      	bhi.n	8007e20 <UART_SetConfig+0x210>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <UART_SetConfig+0x1f0>
 8007dfa:	2b40      	cmp	r3, #64	; 0x40
 8007dfc:	d008      	beq.n	8007e10 <UART_SetConfig+0x200>
 8007dfe:	e00f      	b.n	8007e20 <UART_SetConfig+0x210>
 8007e00:	2300      	movs	r3, #0
 8007e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e06:	e082      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e0e:	e07e      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e10:	2304      	movs	r3, #4
 8007e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e16:	e07a      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e18:	2308      	movs	r3, #8
 8007e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e1e:	e076      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e20:	2310      	movs	r3, #16
 8007e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e26:	e072      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a35      	ldr	r2, [pc, #212]	; (8007f04 <UART_SetConfig+0x2f4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d12a      	bne.n	8007e88 <UART_SetConfig+0x278>
 8007e32:	4b30      	ldr	r3, [pc, #192]	; (8007ef4 <UART_SetConfig+0x2e4>)
 8007e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e40:	d01a      	beq.n	8007e78 <UART_SetConfig+0x268>
 8007e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e46:	d81b      	bhi.n	8007e80 <UART_SetConfig+0x270>
 8007e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4c:	d00c      	beq.n	8007e68 <UART_SetConfig+0x258>
 8007e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e52:	d815      	bhi.n	8007e80 <UART_SetConfig+0x270>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <UART_SetConfig+0x250>
 8007e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e5c:	d008      	beq.n	8007e70 <UART_SetConfig+0x260>
 8007e5e:	e00f      	b.n	8007e80 <UART_SetConfig+0x270>
 8007e60:	2300      	movs	r3, #0
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e66:	e052      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e6e:	e04e      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e70:	2304      	movs	r3, #4
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e76:	e04a      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e78:	2308      	movs	r3, #8
 8007e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e7e:	e046      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e80:	2310      	movs	r3, #16
 8007e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e86:	e042      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a17      	ldr	r2, [pc, #92]	; (8007eec <UART_SetConfig+0x2dc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d13a      	bne.n	8007f08 <UART_SetConfig+0x2f8>
 8007e92:	4b18      	ldr	r3, [pc, #96]	; (8007ef4 <UART_SetConfig+0x2e4>)
 8007e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ea0:	d01a      	beq.n	8007ed8 <UART_SetConfig+0x2c8>
 8007ea2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ea6:	d81b      	bhi.n	8007ee0 <UART_SetConfig+0x2d0>
 8007ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eac:	d00c      	beq.n	8007ec8 <UART_SetConfig+0x2b8>
 8007eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eb2:	d815      	bhi.n	8007ee0 <UART_SetConfig+0x2d0>
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <UART_SetConfig+0x2b0>
 8007eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ebc:	d008      	beq.n	8007ed0 <UART_SetConfig+0x2c0>
 8007ebe:	e00f      	b.n	8007ee0 <UART_SetConfig+0x2d0>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ec6:	e022      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ece:	e01e      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007ed0:	2304      	movs	r3, #4
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ed6:	e01a      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ede:	e016      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ee6:	e012      	b.n	8007f0e <UART_SetConfig+0x2fe>
 8007ee8:	cfff69f3 	.word	0xcfff69f3
 8007eec:	40008000 	.word	0x40008000
 8007ef0:	40013800 	.word	0x40013800
 8007ef4:	40021000 	.word	0x40021000
 8007ef8:	40004400 	.word	0x40004400
 8007efc:	40004800 	.word	0x40004800
 8007f00:	40004c00 	.word	0x40004c00
 8007f04:	40005000 	.word	0x40005000
 8007f08:	2310      	movs	r3, #16
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4aae      	ldr	r2, [pc, #696]	; (80081cc <UART_SetConfig+0x5bc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	f040 8097 	bne.w	8008048 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d823      	bhi.n	8007f6a <UART_SetConfig+0x35a>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <UART_SetConfig+0x318>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f6b 	.word	0x08007f6b
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f6b 	.word	0x08007f6b
 8007f38:	08007f5b 	.word	0x08007f5b
 8007f3c:	08007f6b 	.word	0x08007f6b
 8007f40:	08007f6b 	.word	0x08007f6b
 8007f44:	08007f6b 	.word	0x08007f6b
 8007f48:	08007f63 	.word	0x08007f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f4c:	f7fd fd72 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8007f50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f52:	e010      	b.n	8007f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f54:	4b9e      	ldr	r3, [pc, #632]	; (80081d0 <UART_SetConfig+0x5c0>)
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f58:	e00d      	b.n	8007f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f5a:	f7fd fcfd 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 8007f5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f60:	e009      	b.n	8007f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f68:	e005      	b.n	8007f76 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8130 	beq.w	80081de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	4a94      	ldr	r2, [pc, #592]	; (80081d4 <UART_SetConfig+0x5c4>)
 8007f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	4413      	add	r3, r2
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d305      	bcc.n	8007fae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d903      	bls.n	8007fb6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007fb4:	e113      	b.n	80081de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	2200      	movs	r2, #0
 8007fba:	60bb      	str	r3, [r7, #8]
 8007fbc:	60fa      	str	r2, [r7, #12]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	4a84      	ldr	r2, [pc, #528]	; (80081d4 <UART_SetConfig+0x5c4>)
 8007fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2200      	movs	r2, #0
 8007fcc:	603b      	str	r3, [r7, #0]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fd8:	f7f8 f91e 	bl	8000218 <__aeabi_uldivmod>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	f04f 0300 	mov.w	r3, #0
 8007fec:	020b      	lsls	r3, r1, #8
 8007fee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ff2:	0202      	lsls	r2, r0, #8
 8007ff4:	6979      	ldr	r1, [r7, #20]
 8007ff6:	6849      	ldr	r1, [r1, #4]
 8007ff8:	0849      	lsrs	r1, r1, #1
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	4605      	mov	r5, r0
 8008000:	eb12 0804 	adds.w	r8, r2, r4
 8008004:	eb43 0905 	adc.w	r9, r3, r5
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	469a      	mov	sl, r3
 8008010:	4693      	mov	fp, r2
 8008012:	4652      	mov	r2, sl
 8008014:	465b      	mov	r3, fp
 8008016:	4640      	mov	r0, r8
 8008018:	4649      	mov	r1, r9
 800801a:	f7f8 f8fd 	bl	8000218 <__aeabi_uldivmod>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4613      	mov	r3, r2
 8008024:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800802c:	d308      	bcc.n	8008040 <UART_SetConfig+0x430>
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008034:	d204      	bcs.n	8008040 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6a3a      	ldr	r2, [r7, #32]
 800803c:	60da      	str	r2, [r3, #12]
 800803e:	e0ce      	b.n	80081de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008046:	e0ca      	b.n	80081de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008050:	d166      	bne.n	8008120 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008056:	2b08      	cmp	r3, #8
 8008058:	d827      	bhi.n	80080aa <UART_SetConfig+0x49a>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <UART_SetConfig+0x450>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008085 	.word	0x08008085
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008095 	.word	0x08008095
 800806c:	080080ab 	.word	0x080080ab
 8008070:	0800809b 	.word	0x0800809b
 8008074:	080080ab 	.word	0x080080ab
 8008078:	080080ab 	.word	0x080080ab
 800807c:	080080ab 	.word	0x080080ab
 8008080:	080080a3 	.word	0x080080a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008084:	f7fd fcd6 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8008088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800808a:	e014      	b.n	80080b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800808c:	f7fd fce8 	bl	8005a60 <HAL_RCC_GetPCLK2Freq>
 8008090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008092:	e010      	b.n	80080b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008094:	4b4e      	ldr	r3, [pc, #312]	; (80081d0 <UART_SetConfig+0x5c0>)
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008098:	e00d      	b.n	80080b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800809a:	f7fd fc5d 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 800809e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080a0:	e009      	b.n	80080b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080a8:	e005      	b.n	80080b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 8090 	beq.w	80081de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	4a44      	ldr	r2, [pc, #272]	; (80081d4 <UART_SetConfig+0x5c4>)
 80080c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80080d0:	005a      	lsls	r2, r3, #1
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	085b      	lsrs	r3, r3, #1
 80080d8:	441a      	add	r2, r3
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	2b0f      	cmp	r3, #15
 80080e8:	d916      	bls.n	8008118 <UART_SetConfig+0x508>
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f0:	d212      	bcs.n	8008118 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f023 030f 	bic.w	r3, r3, #15
 80080fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	085b      	lsrs	r3, r3, #1
 8008100:	b29b      	uxth	r3, r3
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	b29a      	uxth	r2, r3
 8008108:	8bfb      	ldrh	r3, [r7, #30]
 800810a:	4313      	orrs	r3, r2
 800810c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	8bfa      	ldrh	r2, [r7, #30]
 8008114:	60da      	str	r2, [r3, #12]
 8008116:	e062      	b.n	80081de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800811e:	e05e      	b.n	80081de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008124:	2b08      	cmp	r3, #8
 8008126:	d828      	bhi.n	800817a <UART_SetConfig+0x56a>
 8008128:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <UART_SetConfig+0x520>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008155 	.word	0x08008155
 8008134:	0800815d 	.word	0x0800815d
 8008138:	08008165 	.word	0x08008165
 800813c:	0800817b 	.word	0x0800817b
 8008140:	0800816b 	.word	0x0800816b
 8008144:	0800817b 	.word	0x0800817b
 8008148:	0800817b 	.word	0x0800817b
 800814c:	0800817b 	.word	0x0800817b
 8008150:	08008173 	.word	0x08008173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008154:	f7fd fc6e 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8008158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800815a:	e014      	b.n	8008186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800815c:	f7fd fc80 	bl	8005a60 <HAL_RCC_GetPCLK2Freq>
 8008160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008162:	e010      	b.n	8008186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008164:	4b1a      	ldr	r3, [pc, #104]	; (80081d0 <UART_SetConfig+0x5c0>)
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008168:	e00d      	b.n	8008186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800816a:	f7fd fbf5 	bl	8005958 <HAL_RCC_GetSysClockFreq>
 800816e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008170:	e009      	b.n	8008186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008178:	e005      	b.n	8008186 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008184:	bf00      	nop
    }

    if (pclk != 0U)
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	2b00      	cmp	r3, #0
 800818a:	d028      	beq.n	80081de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	4a10      	ldr	r2, [pc, #64]	; (80081d4 <UART_SetConfig+0x5c4>)
 8008192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008196:	461a      	mov	r2, r3
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	fbb3 f2f2 	udiv	r2, r3, r2
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	441a      	add	r2, r3
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	2b0f      	cmp	r3, #15
 80081b4:	d910      	bls.n	80081d8 <UART_SetConfig+0x5c8>
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081bc:	d20c      	bcs.n	80081d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	60da      	str	r2, [r3, #12]
 80081c8:	e009      	b.n	80081de <UART_SetConfig+0x5ce>
 80081ca:	bf00      	nop
 80081cc:	40008000 	.word	0x40008000
 80081d0:	00f42400 	.word	0x00f42400
 80081d4:	08009994 	.word	0x08009994
      }
      else
      {
        ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2200      	movs	r2, #0
 80081f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2200      	movs	r2, #0
 80081f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80081fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3730      	adds	r7, #48	; 0x30
 8008202:	46bd      	mov	sp, r7
 8008204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00a      	beq.n	8008276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	f003 0308 	and.w	r3, r3, #8
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	f003 0310 	and.w	r3, r3, #16
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00a      	beq.n	80082ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	f003 0320 	and.w	r3, r3, #32
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01a      	beq.n	800831e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008306:	d10a      	bne.n	800831e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	605a      	str	r2, [r3, #4]
  }
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af02      	add	r7, sp, #8
 8008352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800835c:	f7fa fc60 	bl	8002c20 <HAL_GetTick>
 8008360:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b08      	cmp	r3, #8
 800836e:	d10e      	bne.n	800838e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f82f 	bl	80083e2 <UART_WaitOnFlagUntilTimeout>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e025      	b.n	80083da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b04      	cmp	r3, #4
 800839a:	d10e      	bne.n	80083ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800839c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f819 	bl	80083e2 <UART_WaitOnFlagUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e00f      	b.n	80083da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b09c      	sub	sp, #112	; 0x70
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	603b      	str	r3, [r7, #0]
 80083ee:	4613      	mov	r3, r2
 80083f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083f2:	e0a9      	b.n	8008548 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083fa:	f000 80a5 	beq.w	8008548 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fe:	f7fa fc0f 	bl	8002c20 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800840a:	429a      	cmp	r2, r3
 800840c:	d302      	bcc.n	8008414 <UART_WaitOnFlagUntilTimeout+0x32>
 800840e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008410:	2b00      	cmp	r3, #0
 8008412:	d140      	bne.n	8008496 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008428:	667b      	str	r3, [r7, #100]	; 0x64
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008434:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e6      	bne.n	8008414 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3308      	adds	r3, #8
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	f023 0301 	bic.w	r3, r3, #1
 800845c:	663b      	str	r3, [r7, #96]	; 0x60
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3308      	adds	r3, #8
 8008464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008466:	64ba      	str	r2, [r7, #72]	; 0x48
 8008468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800846c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e5      	bne.n	8008446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2220      	movs	r2, #32
 800847e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2220      	movs	r2, #32
 8008486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e069      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d051      	beq.n	8008548 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084b2:	d149      	bne.n	8008548 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
 80084de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e6      	bne.n	80084be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	66bb      	str	r3, [r7, #104]	; 0x68
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008510:	623a      	str	r2, [r7, #32]
 8008512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	69f9      	ldr	r1, [r7, #28]
 8008516:	6a3a      	ldr	r2, [r7, #32]
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	61bb      	str	r3, [r7, #24]
   return(result);
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e5      	bne.n	80084f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2220      	movs	r2, #32
 8008528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2220      	movs	r2, #32
 8008530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2220      	movs	r2, #32
 8008538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e010      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	69da      	ldr	r2, [r3, #28]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	4013      	ands	r3, r2
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	429a      	cmp	r2, r3
 8008556:	bf0c      	ite	eq
 8008558:	2301      	moveq	r3, #1
 800855a:	2300      	movne	r3, #0
 800855c:	b2db      	uxtb	r3, r3
 800855e:	461a      	mov	r2, r3
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	429a      	cmp	r2, r3
 8008564:	f43f af46 	beq.w	80083f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3770      	adds	r7, #112	; 0x70
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008574:	b480      	push	{r7}
 8008576:	b0a3      	sub	sp, #140	; 0x8c
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	88fa      	ldrh	r2, [r7, #6]
 800858c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	88fa      	ldrh	r2, [r7, #6]
 8008594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a6:	d10e      	bne.n	80085c6 <UART_Start_Receive_IT+0x52>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d105      	bne.n	80085bc <UART_Start_Receive_IT+0x48>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80085b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085ba:	e02d      	b.n	8008618 <UART_Start_Receive_IT+0xa4>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	22ff      	movs	r2, #255	; 0xff
 80085c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085c4:	e028      	b.n	8008618 <UART_Start_Receive_IT+0xa4>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10d      	bne.n	80085ea <UART_Start_Receive_IT+0x76>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d104      	bne.n	80085e0 <UART_Start_Receive_IT+0x6c>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	22ff      	movs	r2, #255	; 0xff
 80085da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085de:	e01b      	b.n	8008618 <UART_Start_Receive_IT+0xa4>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	227f      	movs	r2, #127	; 0x7f
 80085e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085e8:	e016      	b.n	8008618 <UART_Start_Receive_IT+0xa4>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085f2:	d10d      	bne.n	8008610 <UART_Start_Receive_IT+0x9c>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <UART_Start_Receive_IT+0x92>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	227f      	movs	r2, #127	; 0x7f
 8008600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008604:	e008      	b.n	8008618 <UART_Start_Receive_IT+0xa4>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	223f      	movs	r2, #63	; 0x3f
 800860a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800860e:	e003      	b.n	8008618 <UART_Start_Receive_IT+0xa4>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2222      	movs	r2, #34	; 0x22
 8008624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3308      	adds	r3, #8
 800862e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800863a:	f043 0301 	orr.w	r3, r3, #1
 800863e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800864c:	673a      	str	r2, [r7, #112]	; 0x70
 800864e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008652:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800865a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e3      	bne.n	8008628 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008668:	d153      	bne.n	8008712 <UART_Start_Receive_IT+0x19e>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008670:	88fa      	ldrh	r2, [r7, #6]
 8008672:	429a      	cmp	r2, r3
 8008674:	d34d      	bcc.n	8008712 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867e:	d107      	bne.n	8008690 <UART_Start_Receive_IT+0x11c>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4a4b      	ldr	r2, [pc, #300]	; (80087b8 <UART_Start_Receive_IT+0x244>)
 800868c:	671a      	str	r2, [r3, #112]	; 0x70
 800868e:	e002      	b.n	8008696 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a4a      	ldr	r2, [pc, #296]	; (80087bc <UART_Start_Receive_IT+0x248>)
 8008694:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d01a      	beq.n	80086dc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ae:	e853 3f00 	ldrex	r3, [r3]
 80086b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086ca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e4      	bne.n	80086a6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3308      	adds	r3, #8
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3308      	adds	r3, #8
 80086fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80086fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80086fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008704:	e841 2300 	strex	r3, r2, [r1]
 8008708:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800870a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e5      	bne.n	80086dc <UART_Start_Receive_IT+0x168>
 8008710:	e04a      	b.n	80087a8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800871a:	d107      	bne.n	800872c <UART_Start_Receive_IT+0x1b8>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d103      	bne.n	800872c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4a26      	ldr	r2, [pc, #152]	; (80087c0 <UART_Start_Receive_IT+0x24c>)
 8008728:	671a      	str	r2, [r3, #112]	; 0x70
 800872a:	e002      	b.n	8008732 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4a25      	ldr	r2, [pc, #148]	; (80087c4 <UART_Start_Receive_IT+0x250>)
 8008730:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d019      	beq.n	8008776 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008756:	677b      	str	r3, [r7, #116]	; 0x74
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008760:	637b      	str	r3, [r7, #52]	; 0x34
 8008762:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e6      	bne.n	8008742 <UART_Start_Receive_IT+0x1ce>
 8008774:	e018      	b.n	80087a8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	613b      	str	r3, [r7, #16]
   return(result);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f043 0320 	orr.w	r3, r3, #32
 800878a:	67bb      	str	r3, [r7, #120]	; 0x78
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008794:	623b      	str	r3, [r7, #32]
 8008796:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69f9      	ldr	r1, [r7, #28]
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	378c      	adds	r7, #140	; 0x8c
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	08009215 	.word	0x08009215
 80087bc:	08008f1d 	.word	0x08008f1d
 80087c0:	08008dbb 	.word	0x08008dbb
 80087c4:	08008c5b 	.word	0x08008c5b

080087c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b095      	sub	sp, #84	; 0x54
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ee:	643b      	str	r3, [r7, #64]	; 0x40
 80087f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e6      	bne.n	80087d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3308      	adds	r3, #8
 8008808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	61fb      	str	r3, [r7, #28]
   return(result);
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008818:	f023 0301 	bic.w	r3, r3, #1
 800881c:	64bb      	str	r3, [r7, #72]	; 0x48
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3308      	adds	r3, #8
 8008824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008828:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800882c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e3      	bne.n	8008802 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800883e:	2b01      	cmp	r3, #1
 8008840:	d118      	bne.n	8008874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	f023 0310 	bic.w	r3, r3, #16
 8008856:	647b      	str	r3, [r7, #68]	; 0x44
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	461a      	mov	r2, r3
 800885e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6979      	ldr	r1, [r7, #20]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	613b      	str	r3, [r7, #16]
   return(result);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e6      	bne.n	8008842 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008888:	bf00      	nop
 800888a:	3754      	adds	r7, #84	; 0x54
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff f996 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b08f      	sub	sp, #60	; 0x3c
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ce:	2b21      	cmp	r3, #33	; 0x21
 80088d0:	d14c      	bne.n	800896c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d132      	bne.n	8008944 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	e853 3f00 	ldrex	r3, [r3]
 80088ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008904:	e841 2300 	strex	r3, r2, [r1]
 8008908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e6      	bne.n	80088de <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	60bb      	str	r3, [r7, #8]
   return(result);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008924:	633b      	str	r3, [r7, #48]	; 0x30
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	61bb      	str	r3, [r7, #24]
 8008930:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6979      	ldr	r1, [r7, #20]
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	613b      	str	r3, [r7, #16]
   return(result);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e6      	bne.n	8008910 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008942:	e013      	b.n	800896c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008948:	781a      	ldrb	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008960:	b29b      	uxth	r3, r3
 8008962:	3b01      	subs	r3, #1
 8008964:	b29a      	uxth	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800896c:	bf00      	nop
 800896e:	373c      	adds	r7, #60	; 0x3c
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b091      	sub	sp, #68	; 0x44
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008986:	2b21      	cmp	r3, #33	; 0x21
 8008988:	d151      	bne.n	8008a2e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008990:	b29b      	uxth	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d132      	bne.n	80089fc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	623b      	str	r3, [r7, #32]
   return(result);
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	633b      	str	r3, [r7, #48]	; 0x30
 80089b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e6      	bne.n	8008996 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089dc:	637b      	str	r3, [r7, #52]	; 0x34
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e6:	61fb      	str	r3, [r7, #28]
 80089e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	69b9      	ldr	r1, [r7, #24]
 80089ec:	69fa      	ldr	r2, [r7, #28]
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	617b      	str	r3, [r7, #20]
   return(result);
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e6      	bne.n	80089c8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80089fa:	e018      	b.n	8008a2e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a10:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a16:	1c9a      	adds	r2, r3, #2
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	3b01      	subs	r3, #1
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008a2e:	bf00      	nop
 8008a30:	3744      	adds	r7, #68	; 0x44
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b091      	sub	sp, #68	; 0x44
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a48:	2b21      	cmp	r3, #33	; 0x21
 8008a4a:	d160      	bne.n	8008b0e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a52:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008a54:	e057      	b.n	8008b06 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d133      	bne.n	8008aca <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3308      	adds	r3, #8
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	623b      	str	r3, [r7, #32]
   return(result);
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a82:	633a      	str	r2, [r7, #48]	; 0x30
 8008a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e5      	bne.n	8008a62 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	61fb      	str	r3, [r7, #28]
 8008ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	69b9      	ldr	r1, [r7, #24]
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	e841 2300 	strex	r3, r2, [r1]
 8008ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e6      	bne.n	8008a96 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008ac8:	e021      	b.n	8008b0e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d013      	beq.n	8008b00 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008adc:	781a      	ldrb	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008b02:	3b01      	subs	r3, #1
 8008b04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008b06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1a4      	bne.n	8008a56 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008b0c:	e7ff      	b.n	8008b0e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008b0e:	bf00      	nop
 8008b10:	3744      	adds	r7, #68	; 0x44
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b091      	sub	sp, #68	; 0x44
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b28:	2b21      	cmp	r3, #33	; 0x21
 8008b2a:	d165      	bne.n	8008bf8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b32:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008b34:	e05c      	b.n	8008bf0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d133      	bne.n	8008baa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b58:	637b      	str	r3, [r7, #52]	; 0x34
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e5      	bne.n	8008b42 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b98:	6979      	ldr	r1, [r7, #20]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	e841 2300 	strex	r3, r2, [r1]
 8008ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e6      	bne.n	8008b76 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008ba8:	e026      	b.n	8008bf8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d018      	beq.n	8008bea <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bbc:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bcc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd2:	1c9a      	adds	r2, r3, #2
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008bea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008bec:	3b01      	subs	r3, #1
 8008bee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008bf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d19f      	bne.n	8008b36 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008bf6:	e7ff      	b.n	8008bf8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008bf8:	bf00      	nop
 8008bfa:	3744      	adds	r7, #68	; 0x44
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c20:	61fb      	str	r3, [r7, #28]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	61bb      	str	r3, [r7, #24]
 8008c2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2e:	6979      	ldr	r1, [r7, #20]
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	613b      	str	r3, [r7, #16]
   return(result);
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e6      	bne.n	8008c0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2220      	movs	r2, #32
 8008c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7fe ffbf 	bl	8007bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c52:	bf00      	nop
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b096      	sub	sp, #88	; 0x58
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c72:	2b22      	cmp	r3, #34	; 0x22
 8008c74:	f040 8095 	bne.w	8008da2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c82:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008c86:	b2d9      	uxtb	r1, r3
 8008c88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c92:	400a      	ands	r2, r1
 8008c94:	b2d2      	uxtb	r2, r2
 8008c96:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	3b01      	subs	r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d178      	bne.n	8008db2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cd4:	653b      	str	r3, [r7, #80]	; 0x50
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cde:	647b      	str	r3, [r7, #68]	; 0x44
 8008ce0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e6      	bne.n	8008cc0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	623b      	str	r3, [r7, #32]
   return(result);
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d12:	633a      	str	r2, [r7, #48]	; 0x30
 8008d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e5      	bne.n	8008cf2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d12e      	bne.n	8008d9a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	e853 3f00 	ldrex	r3, [r3]
 8008d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 0310 	bic.w	r3, r3, #16
 8008d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d64:	69b9      	ldr	r1, [r7, #24]
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	e841 2300 	strex	r3, r2, [r1]
 8008d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e6      	bne.n	8008d42 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f003 0310 	and.w	r3, r3, #16
 8008d7e:	2b10      	cmp	r3, #16
 8008d80:	d103      	bne.n	8008d8a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2210      	movs	r2, #16
 8008d88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7fe ff30 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d98:	e00b      	b.n	8008db2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7f9 fc02 	bl	80025a4 <HAL_UART_RxCpltCallback>
}
 8008da0:	e007      	b.n	8008db2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699a      	ldr	r2, [r3, #24]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f042 0208 	orr.w	r2, r2, #8
 8008db0:	619a      	str	r2, [r3, #24]
}
 8008db2:	bf00      	nop
 8008db4:	3758      	adds	r7, #88	; 0x58
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b096      	sub	sp, #88	; 0x58
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dc8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd2:	2b22      	cmp	r3, #34	; 0x22
 8008dd4:	f040 8095 	bne.w	8008f02 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008de8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008dec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008df0:	4013      	ands	r3, r2
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfc:	1c9a      	adds	r2, r3, #2
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d178      	bne.n	8008f12 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e3e:	643b      	str	r3, [r7, #64]	; 0x40
 8008e40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e6      	bne.n	8008e20 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	f023 0301 	bic.w	r3, r3, #1
 8008e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e5      	bne.n	8008e52 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d12e      	bne.n	8008efa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f023 0310 	bic.w	r3, r3, #16
 8008eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	6979      	ldr	r1, [r7, #20]
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e6      	bne.n	8008ea2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f003 0310 	and.w	r3, r3, #16
 8008ede:	2b10      	cmp	r3, #16
 8008ee0:	d103      	bne.n	8008eea <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2210      	movs	r2, #16
 8008ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fe fe80 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ef8:	e00b      	b.n	8008f12 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7f9 fb52 	bl	80025a4 <HAL_UART_RxCpltCallback>
}
 8008f00:	e007      	b.n	8008f12 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	699a      	ldr	r2, [r3, #24]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f042 0208 	orr.w	r2, r2, #8
 8008f10:	619a      	str	r2, [r3, #24]
}
 8008f12:	bf00      	nop
 8008f14:	3758      	adds	r7, #88	; 0x58
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b0a6      	sub	sp, #152	; 0x98
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f2a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f52:	2b22      	cmp	r3, #34	; 0x22
 8008f54:	f040 814f 	bne.w	80091f6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f5e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f62:	e0f6      	b.n	8009152 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f6e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008f72:	b2d9      	uxtb	r1, r3
 8008f74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7e:	400a      	ands	r2, r1
 8008f80:	b2d2      	uxtb	r2, r2
 8008f82:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f88:	1c5a      	adds	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d053      	beq.n	800905e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d011      	beq.n	8008fe6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fdc:	f043 0201 	orr.w	r2, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d011      	beq.n	8009016 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00b      	beq.n	8009016 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2202      	movs	r2, #2
 8009004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800900c:	f043 0204 	orr.w	r2, r3, #4
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009016:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800901a:	f003 0304 	and.w	r3, r3, #4
 800901e:	2b00      	cmp	r3, #0
 8009020:	d011      	beq.n	8009046 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2204      	movs	r2, #4
 8009034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800903c:	f043 0202 	orr.w	r2, r3, #2
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7fe fdc7 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d173      	bne.n	8009152 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800907a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800907e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800908c:	66bb      	str	r3, [r7, #104]	; 0x68
 800908e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009092:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800909a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e4      	bne.n	800906a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3308      	adds	r3, #8
 80090a6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090b6:	f023 0301 	bic.w	r3, r3, #1
 80090ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3308      	adds	r3, #8
 80090c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80090c4:	657a      	str	r2, [r7, #84]	; 0x54
 80090c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e3      	bne.n	80090a0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d12e      	bne.n	800914c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	f023 0310 	bic.w	r3, r3, #16
 8009108:	67bb      	str	r3, [r7, #120]	; 0x78
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009112:	643b      	str	r3, [r7, #64]	; 0x40
 8009114:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e6      	bne.n	80090f4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	2b10      	cmp	r3, #16
 8009132:	d103      	bne.n	800913c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2210      	movs	r2, #16
 800913a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fe fd57 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
 800914a:	e002      	b.n	8009152 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7f9 fa29 	bl	80025a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009152:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009156:	2b00      	cmp	r3, #0
 8009158:	d006      	beq.n	8009168 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800915a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	f47f aefe 	bne.w	8008f64 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800916e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009172:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009176:	2b00      	cmp	r3, #0
 8009178:	d045      	beq.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009180:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009184:	429a      	cmp	r2, r3
 8009186:	d23e      	bcs.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	61fb      	str	r3, [r7, #28]
   return(result);
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800919e:	673b      	str	r3, [r7, #112]	; 0x70
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3308      	adds	r3, #8
 80091a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e5      	bne.n	8009188 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a14      	ldr	r2, [pc, #80]	; (8009210 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80091c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f043 0320 	orr.w	r3, r3, #32
 80091d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	461a      	mov	r2, r3
 80091de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e0:	61bb      	str	r3, [r7, #24]
 80091e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6979      	ldr	r1, [r7, #20]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	613b      	str	r3, [r7, #16]
   return(result);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e6      	bne.n	80091c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091f4:	e007      	b.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	699a      	ldr	r2, [r3, #24]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0208 	orr.w	r2, r2, #8
 8009204:	619a      	str	r2, [r3, #24]
}
 8009206:	bf00      	nop
 8009208:	3798      	adds	r7, #152	; 0x98
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	08008c5b 	.word	0x08008c5b

08009214 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b0a8      	sub	sp, #160	; 0xa0
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009222:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924a:	2b22      	cmp	r3, #34	; 0x22
 800924c:	f040 8153 	bne.w	80094f6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009256:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800925a:	e0fa      	b.n	8009452 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800926a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800926e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009272:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009276:	4013      	ands	r3, r2
 8009278:	b29a      	uxth	r2, r3
 800927a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800927e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009284:	1c9a      	adds	r2, r3, #2
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	b29a      	uxth	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092aa:	f003 0307 	and.w	r3, r3, #7
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d053      	beq.n	800935a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d011      	beq.n	80092e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80092be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2201      	movs	r2, #1
 80092d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092d8:	f043 0201 	orr.w	r2, r3, #1
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d011      	beq.n	8009312 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80092ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2202      	movs	r2, #2
 8009300:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009308:	f043 0204 	orr.w	r2, r3, #4
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009312:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009316:	f003 0304 	and.w	r3, r3, #4
 800931a:	2b00      	cmp	r3, #0
 800931c:	d011      	beq.n	8009342 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800931e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00b      	beq.n	8009342 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2204      	movs	r2, #4
 8009330:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009338:	f043 0202 	orr.w	r2, r3, #2
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009348:	2b00      	cmp	r3, #0
 800934a:	d006      	beq.n	800935a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7fe fc49 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009360:	b29b      	uxth	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d175      	bne.n	8009452 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800937a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800938a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800938e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009390:	e841 2300 	strex	r3, r2, [r1]
 8009394:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1e4      	bne.n	8009366 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3308      	adds	r3, #8
 80093a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093b2:	f023 0301 	bic.w	r3, r3, #1
 80093b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80093c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e1      	bne.n	800939c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2220      	movs	r2, #32
 80093dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d12e      	bne.n	800944c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009404:	f023 0310 	bic.w	r3, r3, #16
 8009408:	67fb      	str	r3, [r7, #124]	; 0x7c
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009412:	647b      	str	r3, [r7, #68]	; 0x44
 8009414:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e6      	bne.n	80093f4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	f003 0310 	and.w	r3, r3, #16
 8009430:	2b10      	cmp	r3, #16
 8009432:	d103      	bne.n	800943c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2210      	movs	r2, #16
 800943a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7fe fbd7 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
 800944a:	e002      	b.n	8009452 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7f9 f8a9 	bl	80025a4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009452:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009456:	2b00      	cmp	r3, #0
 8009458:	d006      	beq.n	8009468 <UART_RxISR_16BIT_FIFOEN+0x254>
 800945a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	f47f aefa 	bne.w	800925c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800946e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009472:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009476:	2b00      	cmp	r3, #0
 8009478:	d045      	beq.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009480:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009484:	429a      	cmp	r2, r3
 8009486:	d23e      	bcs.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3308      	adds	r3, #8
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	e853 3f00 	ldrex	r3, [r3]
 8009496:	623b      	str	r3, [r7, #32]
   return(result);
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800949e:	677b      	str	r3, [r7, #116]	; 0x74
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3308      	adds	r3, #8
 80094a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80094a8:	633a      	str	r2, [r7, #48]	; 0x30
 80094aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b0:	e841 2300 	strex	r3, r2, [r1]
 80094b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e5      	bne.n	8009488 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a14      	ldr	r2, [pc, #80]	; (8009510 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80094c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f043 0320 	orr.w	r3, r3, #32
 80094d6:	673b      	str	r3, [r7, #112]	; 0x70
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	69b9      	ldr	r1, [r7, #24]
 80094e6:	69fa      	ldr	r2, [r7, #28]
 80094e8:	e841 2300 	strex	r3, r2, [r1]
 80094ec:	617b      	str	r3, [r7, #20]
   return(result);
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e6      	bne.n	80094c2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094f4:	e007      	b.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	699a      	ldr	r2, [r3, #24]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0208 	orr.w	r2, r2, #8
 8009504:	619a      	str	r2, [r3, #24]
}
 8009506:	bf00      	nop
 8009508:	37a0      	adds	r7, #160	; 0xa0
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	08008dbb 	.word	0x08008dbb

08009514 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <HAL_UARTEx_DisableFifoMode+0x16>
 8009562:	2302      	movs	r3, #2
 8009564:	e027      	b.n	80095b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2224      	movs	r2, #36	; 0x24
 8009572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 0201 	bic.w	r2, r2, #1
 800958c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009594:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d101      	bne.n	80095da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095d6:	2302      	movs	r3, #2
 80095d8:	e02d      	b.n	8009636 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2224      	movs	r2, #36	; 0x24
 80095e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0201 	bic.w	r2, r2, #1
 8009600:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f850 	bl	80096bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2220      	movs	r2, #32
 8009628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800964e:	2b01      	cmp	r3, #1
 8009650:	d101      	bne.n	8009656 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009652:	2302      	movs	r3, #2
 8009654:	e02d      	b.n	80096b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2224      	movs	r2, #36	; 0x24
 8009662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0201 	bic.w	r2, r2, #1
 800967c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f812 	bl	80096bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d108      	bne.n	80096de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096dc:	e031      	b.n	8009742 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096de:	2308      	movs	r3, #8
 80096e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096e2:	2308      	movs	r3, #8
 80096e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	0e5b      	lsrs	r3, r3, #25
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	f003 0307 	and.w	r3, r3, #7
 80096f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	0f5b      	lsrs	r3, r3, #29
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	f003 0307 	and.w	r3, r3, #7
 8009704:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	7b3a      	ldrb	r2, [r7, #12]
 800970a:	4911      	ldr	r1, [pc, #68]	; (8009750 <UARTEx_SetNbDataToProcess+0x94>)
 800970c:	5c8a      	ldrb	r2, [r1, r2]
 800970e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009712:	7b3a      	ldrb	r2, [r7, #12]
 8009714:	490f      	ldr	r1, [pc, #60]	; (8009754 <UARTEx_SetNbDataToProcess+0x98>)
 8009716:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009718:	fb93 f3f2 	sdiv	r3, r3, r2
 800971c:	b29a      	uxth	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	7b7a      	ldrb	r2, [r7, #13]
 8009728:	4909      	ldr	r1, [pc, #36]	; (8009750 <UARTEx_SetNbDataToProcess+0x94>)
 800972a:	5c8a      	ldrb	r2, [r1, r2]
 800972c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009730:	7b7a      	ldrb	r2, [r7, #13]
 8009732:	4908      	ldr	r1, [pc, #32]	; (8009754 <UARTEx_SetNbDataToProcess+0x98>)
 8009734:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009736:	fb93 f3f2 	sdiv	r3, r3, r2
 800973a:	b29a      	uxth	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	080099ac 	.word	0x080099ac
 8009754:	080099b4 	.word	0x080099b4

08009758 <memcmp>:
 8009758:	b510      	push	{r4, lr}
 800975a:	3901      	subs	r1, #1
 800975c:	4402      	add	r2, r0
 800975e:	4290      	cmp	r0, r2
 8009760:	d101      	bne.n	8009766 <memcmp+0xe>
 8009762:	2000      	movs	r0, #0
 8009764:	e005      	b.n	8009772 <memcmp+0x1a>
 8009766:	7803      	ldrb	r3, [r0, #0]
 8009768:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800976c:	42a3      	cmp	r3, r4
 800976e:	d001      	beq.n	8009774 <memcmp+0x1c>
 8009770:	1b18      	subs	r0, r3, r4
 8009772:	bd10      	pop	{r4, pc}
 8009774:	3001      	adds	r0, #1
 8009776:	e7f2      	b.n	800975e <memcmp+0x6>

08009778 <memset>:
 8009778:	4402      	add	r2, r0
 800977a:	4603      	mov	r3, r0
 800977c:	4293      	cmp	r3, r2
 800977e:	d100      	bne.n	8009782 <memset+0xa>
 8009780:	4770      	bx	lr
 8009782:	f803 1b01 	strb.w	r1, [r3], #1
 8009786:	e7f9      	b.n	800977c <memset+0x4>

08009788 <__libc_init_array>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	4d0d      	ldr	r5, [pc, #52]	; (80097c0 <__libc_init_array+0x38>)
 800978c:	4c0d      	ldr	r4, [pc, #52]	; (80097c4 <__libc_init_array+0x3c>)
 800978e:	1b64      	subs	r4, r4, r5
 8009790:	10a4      	asrs	r4, r4, #2
 8009792:	2600      	movs	r6, #0
 8009794:	42a6      	cmp	r6, r4
 8009796:	d109      	bne.n	80097ac <__libc_init_array+0x24>
 8009798:	4d0b      	ldr	r5, [pc, #44]	; (80097c8 <__libc_init_array+0x40>)
 800979a:	4c0c      	ldr	r4, [pc, #48]	; (80097cc <__libc_init_array+0x44>)
 800979c:	f000 f826 	bl	80097ec <_init>
 80097a0:	1b64      	subs	r4, r4, r5
 80097a2:	10a4      	asrs	r4, r4, #2
 80097a4:	2600      	movs	r6, #0
 80097a6:	42a6      	cmp	r6, r4
 80097a8:	d105      	bne.n	80097b6 <__libc_init_array+0x2e>
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
 80097ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b0:	4798      	blx	r3
 80097b2:	3601      	adds	r6, #1
 80097b4:	e7ee      	b.n	8009794 <__libc_init_array+0xc>
 80097b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ba:	4798      	blx	r3
 80097bc:	3601      	adds	r6, #1
 80097be:	e7f2      	b.n	80097a6 <__libc_init_array+0x1e>
 80097c0:	080099c4 	.word	0x080099c4
 80097c4:	080099c4 	.word	0x080099c4
 80097c8:	080099c4 	.word	0x080099c4
 80097cc:	080099c8 	.word	0x080099c8

080097d0 <memcpy>:
 80097d0:	440a      	add	r2, r1
 80097d2:	4291      	cmp	r1, r2
 80097d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80097d8:	d100      	bne.n	80097dc <memcpy+0xc>
 80097da:	4770      	bx	lr
 80097dc:	b510      	push	{r4, lr}
 80097de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097e6:	4291      	cmp	r1, r2
 80097e8:	d1f9      	bne.n	80097de <memcpy+0xe>
 80097ea:	bd10      	pop	{r4, pc}

080097ec <_init>:
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	bf00      	nop
 80097f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f2:	bc08      	pop	{r3}
 80097f4:	469e      	mov	lr, r3
 80097f6:	4770      	bx	lr

080097f8 <_fini>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr
